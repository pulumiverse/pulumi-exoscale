// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manage Exoscale [DNS](https://community.exoscale.com/product/networking/dns/) Domain Records.
 *
 * Corresponding data source: exoscale_domain_record.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as exoscale from "@pulumiverse/exoscale";
 *
 * const myDomain = new exoscale.Domain("myDomain", {});
 * const myHost = new exoscale.DomainRecord("myHost", {
 *     domain: myDomain.id,
 *     recordType: "A",
 *     content: "1.2.3.4",
 * });
 * const myHostAlias = new exoscale.DomainRecord("myHostAlias", {
 *     domain: myDomain.id,
 *     recordType: "CNAME",
 *     content: myHost.hostname,
 * });
 * ```
 *
 * Please refer to the examples
 * directory for complete configuration examples.
 *
 * ## Import
 *
 * An existing DNS domain record may be imported by `<ID>`:
 *
 * ```sh
 * $ pulumi import exoscale:index/domainRecord:DomainRecord \ 
 * ```
 *
 *   exoscale_domain_record.my_host \
 *
 *   f81d4fae-7dec-11d0-a765-00a0c91e6bf6
 */
export class DomainRecord extends pulumi.CustomResource {
    /**
     * Get an existing DomainRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainRecordState, opts?: pulumi.CustomResourceOptions): DomainRecord {
        return new DomainRecord(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'exoscale:index/domainRecord:DomainRecord';

    /**
     * Returns true if the given object is an instance of DomainRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DomainRecord {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainRecord.__pulumiType;
    }

    /**
     * The record value. Format follows specific record type. For example SRV record format would be `<weight> <port> <target>`
     */
    public readonly content!: pulumi.Output<string>;
    /**
     * The normalized value of the record
     */
    public /*out*/ readonly contentNormalized!: pulumi.Output<string>;
    /**
     * ❗ The parent exoscale.Domain to attach the record to.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * The record *Fully Qualified Domain Name* (FQDN). Useful for aliasing `A`/`AAAA` records with `CNAME`.
     */
    public /*out*/ readonly hostname!: pulumi.Output<string>;
    /**
     * The record name, Leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The record priority (for types that support it; minimum `0`).
     */
    public readonly prio!: pulumi.Output<number>;
    /**
     * ❗ The record type (`A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`).
     */
    public readonly recordType!: pulumi.Output<string>;
    /**
     * The record TTL (seconds; minimum `0`; default: `3600`).
     */
    public readonly ttl!: pulumi.Output<number>;

    /**
     * Create a DomainRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainRecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainRecordArgs | DomainRecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainRecordState | undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["contentNormalized"] = state ? state.contentNormalized : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["prio"] = state ? state.prio : undefined;
            resourceInputs["recordType"] = state ? state.recordType : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
        } else {
            const args = argsOrState as DomainRecordArgs | undefined;
            if ((!args || args.content === undefined) && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.recordType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recordType'");
            }
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["prio"] = args ? args.prio : undefined;
            resourceInputs["recordType"] = args ? args.recordType : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["contentNormalized"] = undefined /*out*/;
            resourceInputs["hostname"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DomainRecord.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DomainRecord resources.
 */
export interface DomainRecordState {
    /**
     * The record value. Format follows specific record type. For example SRV record format would be `<weight> <port> <target>`
     */
    content?: pulumi.Input<string>;
    /**
     * The normalized value of the record
     */
    contentNormalized?: pulumi.Input<string>;
    /**
     * ❗ The parent exoscale.Domain to attach the record to.
     */
    domain?: pulumi.Input<string>;
    /**
     * The record *Fully Qualified Domain Name* (FQDN). Useful for aliasing `A`/`AAAA` records with `CNAME`.
     */
    hostname?: pulumi.Input<string>;
    /**
     * The record name, Leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
     */
    name?: pulumi.Input<string>;
    /**
     * The record priority (for types that support it; minimum `0`).
     */
    prio?: pulumi.Input<number>;
    /**
     * ❗ The record type (`A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`).
     */
    recordType?: pulumi.Input<string>;
    /**
     * The record TTL (seconds; minimum `0`; default: `3600`).
     */
    ttl?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DomainRecord resource.
 */
export interface DomainRecordArgs {
    /**
     * The record value. Format follows specific record type. For example SRV record format would be `<weight> <port> <target>`
     */
    content: pulumi.Input<string>;
    /**
     * ❗ The parent exoscale.Domain to attach the record to.
     */
    domain: pulumi.Input<string>;
    /**
     * The record name, Leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
     */
    name?: pulumi.Input<string>;
    /**
     * The record priority (for types that support it; minimum `0`).
     */
    prio?: pulumi.Input<number>;
    /**
     * ❗ The record type (`A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`).
     */
    recordType: pulumi.Input<string>;
    /**
     * The record TTL (seconds; minimum `0`; default: `3600`).
     */
    ttl?: pulumi.Input<number>;
}
