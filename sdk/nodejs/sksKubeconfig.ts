// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SksKubeconfig extends pulumi.CustomResource {
    /**
     * Get an existing SksKubeconfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SksKubeconfigState, opts?: pulumi.CustomResourceOptions): SksKubeconfig {
        return new SksKubeconfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'exoscale:index/sksKubeconfig:SksKubeconfig';

    /**
     * Returns true if the given object is an instance of SksKubeconfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SksKubeconfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SksKubeconfig.__pulumiType;
    }

    /**
     * ❗ The parent exoscale*sks*cluster ID.
     */
    declare public readonly clusterId: pulumi.Output<string>;
    declare public readonly earlyRenewalSeconds: pulumi.Output<number | undefined>;
    /**
     * ❗ Group names in the generated Kubeconfig. The certificate present in the Kubeconfig will have these roles set in the Organization field.
     */
    declare public readonly groups: pulumi.Output<string[]>;
    /**
     * The generated Kubeconfig (YAML content).
     */
    declare public /*out*/ readonly kubeconfig: pulumi.Output<string>;
    declare public /*out*/ readonly readyForRenewal: pulumi.Output<boolean>;
    /**
     * ❗ The Time-to-Live of the Kubeconfig, after which it will expire / become invalid (seconds; default: 2592000 = 30 days).
     */
    declare public readonly ttlSeconds: pulumi.Output<number | undefined>;
    /**
     * ❗ User name in the generated Kubeconfig. The certificate present in the Kubeconfig will also have this name set for the CN field.
     */
    declare public readonly user: pulumi.Output<string>;
    /**
     * ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
     */
    declare public readonly zone: pulumi.Output<string>;

    /**
     * Create a SksKubeconfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SksKubeconfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SksKubeconfigArgs | SksKubeconfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SksKubeconfigState | undefined;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["earlyRenewalSeconds"] = state?.earlyRenewalSeconds;
            resourceInputs["groups"] = state?.groups;
            resourceInputs["kubeconfig"] = state?.kubeconfig;
            resourceInputs["readyForRenewal"] = state?.readyForRenewal;
            resourceInputs["ttlSeconds"] = state?.ttlSeconds;
            resourceInputs["user"] = state?.user;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as SksKubeconfigArgs | undefined;
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (args?.groups === undefined && !opts.urn) {
                throw new Error("Missing required property 'groups'");
            }
            if (args?.user === undefined && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            if (args?.zone === undefined && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["earlyRenewalSeconds"] = args?.earlyRenewalSeconds;
            resourceInputs["groups"] = args?.groups;
            resourceInputs["ttlSeconds"] = args?.ttlSeconds;
            resourceInputs["user"] = args?.user;
            resourceInputs["zone"] = args?.zone;
            resourceInputs["kubeconfig"] = undefined /*out*/;
            resourceInputs["readyForRenewal"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["kubeconfig"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SksKubeconfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SksKubeconfig resources.
 */
export interface SksKubeconfigState {
    /**
     * ❗ The parent exoscale*sks*cluster ID.
     */
    clusterId?: pulumi.Input<string>;
    earlyRenewalSeconds?: pulumi.Input<number>;
    /**
     * ❗ Group names in the generated Kubeconfig. The certificate present in the Kubeconfig will have these roles set in the Organization field.
     */
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The generated Kubeconfig (YAML content).
     */
    kubeconfig?: pulumi.Input<string>;
    readyForRenewal?: pulumi.Input<boolean>;
    /**
     * ❗ The Time-to-Live of the Kubeconfig, after which it will expire / become invalid (seconds; default: 2592000 = 30 days).
     */
    ttlSeconds?: pulumi.Input<number>;
    /**
     * ❗ User name in the generated Kubeconfig. The certificate present in the Kubeconfig will also have this name set for the CN field.
     */
    user?: pulumi.Input<string>;
    /**
     * ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SksKubeconfig resource.
 */
export interface SksKubeconfigArgs {
    /**
     * ❗ The parent exoscale*sks*cluster ID.
     */
    clusterId: pulumi.Input<string>;
    earlyRenewalSeconds?: pulumi.Input<number>;
    /**
     * ❗ Group names in the generated Kubeconfig. The certificate present in the Kubeconfig will have these roles set in the Organization field.
     */
    groups: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ❗ The Time-to-Live of the Kubeconfig, after which it will expire / become invalid (seconds; default: 2592000 = 30 days).
     */
    ttlSeconds?: pulumi.Input<number>;
    /**
     * ❗ User name in the generated Kubeconfig. The certificate present in the Kubeconfig will also have this name set for the CN field.
     */
    user: pulumi.Input<string>;
    /**
     * ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
     */
    zone: pulumi.Input<string>;
}
