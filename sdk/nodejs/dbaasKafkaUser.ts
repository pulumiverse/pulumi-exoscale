// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manage service users for a Kafka Exoscale [Database Services (DBaaS)](https://community.exoscale.com/documentation/dbaas/).
 */
export class DbaasKafkaUser extends pulumi.CustomResource {
    /**
     * Get an existing DbaasKafkaUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbaasKafkaUserState, opts?: pulumi.CustomResourceOptions): DbaasKafkaUser {
        return new DbaasKafkaUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'exoscale:index/dbaasKafkaUser:DbaasKafkaUser';

    /**
     * Returns true if the given object is an instance of DbaasKafkaUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbaasKafkaUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbaasKafkaUser.__pulumiType;
    }

    /**
     * Access certificate for the user.
     */
    public /*out*/ readonly accessCert!: pulumi.Output<string>;
    /**
     * Access certificate expiry date.
     */
    public /*out*/ readonly accessCertExpiry!: pulumi.Output<string>;
    /**
     * Access certificate key for the user.
     */
    public /*out*/ readonly accessKey!: pulumi.Output<string>;
    /**
     * The password of the service user.
     */
    public /*out*/ readonly password!: pulumi.Output<string>;
    /**
     * ❗ The name of the database service.
     */
    public readonly service!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DbaasKafkaUserTimeouts | undefined>;
    /**
     * The type of the service user.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * ❗ The name of the user for this service.
     */
    public readonly username!: pulumi.Output<string>;
    /**
     * ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a DbaasKafkaUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbaasKafkaUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbaasKafkaUserArgs | DbaasKafkaUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DbaasKafkaUserState | undefined;
            resourceInputs["accessCert"] = state ? state.accessCert : undefined;
            resourceInputs["accessCertExpiry"] = state ? state.accessCertExpiry : undefined;
            resourceInputs["accessKey"] = state ? state.accessKey : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as DbaasKafkaUserArgs | undefined;
            if ((!args || args.service === undefined) && !opts.urn) {
                throw new Error("Missing required property 'service'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["accessCert"] = undefined /*out*/;
            resourceInputs["accessCertExpiry"] = undefined /*out*/;
            resourceInputs["accessKey"] = undefined /*out*/;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessCert", "accessKey", "password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DbaasKafkaUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DbaasKafkaUser resources.
 */
export interface DbaasKafkaUserState {
    /**
     * Access certificate for the user.
     */
    accessCert?: pulumi.Input<string>;
    /**
     * Access certificate expiry date.
     */
    accessCertExpiry?: pulumi.Input<string>;
    /**
     * Access certificate key for the user.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * The password of the service user.
     */
    password?: pulumi.Input<string>;
    /**
     * ❗ The name of the database service.
     */
    service?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DbaasKafkaUserTimeouts>;
    /**
     * The type of the service user.
     */
    type?: pulumi.Input<string>;
    /**
     * ❗ The name of the user for this service.
     */
    username?: pulumi.Input<string>;
    /**
     * ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DbaasKafkaUser resource.
 */
export interface DbaasKafkaUserArgs {
    /**
     * ❗ The name of the database service.
     */
    service: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DbaasKafkaUserTimeouts>;
    /**
     * ❗ The name of the user for this service.
     */
    username: pulumi.Input<string>;
    /**
     * ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
     */
    zone: pulumi.Input<string>;
}
