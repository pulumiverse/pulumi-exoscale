// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manage Exoscale [Database Services (DBaaS)](https://community.exoscale.com/documentation/dbaas/).
 */
export class Dbaas extends pulumi.CustomResource {
    /**
     * Get an existing Dbaas resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbaasState, opts?: pulumi.CustomResourceOptions): Dbaas {
        return new Dbaas(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'exoscale:index/dbaas:Dbaas';

    /**
     * Returns true if the given object is an instance of Dbaas.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dbaas {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dbaas.__pulumiType;
    }

    /**
     * CA Certificate required to reach a DBaaS service through a TLS-protected connection.
     */
    declare public /*out*/ readonly caCertificate: pulumi.Output<string>;
    /**
     * The creation date of the database service.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The disk size of the database service.
     */
    declare public /*out*/ readonly diskSize: pulumi.Output<number>;
    /**
     * *grafana* database service type specific arguments. Structure is documented below.
     */
    declare public readonly grafana: pulumi.Output<outputs.DbaasGrafana | undefined>;
    /**
     * *kafka* database service type specific arguments. Structure is documented below.
     */
    declare public readonly kafka: pulumi.Output<outputs.DbaasKafka | undefined>;
    /**
     * The day of week to perform the automated database service maintenance (`never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).
     */
    declare public readonly maintenanceDow: pulumi.Output<string>;
    /**
     * The time of day to perform the automated database service maintenance (`HH:MM:SS`)
     */
    declare public readonly maintenanceTime: pulumi.Output<string>;
    /**
     * *mysql* database service type specific arguments. Structure is documented below.
     */
    declare public readonly mysql: pulumi.Output<outputs.DbaasMysql | undefined>;
    /**
     * ❗ The name of the database service.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The number of CPUs of the database service.
     */
    declare public /*out*/ readonly nodeCpus: pulumi.Output<number>;
    /**
     * The amount of memory of the database service.
     */
    declare public /*out*/ readonly nodeMemory: pulumi.Output<number>;
    /**
     * The number of nodes of the database service.
     */
    declare public /*out*/ readonly nodes: pulumi.Output<number>;
    /**
     * *opensearch* database service type specific arguments. Structure is documented below.
     */
    declare public readonly opensearch: pulumi.Output<outputs.DbaasOpensearch | undefined>;
    /**
     * *pg* database service type specific arguments. Structure is documented below.
     */
    declare public readonly pg: pulumi.Output<outputs.DbaasPg | undefined>;
    /**
     * The plan of the database service (use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo dbaas type show <TYPE> --plans` - for reference).
     */
    declare public readonly plan: pulumi.Output<string>;
    /**
     * The current state of the database service.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * The database service protection boolean flag against termination/power-off.
     */
    declare public readonly terminationProtection: pulumi.Output<boolean>;
    declare public readonly timeouts: pulumi.Output<outputs.DbaasTimeouts | undefined>;
    /**
     * ❗ The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `valkey`, `grafana`).
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * The date of the latest database service update.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * *valkey* database service type specific arguments. Structure is documented below.
     */
    declare public readonly valkey: pulumi.Output<outputs.DbaasValkey | undefined>;
    /**
     * ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
     */
    declare public readonly zone: pulumi.Output<string>;

    /**
     * Create a Dbaas resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbaasArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbaasArgs | DbaasState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DbaasState | undefined;
            resourceInputs["caCertificate"] = state?.caCertificate;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["diskSize"] = state?.diskSize;
            resourceInputs["grafana"] = state?.grafana;
            resourceInputs["kafka"] = state?.kafka;
            resourceInputs["maintenanceDow"] = state?.maintenanceDow;
            resourceInputs["maintenanceTime"] = state?.maintenanceTime;
            resourceInputs["mysql"] = state?.mysql;
            resourceInputs["name"] = state?.name;
            resourceInputs["nodeCpus"] = state?.nodeCpus;
            resourceInputs["nodeMemory"] = state?.nodeMemory;
            resourceInputs["nodes"] = state?.nodes;
            resourceInputs["opensearch"] = state?.opensearch;
            resourceInputs["pg"] = state?.pg;
            resourceInputs["plan"] = state?.plan;
            resourceInputs["state"] = state?.state;
            resourceInputs["terminationProtection"] = state?.terminationProtection;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["type"] = state?.type;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["valkey"] = state?.valkey;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as DbaasArgs | undefined;
            if (args?.plan === undefined && !opts.urn) {
                throw new Error("Missing required property 'plan'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if (args?.zone === undefined && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["grafana"] = args?.grafana;
            resourceInputs["kafka"] = args?.kafka;
            resourceInputs["maintenanceDow"] = args?.maintenanceDow;
            resourceInputs["maintenanceTime"] = args?.maintenanceTime;
            resourceInputs["mysql"] = args?.mysql;
            resourceInputs["name"] = args?.name;
            resourceInputs["opensearch"] = args?.opensearch;
            resourceInputs["pg"] = args?.pg;
            resourceInputs["plan"] = args?.plan;
            resourceInputs["terminationProtection"] = args?.terminationProtection;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["type"] = args?.type;
            resourceInputs["valkey"] = args?.valkey;
            resourceInputs["zone"] = args?.zone;
            resourceInputs["caCertificate"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["diskSize"] = undefined /*out*/;
            resourceInputs["nodeCpus"] = undefined /*out*/;
            resourceInputs["nodeMemory"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dbaas.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Dbaas resources.
 */
export interface DbaasState {
    /**
     * CA Certificate required to reach a DBaaS service through a TLS-protected connection.
     */
    caCertificate?: pulumi.Input<string>;
    /**
     * The creation date of the database service.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The disk size of the database service.
     */
    diskSize?: pulumi.Input<number>;
    /**
     * *grafana* database service type specific arguments. Structure is documented below.
     */
    grafana?: pulumi.Input<inputs.DbaasGrafana>;
    /**
     * *kafka* database service type specific arguments. Structure is documented below.
     */
    kafka?: pulumi.Input<inputs.DbaasKafka>;
    /**
     * The day of week to perform the automated database service maintenance (`never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).
     */
    maintenanceDow?: pulumi.Input<string>;
    /**
     * The time of day to perform the automated database service maintenance (`HH:MM:SS`)
     */
    maintenanceTime?: pulumi.Input<string>;
    /**
     * *mysql* database service type specific arguments. Structure is documented below.
     */
    mysql?: pulumi.Input<inputs.DbaasMysql>;
    /**
     * ❗ The name of the database service.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of CPUs of the database service.
     */
    nodeCpus?: pulumi.Input<number>;
    /**
     * The amount of memory of the database service.
     */
    nodeMemory?: pulumi.Input<number>;
    /**
     * The number of nodes of the database service.
     */
    nodes?: pulumi.Input<number>;
    /**
     * *opensearch* database service type specific arguments. Structure is documented below.
     */
    opensearch?: pulumi.Input<inputs.DbaasOpensearch>;
    /**
     * *pg* database service type specific arguments. Structure is documented below.
     */
    pg?: pulumi.Input<inputs.DbaasPg>;
    /**
     * The plan of the database service (use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo dbaas type show <TYPE> --plans` - for reference).
     */
    plan?: pulumi.Input<string>;
    /**
     * The current state of the database service.
     */
    state?: pulumi.Input<string>;
    /**
     * The database service protection boolean flag against termination/power-off.
     */
    terminationProtection?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.DbaasTimeouts>;
    /**
     * ❗ The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `valkey`, `grafana`).
     */
    type?: pulumi.Input<string>;
    /**
     * The date of the latest database service update.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * *valkey* database service type specific arguments. Structure is documented below.
     */
    valkey?: pulumi.Input<inputs.DbaasValkey>;
    /**
     * ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Dbaas resource.
 */
export interface DbaasArgs {
    /**
     * *grafana* database service type specific arguments. Structure is documented below.
     */
    grafana?: pulumi.Input<inputs.DbaasGrafana>;
    /**
     * *kafka* database service type specific arguments. Structure is documented below.
     */
    kafka?: pulumi.Input<inputs.DbaasKafka>;
    /**
     * The day of week to perform the automated database service maintenance (`never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).
     */
    maintenanceDow?: pulumi.Input<string>;
    /**
     * The time of day to perform the automated database service maintenance (`HH:MM:SS`)
     */
    maintenanceTime?: pulumi.Input<string>;
    /**
     * *mysql* database service type specific arguments. Structure is documented below.
     */
    mysql?: pulumi.Input<inputs.DbaasMysql>;
    /**
     * ❗ The name of the database service.
     */
    name?: pulumi.Input<string>;
    /**
     * *opensearch* database service type specific arguments. Structure is documented below.
     */
    opensearch?: pulumi.Input<inputs.DbaasOpensearch>;
    /**
     * *pg* database service type specific arguments. Structure is documented below.
     */
    pg?: pulumi.Input<inputs.DbaasPg>;
    /**
     * The plan of the database service (use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo dbaas type show <TYPE> --plans` - for reference).
     */
    plan: pulumi.Input<string>;
    /**
     * The database service protection boolean flag against termination/power-off.
     */
    terminationProtection?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.DbaasTimeouts>;
    /**
     * ❗ The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `valkey`, `grafana`).
     */
    type: pulumi.Input<string>;
    /**
     * *valkey* database service type specific arguments. Structure is documented below.
     */
    valkey?: pulumi.Input<inputs.DbaasValkey>;
    /**
     * ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
     */
    zone: pulumi.Input<string>;
}
