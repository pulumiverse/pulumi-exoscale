// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manage Exoscale [Scalable Kubernetes Service (SKS)](https://community.exoscale.com/product/compute/containers/) Node Pools.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as exoscale from "@pulumiverse/exoscale";
 *
 * const mySksCluster = new exoscale.SksCluster("my_sks_cluster", {
 *     zone: "ch-gva-2",
 *     name: "my-sks-cluster",
 * });
 * const mySksNodepool = new exoscale.SksNodepool("my_sks_nodepool", {
 *     clusterId: mySksCluster.id,
 *     zone: mySksCluster.zone,
 *     name: "my-sks-nodepool",
 *     instanceType: "standard.medium",
 *     size: 3,
 * });
 * ```
 *
 * Please refer to the examples
 * directory for complete configuration examples.
 *
 * ## Import
 *
 * An existing SKS node pool may be imported by `<cluster-ID>/<nodepool-ID>@<zone>`:
 *
 * ```sh
 * $ pulumi import exoscale:index/sksNodepool:SksNodepool \ 
 * ```
 *
 *   exoscale_sks_nodepool.my_sks_nodepool \
 *
 *   f81d4fae-7dec-11d0-a765-00a0c91e6bf6/9ecc6b8b-73d4-4211-8ced-f7f29bb79524@ch-gva-2
 */
export class SksNodepool extends pulumi.CustomResource {
    /**
     * Get an existing SksNodepool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SksNodepoolState, opts?: pulumi.CustomResourceOptions): SksNodepool {
        return new SksNodepool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'exoscale:index/sksNodepool:SksNodepool';

    /**
     * Returns true if the given object is an instance of SksNodepool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SksNodepool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SksNodepool.__pulumiType;
    }

    /**
     * A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
     */
    declare public readonly antiAffinityGroupIds: pulumi.Output<string[] | undefined>;
    /**
     * ❗ The parent exoscale*sks*cluster ID.
     */
    declare public readonly clusterId: pulumi.Output<string>;
    /**
     * The pool creation date.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * A deploy target ID.
     */
    declare public readonly deployTargetId: pulumi.Output<string | undefined>;
    /**
     * A free-form text describing the pool.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The managed instances disk size (GiB; default: `50`).
     */
    declare public readonly diskSize: pulumi.Output<number | undefined>;
    /**
     * The underlying exoscale*instance*pool ID.
     */
    declare public /*out*/ readonly instancePoolId: pulumi.Output<string>;
    /**
     * The string used to prefix the managed instances name (default `pool`).
     */
    declare public readonly instancePrefix: pulumi.Output<string | undefined>;
    /**
     * The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
     */
    declare public readonly instanceType: pulumi.Output<string>;
    /**
     * Enable IPV6 for the nodepool nodes
     */
    declare public readonly ipv6: pulumi.Output<boolean | undefined>;
    /**
     * Configuration for this nodepool's kubelet image garbage collector
     */
    declare public readonly kubeletImageGcs: pulumi.Output<outputs.SksNodepoolKubeletImageGc[] | undefined>;
    /**
     * A map of key/value labels.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The SKS node pool name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A list of exoscale*private*network (IDs) to be attached to the managed instances.
     */
    declare public readonly privateNetworkIds: pulumi.Output<string[] | undefined>;
    /**
     * A list of exoscale*security*group (IDs) to be attached to the managed instances.
     */
    declare public readonly securityGroupIds: pulumi.Output<string[] | undefined>;
    declare public readonly size: pulumi.Output<number>;
    /**
     * The current pool state.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * Create nodes with non-standard partitioning for persistent storage (requires min 100G of disk space) (may only be set at creation time).
     */
    declare public readonly storageLvm: pulumi.Output<boolean | undefined>;
    /**
     * A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) ('taints = { \n\n = "\n\n:\n\n" }').
     */
    declare public readonly taints: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The managed instances template ID.
     */
    declare public /*out*/ readonly templateId: pulumi.Output<string>;
    /**
     * The managed instances version.
     */
    declare public /*out*/ readonly version: pulumi.Output<string>;
    /**
     * ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
     */
    declare public readonly zone: pulumi.Output<string>;

    /**
     * Create a SksNodepool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SksNodepoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SksNodepoolArgs | SksNodepoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SksNodepoolState | undefined;
            resourceInputs["antiAffinityGroupIds"] = state?.antiAffinityGroupIds;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["deployTargetId"] = state?.deployTargetId;
            resourceInputs["description"] = state?.description;
            resourceInputs["diskSize"] = state?.diskSize;
            resourceInputs["instancePoolId"] = state?.instancePoolId;
            resourceInputs["instancePrefix"] = state?.instancePrefix;
            resourceInputs["instanceType"] = state?.instanceType;
            resourceInputs["ipv6"] = state?.ipv6;
            resourceInputs["kubeletImageGcs"] = state?.kubeletImageGcs;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["privateNetworkIds"] = state?.privateNetworkIds;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["size"] = state?.size;
            resourceInputs["state"] = state?.state;
            resourceInputs["storageLvm"] = state?.storageLvm;
            resourceInputs["taints"] = state?.taints;
            resourceInputs["templateId"] = state?.templateId;
            resourceInputs["version"] = state?.version;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as SksNodepoolArgs | undefined;
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (args?.instanceType === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            if (args?.size === undefined && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if (args?.zone === undefined && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["antiAffinityGroupIds"] = args?.antiAffinityGroupIds;
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["deployTargetId"] = args?.deployTargetId;
            resourceInputs["description"] = args?.description;
            resourceInputs["diskSize"] = args?.diskSize;
            resourceInputs["instancePrefix"] = args?.instancePrefix;
            resourceInputs["instanceType"] = args?.instanceType;
            resourceInputs["ipv6"] = args?.ipv6;
            resourceInputs["kubeletImageGcs"] = args?.kubeletImageGcs;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["privateNetworkIds"] = args?.privateNetworkIds;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["size"] = args?.size;
            resourceInputs["storageLvm"] = args?.storageLvm;
            resourceInputs["taints"] = args?.taints;
            resourceInputs["zone"] = args?.zone;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["instancePoolId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["templateId"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SksNodepool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SksNodepool resources.
 */
export interface SksNodepoolState {
    /**
     * A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
     */
    antiAffinityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ❗ The parent exoscale*sks*cluster ID.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The pool creation date.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * A deploy target ID.
     */
    deployTargetId?: pulumi.Input<string>;
    /**
     * A free-form text describing the pool.
     */
    description?: pulumi.Input<string>;
    /**
     * The managed instances disk size (GiB; default: `50`).
     */
    diskSize?: pulumi.Input<number>;
    /**
     * The underlying exoscale*instance*pool ID.
     */
    instancePoolId?: pulumi.Input<string>;
    /**
     * The string used to prefix the managed instances name (default `pool`).
     */
    instancePrefix?: pulumi.Input<string>;
    /**
     * The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
     */
    instanceType?: pulumi.Input<string>;
    /**
     * Enable IPV6 for the nodepool nodes
     */
    ipv6?: pulumi.Input<boolean>;
    /**
     * Configuration for this nodepool's kubelet image garbage collector
     */
    kubeletImageGcs?: pulumi.Input<pulumi.Input<inputs.SksNodepoolKubeletImageGc>[]>;
    /**
     * A map of key/value labels.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The SKS node pool name.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of exoscale*private*network (IDs) to be attached to the managed instances.
     */
    privateNetworkIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of exoscale*security*group (IDs) to be attached to the managed instances.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    size?: pulumi.Input<number>;
    /**
     * The current pool state.
     */
    state?: pulumi.Input<string>;
    /**
     * Create nodes with non-standard partitioning for persistent storage (requires min 100G of disk space) (may only be set at creation time).
     */
    storageLvm?: pulumi.Input<boolean>;
    /**
     * A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) ('taints = { \n\n = "\n\n:\n\n" }').
     */
    taints?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The managed instances template ID.
     */
    templateId?: pulumi.Input<string>;
    /**
     * The managed instances version.
     */
    version?: pulumi.Input<string>;
    /**
     * ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SksNodepool resource.
 */
export interface SksNodepoolArgs {
    /**
     * A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
     */
    antiAffinityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ❗ The parent exoscale*sks*cluster ID.
     */
    clusterId: pulumi.Input<string>;
    /**
     * A deploy target ID.
     */
    deployTargetId?: pulumi.Input<string>;
    /**
     * A free-form text describing the pool.
     */
    description?: pulumi.Input<string>;
    /**
     * The managed instances disk size (GiB; default: `50`).
     */
    diskSize?: pulumi.Input<number>;
    /**
     * The string used to prefix the managed instances name (default `pool`).
     */
    instancePrefix?: pulumi.Input<string>;
    /**
     * The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
     */
    instanceType: pulumi.Input<string>;
    /**
     * Enable IPV6 for the nodepool nodes
     */
    ipv6?: pulumi.Input<boolean>;
    /**
     * Configuration for this nodepool's kubelet image garbage collector
     */
    kubeletImageGcs?: pulumi.Input<pulumi.Input<inputs.SksNodepoolKubeletImageGc>[]>;
    /**
     * A map of key/value labels.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The SKS node pool name.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of exoscale*private*network (IDs) to be attached to the managed instances.
     */
    privateNetworkIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of exoscale*security*group (IDs) to be attached to the managed instances.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    size: pulumi.Input<number>;
    /**
     * Create nodes with non-standard partitioning for persistent storage (requires min 100G of disk space) (may only be set at creation time).
     */
    storageLvm?: pulumi.Input<boolean>;
    /**
     * A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) ('taints = { \n\n = "\n\n:\n\n" }').
     */
    taints?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
     */
    zone: pulumi.Input<string>;
}
