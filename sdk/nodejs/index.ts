// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AntiAffinityGroupArgs, AntiAffinityGroupState } from "./antiAffinityGroup";
export type AntiAffinityGroup = import("./antiAffinityGroup").AntiAffinityGroup;
export const AntiAffinityGroup: typeof import("./antiAffinityGroup").AntiAffinityGroup = null as any;
utilities.lazyLoad(exports, ["AntiAffinityGroup"], () => require("./antiAffinityGroup"));

export { BlockStorageVolumeArgs, BlockStorageVolumeState } from "./blockStorageVolume";
export type BlockStorageVolume = import("./blockStorageVolume").BlockStorageVolume;
export const BlockStorageVolume: typeof import("./blockStorageVolume").BlockStorageVolume = null as any;
utilities.lazyLoad(exports, ["BlockStorageVolume"], () => require("./blockStorageVolume"));

export { BlockStorageVolumeSnapshotArgs, BlockStorageVolumeSnapshotState } from "./blockStorageVolumeSnapshot";
export type BlockStorageVolumeSnapshot = import("./blockStorageVolumeSnapshot").BlockStorageVolumeSnapshot;
export const BlockStorageVolumeSnapshot: typeof import("./blockStorageVolumeSnapshot").BlockStorageVolumeSnapshot = null as any;
utilities.lazyLoad(exports, ["BlockStorageVolumeSnapshot"], () => require("./blockStorageVolumeSnapshot"));

export { ComputeInstanceArgs, ComputeInstanceState } from "./computeInstance";
export type ComputeInstance = import("./computeInstance").ComputeInstance;
export const ComputeInstance: typeof import("./computeInstance").ComputeInstance = null as any;
utilities.lazyLoad(exports, ["ComputeInstance"], () => require("./computeInstance"));

export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { DbaasArgs, DbaasState } from "./dbaas";
export type Dbaas = import("./dbaas").Dbaas;
export const Dbaas: typeof import("./dbaas").Dbaas = null as any;
utilities.lazyLoad(exports, ["Dbaas"], () => require("./dbaas"));

export { DbaasKafkaUserArgs, DbaasKafkaUserState } from "./dbaasKafkaUser";
export type DbaasKafkaUser = import("./dbaasKafkaUser").DbaasKafkaUser;
export const DbaasKafkaUser: typeof import("./dbaasKafkaUser").DbaasKafkaUser = null as any;
utilities.lazyLoad(exports, ["DbaasKafkaUser"], () => require("./dbaasKafkaUser"));

export { DbaasMysqlDatabaseArgs, DbaasMysqlDatabaseState } from "./dbaasMysqlDatabase";
export type DbaasMysqlDatabase = import("./dbaasMysqlDatabase").DbaasMysqlDatabase;
export const DbaasMysqlDatabase: typeof import("./dbaasMysqlDatabase").DbaasMysqlDatabase = null as any;
utilities.lazyLoad(exports, ["DbaasMysqlDatabase"], () => require("./dbaasMysqlDatabase"));

export { DbaasMysqlUserArgs, DbaasMysqlUserState } from "./dbaasMysqlUser";
export type DbaasMysqlUser = import("./dbaasMysqlUser").DbaasMysqlUser;
export const DbaasMysqlUser: typeof import("./dbaasMysqlUser").DbaasMysqlUser = null as any;
utilities.lazyLoad(exports, ["DbaasMysqlUser"], () => require("./dbaasMysqlUser"));

export { DbaasOpensearchUserArgs, DbaasOpensearchUserState } from "./dbaasOpensearchUser";
export type DbaasOpensearchUser = import("./dbaasOpensearchUser").DbaasOpensearchUser;
export const DbaasOpensearchUser: typeof import("./dbaasOpensearchUser").DbaasOpensearchUser = null as any;
utilities.lazyLoad(exports, ["DbaasOpensearchUser"], () => require("./dbaasOpensearchUser"));

export { DbaasPgDatabaseArgs, DbaasPgDatabaseState } from "./dbaasPgDatabase";
export type DbaasPgDatabase = import("./dbaasPgDatabase").DbaasPgDatabase;
export const DbaasPgDatabase: typeof import("./dbaasPgDatabase").DbaasPgDatabase = null as any;
utilities.lazyLoad(exports, ["DbaasPgDatabase"], () => require("./dbaasPgDatabase"));

export { DbaasPgUserArgs, DbaasPgUserState } from "./dbaasPgUser";
export type DbaasPgUser = import("./dbaasPgUser").DbaasPgUser;
export const DbaasPgUser: typeof import("./dbaasPgUser").DbaasPgUser = null as any;
utilities.lazyLoad(exports, ["DbaasPgUser"], () => require("./dbaasPgUser"));

export { DomainArgs, DomainState } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));

export { DomainRecordArgs, DomainRecordState } from "./domainRecord";
export type DomainRecord = import("./domainRecord").DomainRecord;
export const DomainRecord: typeof import("./domainRecord").DomainRecord = null as any;
utilities.lazyLoad(exports, ["DomainRecord"], () => require("./domainRecord"));

export { ElasticIpArgs, ElasticIpState } from "./elasticIp";
export type ElasticIp = import("./elasticIp").ElasticIp;
export const ElasticIp: typeof import("./elasticIp").ElasticIp = null as any;
utilities.lazyLoad(exports, ["ElasticIp"], () => require("./elasticIp"));

export { GetAntiAffinityGroupArgs, GetAntiAffinityGroupResult, GetAntiAffinityGroupOutputArgs } from "./getAntiAffinityGroup";
export const getAntiAffinityGroup: typeof import("./getAntiAffinityGroup").getAntiAffinityGroup = null as any;
export const getAntiAffinityGroupOutput: typeof import("./getAntiAffinityGroup").getAntiAffinityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getAntiAffinityGroup","getAntiAffinityGroupOutput"], () => require("./getAntiAffinityGroup"));

export { GetBlockStorageVolumeArgs, GetBlockStorageVolumeResult, GetBlockStorageVolumeOutputArgs } from "./getBlockStorageVolume";
export const getBlockStorageVolume: typeof import("./getBlockStorageVolume").getBlockStorageVolume = null as any;
export const getBlockStorageVolumeOutput: typeof import("./getBlockStorageVolume").getBlockStorageVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getBlockStorageVolume","getBlockStorageVolumeOutput"], () => require("./getBlockStorageVolume"));

export { GetBlockStorageVolumeSnapshotArgs, GetBlockStorageVolumeSnapshotResult, GetBlockStorageVolumeSnapshotOutputArgs } from "./getBlockStorageVolumeSnapshot";
export const getBlockStorageVolumeSnapshot: typeof import("./getBlockStorageVolumeSnapshot").getBlockStorageVolumeSnapshot = null as any;
export const getBlockStorageVolumeSnapshotOutput: typeof import("./getBlockStorageVolumeSnapshot").getBlockStorageVolumeSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getBlockStorageVolumeSnapshot","getBlockStorageVolumeSnapshotOutput"], () => require("./getBlockStorageVolumeSnapshot"));

export { GetComputeInstanceArgs, GetComputeInstanceResult, GetComputeInstanceOutputArgs } from "./getComputeInstance";
export const getComputeInstance: typeof import("./getComputeInstance").getComputeInstance = null as any;
export const getComputeInstanceOutput: typeof import("./getComputeInstance").getComputeInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getComputeInstance","getComputeInstanceOutput"], () => require("./getComputeInstance"));

export { GetComputeInstanceListArgs, GetComputeInstanceListResult, GetComputeInstanceListOutputArgs } from "./getComputeInstanceList";
export const getComputeInstanceList: typeof import("./getComputeInstanceList").getComputeInstanceList = null as any;
export const getComputeInstanceListOutput: typeof import("./getComputeInstanceList").getComputeInstanceListOutput = null as any;
utilities.lazyLoad(exports, ["getComputeInstanceList","getComputeInstanceListOutput"], () => require("./getComputeInstanceList"));

export { GetDatabaseUriArgs, GetDatabaseUriResult, GetDatabaseUriOutputArgs } from "./getDatabaseUri";
export const getDatabaseUri: typeof import("./getDatabaseUri").getDatabaseUri = null as any;
export const getDatabaseUriOutput: typeof import("./getDatabaseUri").getDatabaseUriOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseUri","getDatabaseUriOutput"], () => require("./getDatabaseUri"));

export { GetDomainArgs, GetDomainResult, GetDomainOutputArgs } from "./getDomain";
export const getDomain: typeof import("./getDomain").getDomain = null as any;
export const getDomainOutput: typeof import("./getDomain").getDomainOutput = null as any;
utilities.lazyLoad(exports, ["getDomain","getDomainOutput"], () => require("./getDomain"));

export { GetDomainRecordArgs, GetDomainRecordResult, GetDomainRecordOutputArgs } from "./getDomainRecord";
export const getDomainRecord: typeof import("./getDomainRecord").getDomainRecord = null as any;
export const getDomainRecordOutput: typeof import("./getDomainRecord").getDomainRecordOutput = null as any;
utilities.lazyLoad(exports, ["getDomainRecord","getDomainRecordOutput"], () => require("./getDomainRecord"));

export { GetElasticIpArgs, GetElasticIpResult, GetElasticIpOutputArgs } from "./getElasticIp";
export const getElasticIp: typeof import("./getElasticIp").getElasticIp = null as any;
export const getElasticIpOutput: typeof import("./getElasticIp").getElasticIpOutput = null as any;
utilities.lazyLoad(exports, ["getElasticIp","getElasticIpOutput"], () => require("./getElasticIp"));

export { GetIamApiKeyArgs, GetIamApiKeyResult, GetIamApiKeyOutputArgs } from "./getIamApiKey";
export const getIamApiKey: typeof import("./getIamApiKey").getIamApiKey = null as any;
export const getIamApiKeyOutput: typeof import("./getIamApiKey").getIamApiKeyOutput = null as any;
utilities.lazyLoad(exports, ["getIamApiKey","getIamApiKeyOutput"], () => require("./getIamApiKey"));

export { GetIamOrgPolicyArgs, GetIamOrgPolicyResult, GetIamOrgPolicyOutputArgs } from "./getIamOrgPolicy";
export const getIamOrgPolicy: typeof import("./getIamOrgPolicy").getIamOrgPolicy = null as any;
export const getIamOrgPolicyOutput: typeof import("./getIamOrgPolicy").getIamOrgPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIamOrgPolicy","getIamOrgPolicyOutput"], () => require("./getIamOrgPolicy"));

export { GetIamRoleArgs, GetIamRoleResult, GetIamRoleOutputArgs } from "./getIamRole";
export const getIamRole: typeof import("./getIamRole").getIamRole = null as any;
export const getIamRoleOutput: typeof import("./getIamRole").getIamRoleOutput = null as any;
utilities.lazyLoad(exports, ["getIamRole","getIamRoleOutput"], () => require("./getIamRole"));

export { GetInstancePoolArgs, GetInstancePoolResult, GetInstancePoolOutputArgs } from "./getInstancePool";
export const getInstancePool: typeof import("./getInstancePool").getInstancePool = null as any;
export const getInstancePoolOutput: typeof import("./getInstancePool").getInstancePoolOutput = null as any;
utilities.lazyLoad(exports, ["getInstancePool","getInstancePoolOutput"], () => require("./getInstancePool"));

export { GetInstancePoolListArgs, GetInstancePoolListResult, GetInstancePoolListOutputArgs } from "./getInstancePoolList";
export const getInstancePoolList: typeof import("./getInstancePoolList").getInstancePoolList = null as any;
export const getInstancePoolListOutput: typeof import("./getInstancePoolList").getInstancePoolListOutput = null as any;
utilities.lazyLoad(exports, ["getInstancePoolList","getInstancePoolListOutput"], () => require("./getInstancePoolList"));

export { GetNlbArgs, GetNlbResult, GetNlbOutputArgs } from "./getNlb";
export const getNlb: typeof import("./getNlb").getNlb = null as any;
export const getNlbOutput: typeof import("./getNlb").getNlbOutput = null as any;
utilities.lazyLoad(exports, ["getNlb","getNlbOutput"], () => require("./getNlb"));

export { GetNlbServiceListArgs, GetNlbServiceListResult, GetNlbServiceListOutputArgs } from "./getNlbServiceList";
export const getNlbServiceList: typeof import("./getNlbServiceList").getNlbServiceList = null as any;
export const getNlbServiceListOutput: typeof import("./getNlbServiceList").getNlbServiceListOutput = null as any;
utilities.lazyLoad(exports, ["getNlbServiceList","getNlbServiceListOutput"], () => require("./getNlbServiceList"));

export { GetPrivateNetworkArgs, GetPrivateNetworkResult, GetPrivateNetworkOutputArgs } from "./getPrivateNetwork";
export const getPrivateNetwork: typeof import("./getPrivateNetwork").getPrivateNetwork = null as any;
export const getPrivateNetworkOutput: typeof import("./getPrivateNetwork").getPrivateNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateNetwork","getPrivateNetworkOutput"], () => require("./getPrivateNetwork"));

export { GetSecurityGroupArgs, GetSecurityGroupResult, GetSecurityGroupOutputArgs } from "./getSecurityGroup";
export const getSecurityGroup: typeof import("./getSecurityGroup").getSecurityGroup = null as any;
export const getSecurityGroupOutput: typeof import("./getSecurityGroup").getSecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroup","getSecurityGroupOutput"], () => require("./getSecurityGroup"));

export { GetSksClusterArgs, GetSksClusterResult, GetSksClusterOutputArgs } from "./getSksCluster";
export const getSksCluster: typeof import("./getSksCluster").getSksCluster = null as any;
export const getSksClusterOutput: typeof import("./getSksCluster").getSksClusterOutput = null as any;
utilities.lazyLoad(exports, ["getSksCluster","getSksClusterOutput"], () => require("./getSksCluster"));

export { GetSksClusterListArgs, GetSksClusterListResult, GetSksClusterListOutputArgs } from "./getSksClusterList";
export const getSksClusterList: typeof import("./getSksClusterList").getSksClusterList = null as any;
export const getSksClusterListOutput: typeof import("./getSksClusterList").getSksClusterListOutput = null as any;
utilities.lazyLoad(exports, ["getSksClusterList","getSksClusterListOutput"], () => require("./getSksClusterList"));

export { GetSksNodepoolArgs, GetSksNodepoolResult, GetSksNodepoolOutputArgs } from "./getSksNodepool";
export const getSksNodepool: typeof import("./getSksNodepool").getSksNodepool = null as any;
export const getSksNodepoolOutput: typeof import("./getSksNodepool").getSksNodepoolOutput = null as any;
utilities.lazyLoad(exports, ["getSksNodepool","getSksNodepoolOutput"], () => require("./getSksNodepool"));

export { GetSksNodepoolListArgs, GetSksNodepoolListResult, GetSksNodepoolListOutputArgs } from "./getSksNodepoolList";
export const getSksNodepoolList: typeof import("./getSksNodepoolList").getSksNodepoolList = null as any;
export const getSksNodepoolListOutput: typeof import("./getSksNodepoolList").getSksNodepoolListOutput = null as any;
utilities.lazyLoad(exports, ["getSksNodepoolList","getSksNodepoolListOutput"], () => require("./getSksNodepoolList"));

export { GetSosBucketPolicyArgs, GetSosBucketPolicyResult, GetSosBucketPolicyOutputArgs } from "./getSosBucketPolicy";
export const getSosBucketPolicy: typeof import("./getSosBucketPolicy").getSosBucketPolicy = null as any;
export const getSosBucketPolicyOutput: typeof import("./getSosBucketPolicy").getSosBucketPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSosBucketPolicy","getSosBucketPolicyOutput"], () => require("./getSosBucketPolicy"));

export { GetTemplateArgs, GetTemplateResult, GetTemplateOutputArgs } from "./getTemplate";
export const getTemplate: typeof import("./getTemplate").getTemplate = null as any;
export const getTemplateOutput: typeof import("./getTemplate").getTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getTemplate","getTemplateOutput"], () => require("./getTemplate"));

export { GetZonesResult } from "./getZones";
export const getZones: typeof import("./getZones").getZones = null as any;
export const getZonesOutput: typeof import("./getZones").getZonesOutput = null as any;
utilities.lazyLoad(exports, ["getZones","getZonesOutput"], () => require("./getZones"));

export { IamAccessKeyArgs, IamAccessKeyState } from "./iamAccessKey";
export type IamAccessKey = import("./iamAccessKey").IamAccessKey;
export const IamAccessKey: typeof import("./iamAccessKey").IamAccessKey = null as any;
utilities.lazyLoad(exports, ["IamAccessKey"], () => require("./iamAccessKey"));

export { IamApiKeyArgs, IamApiKeyState } from "./iamApiKey";
export type IamApiKey = import("./iamApiKey").IamApiKey;
export const IamApiKey: typeof import("./iamApiKey").IamApiKey = null as any;
utilities.lazyLoad(exports, ["IamApiKey"], () => require("./iamApiKey"));

export { IamOrgPolicyArgs, IamOrgPolicyState } from "./iamOrgPolicy";
export type IamOrgPolicy = import("./iamOrgPolicy").IamOrgPolicy;
export const IamOrgPolicy: typeof import("./iamOrgPolicy").IamOrgPolicy = null as any;
utilities.lazyLoad(exports, ["IamOrgPolicy"], () => require("./iamOrgPolicy"));

export { IamRoleArgs, IamRoleState } from "./iamRole";
export type IamRole = import("./iamRole").IamRole;
export const IamRole: typeof import("./iamRole").IamRole = null as any;
utilities.lazyLoad(exports, ["IamRole"], () => require("./iamRole"));

export { InstancePoolArgs, InstancePoolState } from "./instancePool";
export type InstancePool = import("./instancePool").InstancePool;
export const InstancePool: typeof import("./instancePool").InstancePool = null as any;
utilities.lazyLoad(exports, ["InstancePool"], () => require("./instancePool"));

export { NlbArgs, NlbState } from "./nlb";
export type Nlb = import("./nlb").Nlb;
export const Nlb: typeof import("./nlb").Nlb = null as any;
utilities.lazyLoad(exports, ["Nlb"], () => require("./nlb"));

export { NlbServiceArgs, NlbServiceState } from "./nlbService";
export type NlbService = import("./nlbService").NlbService;
export const NlbService: typeof import("./nlbService").NlbService = null as any;
utilities.lazyLoad(exports, ["NlbService"], () => require("./nlbService"));

export { PrivateNetworkArgs, PrivateNetworkState } from "./privateNetwork";
export type PrivateNetwork = import("./privateNetwork").PrivateNetwork;
export const PrivateNetwork: typeof import("./privateNetwork").PrivateNetwork = null as any;
utilities.lazyLoad(exports, ["PrivateNetwork"], () => require("./privateNetwork"));

export * from "./provider";
import { Provider } from "./provider";

export { SecurityGroupArgs, SecurityGroupState } from "./securityGroup";
export type SecurityGroup = import("./securityGroup").SecurityGroup;
export const SecurityGroup: typeof import("./securityGroup").SecurityGroup = null as any;
utilities.lazyLoad(exports, ["SecurityGroup"], () => require("./securityGroup"));

export { SecurityGroupRuleArgs, SecurityGroupRuleState } from "./securityGroupRule";
export type SecurityGroupRule = import("./securityGroupRule").SecurityGroupRule;
export const SecurityGroupRule: typeof import("./securityGroupRule").SecurityGroupRule = null as any;
utilities.lazyLoad(exports, ["SecurityGroupRule"], () => require("./securityGroupRule"));

export { SksClusterArgs, SksClusterState } from "./sksCluster";
export type SksCluster = import("./sksCluster").SksCluster;
export const SksCluster: typeof import("./sksCluster").SksCluster = null as any;
utilities.lazyLoad(exports, ["SksCluster"], () => require("./sksCluster"));

export { SksKubeconfigArgs, SksKubeconfigState } from "./sksKubeconfig";
export type SksKubeconfig = import("./sksKubeconfig").SksKubeconfig;
export const SksKubeconfig: typeof import("./sksKubeconfig").SksKubeconfig = null as any;
utilities.lazyLoad(exports, ["SksKubeconfig"], () => require("./sksKubeconfig"));

export { SksNodepoolArgs, SksNodepoolState } from "./sksNodepool";
export type SksNodepool = import("./sksNodepool").SksNodepool;
export const SksNodepool: typeof import("./sksNodepool").SksNodepool = null as any;
utilities.lazyLoad(exports, ["SksNodepool"], () => require("./sksNodepool"));

export { SosBucketPolicyArgs, SosBucketPolicyState } from "./sosBucketPolicy";
export type SosBucketPolicy = import("./sosBucketPolicy").SosBucketPolicy;
export const SosBucketPolicy: typeof import("./sosBucketPolicy").SosBucketPolicy = null as any;
utilities.lazyLoad(exports, ["SosBucketPolicy"], () => require("./sosBucketPolicy"));

export { SshKeyArgs, SshKeyState } from "./sshKey";
export type SshKey = import("./sshKey").SshKey;
export const SshKey: typeof import("./sshKey").SshKey = null as any;
utilities.lazyLoad(exports, ["SshKey"], () => require("./sshKey"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "exoscale:index/antiAffinityGroup:AntiAffinityGroup":
                return new AntiAffinityGroup(name, <any>undefined, { urn })
            case "exoscale:index/blockStorageVolume:BlockStorageVolume":
                return new BlockStorageVolume(name, <any>undefined, { urn })
            case "exoscale:index/blockStorageVolumeSnapshot:BlockStorageVolumeSnapshot":
                return new BlockStorageVolumeSnapshot(name, <any>undefined, { urn })
            case "exoscale:index/computeInstance:ComputeInstance":
                return new ComputeInstance(name, <any>undefined, { urn })
            case "exoscale:index/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "exoscale:index/dbaas:Dbaas":
                return new Dbaas(name, <any>undefined, { urn })
            case "exoscale:index/dbaasKafkaUser:DbaasKafkaUser":
                return new DbaasKafkaUser(name, <any>undefined, { urn })
            case "exoscale:index/dbaasMysqlDatabase:DbaasMysqlDatabase":
                return new DbaasMysqlDatabase(name, <any>undefined, { urn })
            case "exoscale:index/dbaasMysqlUser:DbaasMysqlUser":
                return new DbaasMysqlUser(name, <any>undefined, { urn })
            case "exoscale:index/dbaasOpensearchUser:DbaasOpensearchUser":
                return new DbaasOpensearchUser(name, <any>undefined, { urn })
            case "exoscale:index/dbaasPgDatabase:DbaasPgDatabase":
                return new DbaasPgDatabase(name, <any>undefined, { urn })
            case "exoscale:index/dbaasPgUser:DbaasPgUser":
                return new DbaasPgUser(name, <any>undefined, { urn })
            case "exoscale:index/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "exoscale:index/domainRecord:DomainRecord":
                return new DomainRecord(name, <any>undefined, { urn })
            case "exoscale:index/elasticIp:ElasticIp":
                return new ElasticIp(name, <any>undefined, { urn })
            case "exoscale:index/iamAccessKey:IamAccessKey":
                return new IamAccessKey(name, <any>undefined, { urn })
            case "exoscale:index/iamApiKey:IamApiKey":
                return new IamApiKey(name, <any>undefined, { urn })
            case "exoscale:index/iamOrgPolicy:IamOrgPolicy":
                return new IamOrgPolicy(name, <any>undefined, { urn })
            case "exoscale:index/iamRole:IamRole":
                return new IamRole(name, <any>undefined, { urn })
            case "exoscale:index/instancePool:InstancePool":
                return new InstancePool(name, <any>undefined, { urn })
            case "exoscale:index/nlb:Nlb":
                return new Nlb(name, <any>undefined, { urn })
            case "exoscale:index/nlbService:NlbService":
                return new NlbService(name, <any>undefined, { urn })
            case "exoscale:index/privateNetwork:PrivateNetwork":
                return new PrivateNetwork(name, <any>undefined, { urn })
            case "exoscale:index/securityGroup:SecurityGroup":
                return new SecurityGroup(name, <any>undefined, { urn })
            case "exoscale:index/securityGroupRule:SecurityGroupRule":
                return new SecurityGroupRule(name, <any>undefined, { urn })
            case "exoscale:index/sksCluster:SksCluster":
                return new SksCluster(name, <any>undefined, { urn })
            case "exoscale:index/sksKubeconfig:SksKubeconfig":
                return new SksKubeconfig(name, <any>undefined, { urn })
            case "exoscale:index/sksNodepool:SksNodepool":
                return new SksNodepool(name, <any>undefined, { urn })
            case "exoscale:index/sosBucketPolicy:SosBucketPolicy":
                return new SosBucketPolicy(name, <any>undefined, { urn })
            case "exoscale:index/sshKey:SshKey":
                return new SshKey(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("exoscale", "index/antiAffinityGroup", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/blockStorageVolume", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/blockStorageVolumeSnapshot", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/computeInstance", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/database", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/dbaas", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/dbaasKafkaUser", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/dbaasMysqlDatabase", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/dbaasMysqlUser", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/dbaasOpensearchUser", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/dbaasPgDatabase", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/dbaasPgUser", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/domain", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/domainRecord", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/elasticIp", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/iamAccessKey", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/iamApiKey", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/iamOrgPolicy", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/iamRole", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/instancePool", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/nlb", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/nlbService", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/privateNetwork", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/securityGroup", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/securityGroupRule", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/sksCluster", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/sksKubeconfig", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/sksNodepool", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/sosBucketPolicy", _module)
pulumi.runtime.registerResourceModule("exoscale", "index/sshKey", _module)
pulumi.runtime.registerResourcePackage("exoscale", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:exoscale") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
