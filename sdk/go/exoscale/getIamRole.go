// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

// Fetch Exoscale [IAM](https://community.exoscale.com/documentation/iam/) Role.
//
// Corresponding resource: exoscale_iam_role.
func LookupIamRole(ctx *pulumi.Context, args *LookupIamRoleArgs, opts ...pulumi.InvokeOption) (*LookupIamRoleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIamRoleResult
	err := ctx.Invoke("exoscale:index/getIamRole:getIamRole", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIamRole.
type LookupIamRoleArgs struct {
	// The role ID to match (conflicts with `name`).
	Id *string `pulumi:"id"`
	// the role name to match (conflicts with `id`).
	Name     *string             `pulumi:"name"`
	Timeouts *GetIamRoleTimeouts `pulumi:"timeouts"`
}

// A collection of values returned by getIamRole.
type LookupIamRoleResult struct {
	// A free-form text describing the IAM Role
	Description string `pulumi:"description"`
	// Defines if IAM Role Policy is editable or not.
	Editable bool `pulumi:"editable"`
	// The role ID to match (conflicts with `name`).
	Id string `pulumi:"id"`
	// IAM Role labels.
	Labels map[string]string `pulumi:"labels"`
	// the role name to match (conflicts with `id`).
	Name string `pulumi:"name"`
	// IAM Role permissions.
	Permissions []string `pulumi:"permissions"`
	// IAM Policy.
	Policy   GetIamRolePolicy    `pulumi:"policy"`
	Timeouts *GetIamRoleTimeouts `pulumi:"timeouts"`
}

func LookupIamRoleOutput(ctx *pulumi.Context, args LookupIamRoleOutputArgs, opts ...pulumi.InvokeOption) LookupIamRoleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupIamRoleResultOutput, error) {
			args := v.(LookupIamRoleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("exoscale:index/getIamRole:getIamRole", args, LookupIamRoleResultOutput{}, options).(LookupIamRoleResultOutput), nil
		}).(LookupIamRoleResultOutput)
}

// A collection of arguments for invoking getIamRole.
type LookupIamRoleOutputArgs struct {
	// The role ID to match (conflicts with `name`).
	Id pulumi.StringPtrInput `pulumi:"id"`
	// the role name to match (conflicts with `id`).
	Name     pulumi.StringPtrInput      `pulumi:"name"`
	Timeouts GetIamRoleTimeoutsPtrInput `pulumi:"timeouts"`
}

func (LookupIamRoleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIamRoleArgs)(nil)).Elem()
}

// A collection of values returned by getIamRole.
type LookupIamRoleResultOutput struct{ *pulumi.OutputState }

func (LookupIamRoleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIamRoleResult)(nil)).Elem()
}

func (o LookupIamRoleResultOutput) ToLookupIamRoleResultOutput() LookupIamRoleResultOutput {
	return o
}

func (o LookupIamRoleResultOutput) ToLookupIamRoleResultOutputWithContext(ctx context.Context) LookupIamRoleResultOutput {
	return o
}

// A free-form text describing the IAM Role
func (o LookupIamRoleResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIamRoleResult) string { return v.Description }).(pulumi.StringOutput)
}

// Defines if IAM Role Policy is editable or not.
func (o LookupIamRoleResultOutput) Editable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupIamRoleResult) bool { return v.Editable }).(pulumi.BoolOutput)
}

// The role ID to match (conflicts with `name`).
func (o LookupIamRoleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIamRoleResult) string { return v.Id }).(pulumi.StringOutput)
}

// IAM Role labels.
func (o LookupIamRoleResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupIamRoleResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// the role name to match (conflicts with `id`).
func (o LookupIamRoleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIamRoleResult) string { return v.Name }).(pulumi.StringOutput)
}

// IAM Role permissions.
func (o LookupIamRoleResultOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupIamRoleResult) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

// IAM Policy.
func (o LookupIamRoleResultOutput) Policy() GetIamRolePolicyOutput {
	return o.ApplyT(func(v LookupIamRoleResult) GetIamRolePolicy { return v.Policy }).(GetIamRolePolicyOutput)
}

func (o LookupIamRoleResultOutput) Timeouts() GetIamRoleTimeoutsPtrOutput {
	return o.ApplyT(func(v LookupIamRoleResult) *GetIamRoleTimeouts { return v.Timeouts }).(GetIamRoleTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIamRoleResultOutput{})
}
