// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := exoscale.NewIamOrgPolicy(ctx, "org_policy", &exoscale.IamOrgPolicyArgs{
//				DefaultServiceStrategy: pulumi.String("allow"),
//				Services: exoscale.IamOrgPolicyServicesMap{
//					"sos": &exoscale.IamOrgPolicyServicesArgs{
//						Type: pulumi.String("deny"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Please refer to the examples
// directory for complete configuration examples.
type IamOrgPolicy struct {
	pulumi.CustomResourceState

	// Default service strategy (`allow` or `deny`).
	DefaultServiceStrategy pulumi.StringOutput `pulumi:"defaultServiceStrategy"`
	// IAM policy services.
	Services IamOrgPolicyServicesMapOutput `pulumi:"services"`
	Timeouts IamOrgPolicyTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewIamOrgPolicy registers a new resource with the given unique name, arguments, and options.
func NewIamOrgPolicy(ctx *pulumi.Context,
	name string, args *IamOrgPolicyArgs, opts ...pulumi.ResourceOption) (*IamOrgPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultServiceStrategy == nil {
		return nil, errors.New("invalid value for required argument 'DefaultServiceStrategy'")
	}
	if args.Services == nil {
		return nil, errors.New("invalid value for required argument 'Services'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IamOrgPolicy
	err := ctx.RegisterResource("exoscale:index/iamOrgPolicy:IamOrgPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamOrgPolicy gets an existing IamOrgPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamOrgPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamOrgPolicyState, opts ...pulumi.ResourceOption) (*IamOrgPolicy, error) {
	var resource IamOrgPolicy
	err := ctx.ReadResource("exoscale:index/iamOrgPolicy:IamOrgPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamOrgPolicy resources.
type iamOrgPolicyState struct {
	// Default service strategy (`allow` or `deny`).
	DefaultServiceStrategy *string `pulumi:"defaultServiceStrategy"`
	// IAM policy services.
	Services map[string]IamOrgPolicyServices `pulumi:"services"`
	Timeouts *IamOrgPolicyTimeouts           `pulumi:"timeouts"`
}

type IamOrgPolicyState struct {
	// Default service strategy (`allow` or `deny`).
	DefaultServiceStrategy pulumi.StringPtrInput
	// IAM policy services.
	Services IamOrgPolicyServicesMapInput
	Timeouts IamOrgPolicyTimeoutsPtrInput
}

func (IamOrgPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamOrgPolicyState)(nil)).Elem()
}

type iamOrgPolicyArgs struct {
	// Default service strategy (`allow` or `deny`).
	DefaultServiceStrategy string `pulumi:"defaultServiceStrategy"`
	// IAM policy services.
	Services map[string]IamOrgPolicyServices `pulumi:"services"`
	Timeouts *IamOrgPolicyTimeouts           `pulumi:"timeouts"`
}

// The set of arguments for constructing a IamOrgPolicy resource.
type IamOrgPolicyArgs struct {
	// Default service strategy (`allow` or `deny`).
	DefaultServiceStrategy pulumi.StringInput
	// IAM policy services.
	Services IamOrgPolicyServicesMapInput
	Timeouts IamOrgPolicyTimeoutsPtrInput
}

func (IamOrgPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamOrgPolicyArgs)(nil)).Elem()
}

type IamOrgPolicyInput interface {
	pulumi.Input

	ToIamOrgPolicyOutput() IamOrgPolicyOutput
	ToIamOrgPolicyOutputWithContext(ctx context.Context) IamOrgPolicyOutput
}

func (*IamOrgPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**IamOrgPolicy)(nil)).Elem()
}

func (i *IamOrgPolicy) ToIamOrgPolicyOutput() IamOrgPolicyOutput {
	return i.ToIamOrgPolicyOutputWithContext(context.Background())
}

func (i *IamOrgPolicy) ToIamOrgPolicyOutputWithContext(ctx context.Context) IamOrgPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamOrgPolicyOutput)
}

// IamOrgPolicyArrayInput is an input type that accepts IamOrgPolicyArray and IamOrgPolicyArrayOutput values.
// You can construct a concrete instance of `IamOrgPolicyArrayInput` via:
//
//	IamOrgPolicyArray{ IamOrgPolicyArgs{...} }
type IamOrgPolicyArrayInput interface {
	pulumi.Input

	ToIamOrgPolicyArrayOutput() IamOrgPolicyArrayOutput
	ToIamOrgPolicyArrayOutputWithContext(context.Context) IamOrgPolicyArrayOutput
}

type IamOrgPolicyArray []IamOrgPolicyInput

func (IamOrgPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamOrgPolicy)(nil)).Elem()
}

func (i IamOrgPolicyArray) ToIamOrgPolicyArrayOutput() IamOrgPolicyArrayOutput {
	return i.ToIamOrgPolicyArrayOutputWithContext(context.Background())
}

func (i IamOrgPolicyArray) ToIamOrgPolicyArrayOutputWithContext(ctx context.Context) IamOrgPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamOrgPolicyArrayOutput)
}

// IamOrgPolicyMapInput is an input type that accepts IamOrgPolicyMap and IamOrgPolicyMapOutput values.
// You can construct a concrete instance of `IamOrgPolicyMapInput` via:
//
//	IamOrgPolicyMap{ "key": IamOrgPolicyArgs{...} }
type IamOrgPolicyMapInput interface {
	pulumi.Input

	ToIamOrgPolicyMapOutput() IamOrgPolicyMapOutput
	ToIamOrgPolicyMapOutputWithContext(context.Context) IamOrgPolicyMapOutput
}

type IamOrgPolicyMap map[string]IamOrgPolicyInput

func (IamOrgPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamOrgPolicy)(nil)).Elem()
}

func (i IamOrgPolicyMap) ToIamOrgPolicyMapOutput() IamOrgPolicyMapOutput {
	return i.ToIamOrgPolicyMapOutputWithContext(context.Background())
}

func (i IamOrgPolicyMap) ToIamOrgPolicyMapOutputWithContext(ctx context.Context) IamOrgPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamOrgPolicyMapOutput)
}

type IamOrgPolicyOutput struct{ *pulumi.OutputState }

func (IamOrgPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamOrgPolicy)(nil)).Elem()
}

func (o IamOrgPolicyOutput) ToIamOrgPolicyOutput() IamOrgPolicyOutput {
	return o
}

func (o IamOrgPolicyOutput) ToIamOrgPolicyOutputWithContext(ctx context.Context) IamOrgPolicyOutput {
	return o
}

// Default service strategy (`allow` or `deny`).
func (o IamOrgPolicyOutput) DefaultServiceStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v *IamOrgPolicy) pulumi.StringOutput { return v.DefaultServiceStrategy }).(pulumi.StringOutput)
}

// IAM policy services.
func (o IamOrgPolicyOutput) Services() IamOrgPolicyServicesMapOutput {
	return o.ApplyT(func(v *IamOrgPolicy) IamOrgPolicyServicesMapOutput { return v.Services }).(IamOrgPolicyServicesMapOutput)
}

func (o IamOrgPolicyOutput) Timeouts() IamOrgPolicyTimeoutsPtrOutput {
	return o.ApplyT(func(v *IamOrgPolicy) IamOrgPolicyTimeoutsPtrOutput { return v.Timeouts }).(IamOrgPolicyTimeoutsPtrOutput)
}

type IamOrgPolicyArrayOutput struct{ *pulumi.OutputState }

func (IamOrgPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamOrgPolicy)(nil)).Elem()
}

func (o IamOrgPolicyArrayOutput) ToIamOrgPolicyArrayOutput() IamOrgPolicyArrayOutput {
	return o
}

func (o IamOrgPolicyArrayOutput) ToIamOrgPolicyArrayOutputWithContext(ctx context.Context) IamOrgPolicyArrayOutput {
	return o
}

func (o IamOrgPolicyArrayOutput) Index(i pulumi.IntInput) IamOrgPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IamOrgPolicy {
		return vs[0].([]*IamOrgPolicy)[vs[1].(int)]
	}).(IamOrgPolicyOutput)
}

type IamOrgPolicyMapOutput struct{ *pulumi.OutputState }

func (IamOrgPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamOrgPolicy)(nil)).Elem()
}

func (o IamOrgPolicyMapOutput) ToIamOrgPolicyMapOutput() IamOrgPolicyMapOutput {
	return o
}

func (o IamOrgPolicyMapOutput) ToIamOrgPolicyMapOutputWithContext(ctx context.Context) IamOrgPolicyMapOutput {
	return o
}

func (o IamOrgPolicyMapOutput) MapIndex(k pulumi.StringInput) IamOrgPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IamOrgPolicy {
		return vs[0].(map[string]*IamOrgPolicy)[vs[1].(string)]
	}).(IamOrgPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamOrgPolicyInput)(nil)).Elem(), &IamOrgPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamOrgPolicyArrayInput)(nil)).Elem(), IamOrgPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamOrgPolicyMapInput)(nil)).Elem(), IamOrgPolicyMap{})
	pulumi.RegisterOutputType(IamOrgPolicyOutput{})
	pulumi.RegisterOutputType(IamOrgPolicyArrayOutput{})
	pulumi.RegisterOutputType(IamOrgPolicyMapOutput{})
}
