// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

// Fetch Exoscale [IAM](https://community.exoscale.com/documentation/iam/) Organization Policy.
//
// Corresponding resource: exoscale_iam_org_policy.
func LookupIamOrgPolicy(ctx *pulumi.Context, args *LookupIamOrgPolicyArgs, opts ...pulumi.InvokeOption) (*LookupIamOrgPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIamOrgPolicyResult
	err := ctx.Invoke("exoscale:index/getIamOrgPolicy:getIamOrgPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIamOrgPolicy.
type LookupIamOrgPolicyArgs struct {
	Timeouts *GetIamOrgPolicyTimeouts `pulumi:"timeouts"`
}

// A collection of values returned by getIamOrgPolicy.
type LookupIamOrgPolicyResult struct {
	// Default service strategy (`allow` or `deny`).
	DefaultServiceStrategy string `pulumi:"defaultServiceStrategy"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// IAM policy services.
	Services map[string]GetIamOrgPolicyServices `pulumi:"services"`
	Timeouts *GetIamOrgPolicyTimeouts           `pulumi:"timeouts"`
}

func LookupIamOrgPolicyOutput(ctx *pulumi.Context, args LookupIamOrgPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupIamOrgPolicyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupIamOrgPolicyResultOutput, error) {
			args := v.(LookupIamOrgPolicyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("exoscale:index/getIamOrgPolicy:getIamOrgPolicy", args, LookupIamOrgPolicyResultOutput{}, options).(LookupIamOrgPolicyResultOutput), nil
		}).(LookupIamOrgPolicyResultOutput)
}

// A collection of arguments for invoking getIamOrgPolicy.
type LookupIamOrgPolicyOutputArgs struct {
	Timeouts GetIamOrgPolicyTimeoutsPtrInput `pulumi:"timeouts"`
}

func (LookupIamOrgPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIamOrgPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getIamOrgPolicy.
type LookupIamOrgPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupIamOrgPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIamOrgPolicyResult)(nil)).Elem()
}

func (o LookupIamOrgPolicyResultOutput) ToLookupIamOrgPolicyResultOutput() LookupIamOrgPolicyResultOutput {
	return o
}

func (o LookupIamOrgPolicyResultOutput) ToLookupIamOrgPolicyResultOutputWithContext(ctx context.Context) LookupIamOrgPolicyResultOutput {
	return o
}

// Default service strategy (`allow` or `deny`).
func (o LookupIamOrgPolicyResultOutput) DefaultServiceStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIamOrgPolicyResult) string { return v.DefaultServiceStrategy }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o LookupIamOrgPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIamOrgPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// IAM policy services.
func (o LookupIamOrgPolicyResultOutput) Services() GetIamOrgPolicyServicesMapOutput {
	return o.ApplyT(func(v LookupIamOrgPolicyResult) map[string]GetIamOrgPolicyServices { return v.Services }).(GetIamOrgPolicyServicesMapOutput)
}

func (o LookupIamOrgPolicyResultOutput) Timeouts() GetIamOrgPolicyTimeoutsPtrOutput {
	return o.ApplyT(func(v LookupIamOrgPolicyResult) *GetIamOrgPolicyTimeouts { return v.Timeouts }).(GetIamOrgPolicyTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIamOrgPolicyResultOutput{})
}
