// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

// Manage service users for an Opensearch Exoscale [Database Services (DBaaS)](https://community.exoscale.com/documentation/dbaas/).
type DbaasOpensearchUser struct {
	pulumi.CustomResourceState

	// The password of the service user.
	Password pulumi.StringOutput `pulumi:"password"`
	// ❗ The name of the database service.
	Service  pulumi.StringOutput                  `pulumi:"service"`
	Timeouts DbaasOpensearchUserTimeoutsPtrOutput `pulumi:"timeouts"`
	// The type of the service user.
	Type pulumi.StringOutput `pulumi:"type"`
	// ❗ The name of the user for this service.
	Username pulumi.StringOutput `pulumi:"username"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewDbaasOpensearchUser registers a new resource with the given unique name, arguments, and options.
func NewDbaasOpensearchUser(ctx *pulumi.Context,
	name string, args *DbaasOpensearchUserArgs, opts ...pulumi.ResourceOption) (*DbaasOpensearchUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DbaasOpensearchUser
	err := ctx.RegisterResource("exoscale:index/dbaasOpensearchUser:DbaasOpensearchUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbaasOpensearchUser gets an existing DbaasOpensearchUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbaasOpensearchUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbaasOpensearchUserState, opts ...pulumi.ResourceOption) (*DbaasOpensearchUser, error) {
	var resource DbaasOpensearchUser
	err := ctx.ReadResource("exoscale:index/dbaasOpensearchUser:DbaasOpensearchUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbaasOpensearchUser resources.
type dbaasOpensearchUserState struct {
	// The password of the service user.
	Password *string `pulumi:"password"`
	// ❗ The name of the database service.
	Service  *string                      `pulumi:"service"`
	Timeouts *DbaasOpensearchUserTimeouts `pulumi:"timeouts"`
	// The type of the service user.
	Type *string `pulumi:"type"`
	// ❗ The name of the user for this service.
	Username *string `pulumi:"username"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone *string `pulumi:"zone"`
}

type DbaasOpensearchUserState struct {
	// The password of the service user.
	Password pulumi.StringPtrInput
	// ❗ The name of the database service.
	Service  pulumi.StringPtrInput
	Timeouts DbaasOpensearchUserTimeoutsPtrInput
	// The type of the service user.
	Type pulumi.StringPtrInput
	// ❗ The name of the user for this service.
	Username pulumi.StringPtrInput
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringPtrInput
}

func (DbaasOpensearchUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbaasOpensearchUserState)(nil)).Elem()
}

type dbaasOpensearchUserArgs struct {
	// ❗ The name of the database service.
	Service  string                       `pulumi:"service"`
	Timeouts *DbaasOpensearchUserTimeouts `pulumi:"timeouts"`
	// ❗ The name of the user for this service.
	Username string `pulumi:"username"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a DbaasOpensearchUser resource.
type DbaasOpensearchUserArgs struct {
	// ❗ The name of the database service.
	Service  pulumi.StringInput
	Timeouts DbaasOpensearchUserTimeoutsPtrInput
	// ❗ The name of the user for this service.
	Username pulumi.StringInput
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringInput
}

func (DbaasOpensearchUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbaasOpensearchUserArgs)(nil)).Elem()
}

type DbaasOpensearchUserInput interface {
	pulumi.Input

	ToDbaasOpensearchUserOutput() DbaasOpensearchUserOutput
	ToDbaasOpensearchUserOutputWithContext(ctx context.Context) DbaasOpensearchUserOutput
}

func (*DbaasOpensearchUser) ElementType() reflect.Type {
	return reflect.TypeOf((**DbaasOpensearchUser)(nil)).Elem()
}

func (i *DbaasOpensearchUser) ToDbaasOpensearchUserOutput() DbaasOpensearchUserOutput {
	return i.ToDbaasOpensearchUserOutputWithContext(context.Background())
}

func (i *DbaasOpensearchUser) ToDbaasOpensearchUserOutputWithContext(ctx context.Context) DbaasOpensearchUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasOpensearchUserOutput)
}

// DbaasOpensearchUserArrayInput is an input type that accepts DbaasOpensearchUserArray and DbaasOpensearchUserArrayOutput values.
// You can construct a concrete instance of `DbaasOpensearchUserArrayInput` via:
//
//	DbaasOpensearchUserArray{ DbaasOpensearchUserArgs{...} }
type DbaasOpensearchUserArrayInput interface {
	pulumi.Input

	ToDbaasOpensearchUserArrayOutput() DbaasOpensearchUserArrayOutput
	ToDbaasOpensearchUserArrayOutputWithContext(context.Context) DbaasOpensearchUserArrayOutput
}

type DbaasOpensearchUserArray []DbaasOpensearchUserInput

func (DbaasOpensearchUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbaasOpensearchUser)(nil)).Elem()
}

func (i DbaasOpensearchUserArray) ToDbaasOpensearchUserArrayOutput() DbaasOpensearchUserArrayOutput {
	return i.ToDbaasOpensearchUserArrayOutputWithContext(context.Background())
}

func (i DbaasOpensearchUserArray) ToDbaasOpensearchUserArrayOutputWithContext(ctx context.Context) DbaasOpensearchUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasOpensearchUserArrayOutput)
}

// DbaasOpensearchUserMapInput is an input type that accepts DbaasOpensearchUserMap and DbaasOpensearchUserMapOutput values.
// You can construct a concrete instance of `DbaasOpensearchUserMapInput` via:
//
//	DbaasOpensearchUserMap{ "key": DbaasOpensearchUserArgs{...} }
type DbaasOpensearchUserMapInput interface {
	pulumi.Input

	ToDbaasOpensearchUserMapOutput() DbaasOpensearchUserMapOutput
	ToDbaasOpensearchUserMapOutputWithContext(context.Context) DbaasOpensearchUserMapOutput
}

type DbaasOpensearchUserMap map[string]DbaasOpensearchUserInput

func (DbaasOpensearchUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbaasOpensearchUser)(nil)).Elem()
}

func (i DbaasOpensearchUserMap) ToDbaasOpensearchUserMapOutput() DbaasOpensearchUserMapOutput {
	return i.ToDbaasOpensearchUserMapOutputWithContext(context.Background())
}

func (i DbaasOpensearchUserMap) ToDbaasOpensearchUserMapOutputWithContext(ctx context.Context) DbaasOpensearchUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasOpensearchUserMapOutput)
}

type DbaasOpensearchUserOutput struct{ *pulumi.OutputState }

func (DbaasOpensearchUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbaasOpensearchUser)(nil)).Elem()
}

func (o DbaasOpensearchUserOutput) ToDbaasOpensearchUserOutput() DbaasOpensearchUserOutput {
	return o
}

func (o DbaasOpensearchUserOutput) ToDbaasOpensearchUserOutputWithContext(ctx context.Context) DbaasOpensearchUserOutput {
	return o
}

// The password of the service user.
func (o DbaasOpensearchUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasOpensearchUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// ❗ The name of the database service.
func (o DbaasOpensearchUserOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasOpensearchUser) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

func (o DbaasOpensearchUserOutput) Timeouts() DbaasOpensearchUserTimeoutsPtrOutput {
	return o.ApplyT(func(v *DbaasOpensearchUser) DbaasOpensearchUserTimeoutsPtrOutput { return v.Timeouts }).(DbaasOpensearchUserTimeoutsPtrOutput)
}

// The type of the service user.
func (o DbaasOpensearchUserOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasOpensearchUser) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// ❗ The name of the user for this service.
func (o DbaasOpensearchUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasOpensearchUser) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
func (o DbaasOpensearchUserOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasOpensearchUser) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type DbaasOpensearchUserArrayOutput struct{ *pulumi.OutputState }

func (DbaasOpensearchUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbaasOpensearchUser)(nil)).Elem()
}

func (o DbaasOpensearchUserArrayOutput) ToDbaasOpensearchUserArrayOutput() DbaasOpensearchUserArrayOutput {
	return o
}

func (o DbaasOpensearchUserArrayOutput) ToDbaasOpensearchUserArrayOutputWithContext(ctx context.Context) DbaasOpensearchUserArrayOutput {
	return o
}

func (o DbaasOpensearchUserArrayOutput) Index(i pulumi.IntInput) DbaasOpensearchUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DbaasOpensearchUser {
		return vs[0].([]*DbaasOpensearchUser)[vs[1].(int)]
	}).(DbaasOpensearchUserOutput)
}

type DbaasOpensearchUserMapOutput struct{ *pulumi.OutputState }

func (DbaasOpensearchUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbaasOpensearchUser)(nil)).Elem()
}

func (o DbaasOpensearchUserMapOutput) ToDbaasOpensearchUserMapOutput() DbaasOpensearchUserMapOutput {
	return o
}

func (o DbaasOpensearchUserMapOutput) ToDbaasOpensearchUserMapOutputWithContext(ctx context.Context) DbaasOpensearchUserMapOutput {
	return o
}

func (o DbaasOpensearchUserMapOutput) MapIndex(k pulumi.StringInput) DbaasOpensearchUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DbaasOpensearchUser {
		return vs[0].(map[string]*DbaasOpensearchUser)[vs[1].(string)]
	}).(DbaasOpensearchUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasOpensearchUserInput)(nil)).Elem(), &DbaasOpensearchUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasOpensearchUserArrayInput)(nil)).Elem(), DbaasOpensearchUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasOpensearchUserMapInput)(nil)).Elem(), DbaasOpensearchUserMap{})
	pulumi.RegisterOutputType(DbaasOpensearchUserOutput{})
	pulumi.RegisterOutputType(DbaasOpensearchUserArrayOutput{})
	pulumi.RegisterOutputType(DbaasOpensearchUserMapOutput{})
}
