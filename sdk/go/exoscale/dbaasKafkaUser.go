// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

// Manage service users for a Kafka Exoscale [Database Services (DBaaS)](https://community.exoscale.com/documentation/dbaas/).
type DbaasKafkaUser struct {
	pulumi.CustomResourceState

	// Access certificate for the user.
	AccessCert pulumi.StringOutput `pulumi:"accessCert"`
	// Access certificate expiry date.
	AccessCertExpiry pulumi.StringOutput `pulumi:"accessCertExpiry"`
	// Access certificate key for the user.
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// The password of the service user.
	Password pulumi.StringOutput `pulumi:"password"`
	// ❗ The name of the database service.
	Service  pulumi.StringOutput             `pulumi:"service"`
	Timeouts DbaasKafkaUserTimeoutsPtrOutput `pulumi:"timeouts"`
	// The type of the service user.
	Type pulumi.StringOutput `pulumi:"type"`
	// ❗ The name of the user for this service.
	Username pulumi.StringOutput `pulumi:"username"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewDbaasKafkaUser registers a new resource with the given unique name, arguments, and options.
func NewDbaasKafkaUser(ctx *pulumi.Context,
	name string, args *DbaasKafkaUserArgs, opts ...pulumi.ResourceOption) (*DbaasKafkaUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accessCert",
		"accessKey",
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DbaasKafkaUser
	err := ctx.RegisterResource("exoscale:index/dbaasKafkaUser:DbaasKafkaUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbaasKafkaUser gets an existing DbaasKafkaUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbaasKafkaUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbaasKafkaUserState, opts ...pulumi.ResourceOption) (*DbaasKafkaUser, error) {
	var resource DbaasKafkaUser
	err := ctx.ReadResource("exoscale:index/dbaasKafkaUser:DbaasKafkaUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbaasKafkaUser resources.
type dbaasKafkaUserState struct {
	// Access certificate for the user.
	AccessCert *string `pulumi:"accessCert"`
	// Access certificate expiry date.
	AccessCertExpiry *string `pulumi:"accessCertExpiry"`
	// Access certificate key for the user.
	AccessKey *string `pulumi:"accessKey"`
	// The password of the service user.
	Password *string `pulumi:"password"`
	// ❗ The name of the database service.
	Service  *string                 `pulumi:"service"`
	Timeouts *DbaasKafkaUserTimeouts `pulumi:"timeouts"`
	// The type of the service user.
	Type *string `pulumi:"type"`
	// ❗ The name of the user for this service.
	Username *string `pulumi:"username"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone *string `pulumi:"zone"`
}

type DbaasKafkaUserState struct {
	// Access certificate for the user.
	AccessCert pulumi.StringPtrInput
	// Access certificate expiry date.
	AccessCertExpiry pulumi.StringPtrInput
	// Access certificate key for the user.
	AccessKey pulumi.StringPtrInput
	// The password of the service user.
	Password pulumi.StringPtrInput
	// ❗ The name of the database service.
	Service  pulumi.StringPtrInput
	Timeouts DbaasKafkaUserTimeoutsPtrInput
	// The type of the service user.
	Type pulumi.StringPtrInput
	// ❗ The name of the user for this service.
	Username pulumi.StringPtrInput
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringPtrInput
}

func (DbaasKafkaUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbaasKafkaUserState)(nil)).Elem()
}

type dbaasKafkaUserArgs struct {
	// ❗ The name of the database service.
	Service  string                  `pulumi:"service"`
	Timeouts *DbaasKafkaUserTimeouts `pulumi:"timeouts"`
	// ❗ The name of the user for this service.
	Username string `pulumi:"username"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a DbaasKafkaUser resource.
type DbaasKafkaUserArgs struct {
	// ❗ The name of the database service.
	Service  pulumi.StringInput
	Timeouts DbaasKafkaUserTimeoutsPtrInput
	// ❗ The name of the user for this service.
	Username pulumi.StringInput
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringInput
}

func (DbaasKafkaUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbaasKafkaUserArgs)(nil)).Elem()
}

type DbaasKafkaUserInput interface {
	pulumi.Input

	ToDbaasKafkaUserOutput() DbaasKafkaUserOutput
	ToDbaasKafkaUserOutputWithContext(ctx context.Context) DbaasKafkaUserOutput
}

func (*DbaasKafkaUser) ElementType() reflect.Type {
	return reflect.TypeOf((**DbaasKafkaUser)(nil)).Elem()
}

func (i *DbaasKafkaUser) ToDbaasKafkaUserOutput() DbaasKafkaUserOutput {
	return i.ToDbaasKafkaUserOutputWithContext(context.Background())
}

func (i *DbaasKafkaUser) ToDbaasKafkaUserOutputWithContext(ctx context.Context) DbaasKafkaUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasKafkaUserOutput)
}

// DbaasKafkaUserArrayInput is an input type that accepts DbaasKafkaUserArray and DbaasKafkaUserArrayOutput values.
// You can construct a concrete instance of `DbaasKafkaUserArrayInput` via:
//
//	DbaasKafkaUserArray{ DbaasKafkaUserArgs{...} }
type DbaasKafkaUserArrayInput interface {
	pulumi.Input

	ToDbaasKafkaUserArrayOutput() DbaasKafkaUserArrayOutput
	ToDbaasKafkaUserArrayOutputWithContext(context.Context) DbaasKafkaUserArrayOutput
}

type DbaasKafkaUserArray []DbaasKafkaUserInput

func (DbaasKafkaUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbaasKafkaUser)(nil)).Elem()
}

func (i DbaasKafkaUserArray) ToDbaasKafkaUserArrayOutput() DbaasKafkaUserArrayOutput {
	return i.ToDbaasKafkaUserArrayOutputWithContext(context.Background())
}

func (i DbaasKafkaUserArray) ToDbaasKafkaUserArrayOutputWithContext(ctx context.Context) DbaasKafkaUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasKafkaUserArrayOutput)
}

// DbaasKafkaUserMapInput is an input type that accepts DbaasKafkaUserMap and DbaasKafkaUserMapOutput values.
// You can construct a concrete instance of `DbaasKafkaUserMapInput` via:
//
//	DbaasKafkaUserMap{ "key": DbaasKafkaUserArgs{...} }
type DbaasKafkaUserMapInput interface {
	pulumi.Input

	ToDbaasKafkaUserMapOutput() DbaasKafkaUserMapOutput
	ToDbaasKafkaUserMapOutputWithContext(context.Context) DbaasKafkaUserMapOutput
}

type DbaasKafkaUserMap map[string]DbaasKafkaUserInput

func (DbaasKafkaUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbaasKafkaUser)(nil)).Elem()
}

func (i DbaasKafkaUserMap) ToDbaasKafkaUserMapOutput() DbaasKafkaUserMapOutput {
	return i.ToDbaasKafkaUserMapOutputWithContext(context.Background())
}

func (i DbaasKafkaUserMap) ToDbaasKafkaUserMapOutputWithContext(ctx context.Context) DbaasKafkaUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasKafkaUserMapOutput)
}

type DbaasKafkaUserOutput struct{ *pulumi.OutputState }

func (DbaasKafkaUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbaasKafkaUser)(nil)).Elem()
}

func (o DbaasKafkaUserOutput) ToDbaasKafkaUserOutput() DbaasKafkaUserOutput {
	return o
}

func (o DbaasKafkaUserOutput) ToDbaasKafkaUserOutputWithContext(ctx context.Context) DbaasKafkaUserOutput {
	return o
}

// Access certificate for the user.
func (o DbaasKafkaUserOutput) AccessCert() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasKafkaUser) pulumi.StringOutput { return v.AccessCert }).(pulumi.StringOutput)
}

// Access certificate expiry date.
func (o DbaasKafkaUserOutput) AccessCertExpiry() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasKafkaUser) pulumi.StringOutput { return v.AccessCertExpiry }).(pulumi.StringOutput)
}

// Access certificate key for the user.
func (o DbaasKafkaUserOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasKafkaUser) pulumi.StringOutput { return v.AccessKey }).(pulumi.StringOutput)
}

// The password of the service user.
func (o DbaasKafkaUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasKafkaUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// ❗ The name of the database service.
func (o DbaasKafkaUserOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasKafkaUser) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

func (o DbaasKafkaUserOutput) Timeouts() DbaasKafkaUserTimeoutsPtrOutput {
	return o.ApplyT(func(v *DbaasKafkaUser) DbaasKafkaUserTimeoutsPtrOutput { return v.Timeouts }).(DbaasKafkaUserTimeoutsPtrOutput)
}

// The type of the service user.
func (o DbaasKafkaUserOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasKafkaUser) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// ❗ The name of the user for this service.
func (o DbaasKafkaUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasKafkaUser) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
func (o DbaasKafkaUserOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasKafkaUser) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type DbaasKafkaUserArrayOutput struct{ *pulumi.OutputState }

func (DbaasKafkaUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbaasKafkaUser)(nil)).Elem()
}

func (o DbaasKafkaUserArrayOutput) ToDbaasKafkaUserArrayOutput() DbaasKafkaUserArrayOutput {
	return o
}

func (o DbaasKafkaUserArrayOutput) ToDbaasKafkaUserArrayOutputWithContext(ctx context.Context) DbaasKafkaUserArrayOutput {
	return o
}

func (o DbaasKafkaUserArrayOutput) Index(i pulumi.IntInput) DbaasKafkaUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DbaasKafkaUser {
		return vs[0].([]*DbaasKafkaUser)[vs[1].(int)]
	}).(DbaasKafkaUserOutput)
}

type DbaasKafkaUserMapOutput struct{ *pulumi.OutputState }

func (DbaasKafkaUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbaasKafkaUser)(nil)).Elem()
}

func (o DbaasKafkaUserMapOutput) ToDbaasKafkaUserMapOutput() DbaasKafkaUserMapOutput {
	return o
}

func (o DbaasKafkaUserMapOutput) ToDbaasKafkaUserMapOutputWithContext(ctx context.Context) DbaasKafkaUserMapOutput {
	return o
}

func (o DbaasKafkaUserMapOutput) MapIndex(k pulumi.StringInput) DbaasKafkaUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DbaasKafkaUser {
		return vs[0].(map[string]*DbaasKafkaUser)[vs[1].(string)]
	}).(DbaasKafkaUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasKafkaUserInput)(nil)).Elem(), &DbaasKafkaUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasKafkaUserArrayInput)(nil)).Elem(), DbaasKafkaUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasKafkaUserMapInput)(nil)).Elem(), DbaasKafkaUserMap{})
	pulumi.RegisterOutputType(DbaasKafkaUserOutput{})
	pulumi.RegisterOutputType(DbaasKafkaUserArrayOutput{})
	pulumi.RegisterOutputType(DbaasKafkaUserMapOutput{})
}
