// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"timezone": "Europe/Zurich",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = exoscale.NewDatabase(ctx, "my_database", &exoscale.DatabaseArgs{
//				Zone:                  pulumi.String("ch-gva-2"),
//				Name:                  pulumi.String("my-database"),
//				Type:                  pulumi.String("pg"),
//				Plan:                  pulumi.String("startup-4"),
//				MaintenanceDow:        pulumi.String("sunday"),
//				MaintenanceTime:       pulumi.String("23:00:00"),
//				TerminationProtection: pulumi.Bool(true),
//				Pg: &exoscale.DatabasePgArgs{
//					Version:        pulumi.String("13"),
//					BackupSchedule: pulumi.String("04:00"),
//					IpFilters: pulumi.StringArray{
//						pulumi.String("1.2.3.4/32"),
//						pulumi.String("5.6.7.8/32"),
//					},
//					PgSettings: pulumi.String(json0),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			myDatabase, err := exoscale.GetDatabaseUri(ctx, &exoscale.GetDatabaseUriArgs{
//				Name: "my-database",
//				Type: "pg",
//				Zone: "ch-gva-2",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("myDatabaseUri", myDatabase.Uri)
//			return nil
//		})
//	}
//
// ```
func GetDatabaseUri(ctx *pulumi.Context, args *GetDatabaseUriArgs, opts ...pulumi.InvokeOption) (*GetDatabaseUriResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDatabaseUriResult
	err := ctx.Invoke("exoscale:index/getDatabaseUri:getDatabaseUri", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatabaseUri.
type GetDatabaseUriArgs struct {
	// Name of database service to match.
	Name     string                  `pulumi:"name"`
	Timeouts *GetDatabaseUriTimeouts `pulumi:"timeouts"`
	// The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `valkey`, `grafana`).
	Type string `pulumi:"type"`
	// The Exoscale Zone name.
	Zone string `pulumi:"zone"`
}

// A collection of values returned by getDatabaseUri.
type GetDatabaseUriResult struct {
	// Default database name
	DbName string `pulumi:"dbName"`
	// Database service hostname
	Host string `pulumi:"host"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// Name of database service to match.
	Name string `pulumi:"name"`
	// Admin user password
	Password string `pulumi:"password"`
	// Database service port
	Port int `pulumi:"port"`
	// Database service connection schema
	Schema   string                  `pulumi:"schema"`
	Timeouts *GetDatabaseUriTimeouts `pulumi:"timeouts"`
	// The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `valkey`, `grafana`).
	Type string `pulumi:"type"`
	// Database service connection URI.
	Uri string `pulumi:"uri"`
	// Admin user username
	Username string `pulumi:"username"`
	// The Exoscale Zone name.
	Zone string `pulumi:"zone"`
}

func GetDatabaseUriOutput(ctx *pulumi.Context, args GetDatabaseUriOutputArgs, opts ...pulumi.InvokeOption) GetDatabaseUriResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDatabaseUriResultOutput, error) {
			args := v.(GetDatabaseUriArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("exoscale:index/getDatabaseUri:getDatabaseUri", args, GetDatabaseUriResultOutput{}, options).(GetDatabaseUriResultOutput), nil
		}).(GetDatabaseUriResultOutput)
}

// A collection of arguments for invoking getDatabaseUri.
type GetDatabaseUriOutputArgs struct {
	// Name of database service to match.
	Name     pulumi.StringInput             `pulumi:"name"`
	Timeouts GetDatabaseUriTimeoutsPtrInput `pulumi:"timeouts"`
	// The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `valkey`, `grafana`).
	Type pulumi.StringInput `pulumi:"type"`
	// The Exoscale Zone name.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetDatabaseUriOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseUriArgs)(nil)).Elem()
}

// A collection of values returned by getDatabaseUri.
type GetDatabaseUriResultOutput struct{ *pulumi.OutputState }

func (GetDatabaseUriResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseUriResult)(nil)).Elem()
}

func (o GetDatabaseUriResultOutput) ToGetDatabaseUriResultOutput() GetDatabaseUriResultOutput {
	return o
}

func (o GetDatabaseUriResultOutput) ToGetDatabaseUriResultOutputWithContext(ctx context.Context) GetDatabaseUriResultOutput {
	return o
}

// Default database name
func (o GetDatabaseUriResultOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseUriResult) string { return v.DbName }).(pulumi.StringOutput)
}

// Database service hostname
func (o GetDatabaseUriResultOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseUriResult) string { return v.Host }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o GetDatabaseUriResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseUriResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of database service to match.
func (o GetDatabaseUriResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseUriResult) string { return v.Name }).(pulumi.StringOutput)
}

// Admin user password
func (o GetDatabaseUriResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseUriResult) string { return v.Password }).(pulumi.StringOutput)
}

// Database service port
func (o GetDatabaseUriResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetDatabaseUriResult) int { return v.Port }).(pulumi.IntOutput)
}

// Database service connection schema
func (o GetDatabaseUriResultOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseUriResult) string { return v.Schema }).(pulumi.StringOutput)
}

func (o GetDatabaseUriResultOutput) Timeouts() GetDatabaseUriTimeoutsPtrOutput {
	return o.ApplyT(func(v GetDatabaseUriResult) *GetDatabaseUriTimeouts { return v.Timeouts }).(GetDatabaseUriTimeoutsPtrOutput)
}

// The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `valkey`, `grafana`).
func (o GetDatabaseUriResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseUriResult) string { return v.Type }).(pulumi.StringOutput)
}

// Database service connection URI.
func (o GetDatabaseUriResultOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseUriResult) string { return v.Uri }).(pulumi.StringOutput)
}

// Admin user username
func (o GetDatabaseUriResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseUriResult) string { return v.Username }).(pulumi.StringOutput)
}

// The Exoscale Zone name.
func (o GetDatabaseUriResultOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseUriResult) string { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDatabaseUriResultOutput{})
}
