// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

// Manage Exoscale [Database Services (DBaaS)](https://community.exoscale.com/documentation/dbaas/).
type Dbaas struct {
	pulumi.CustomResourceState

	// CA Certificate required to reach a DBaaS service through a TLS-protected connection.
	CaCertificate pulumi.StringOutput `pulumi:"caCertificate"`
	// The creation date of the database service.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The disk size of the database service.
	DiskSize pulumi.IntOutput `pulumi:"diskSize"`
	// *grafana* database service type specific arguments. Structure is documented below.
	Grafana DbaasGrafanaPtrOutput `pulumi:"grafana"`
	// *kafka* database service type specific arguments. Structure is documented below.
	Kafka DbaasKafkaPtrOutput `pulumi:"kafka"`
	// The day of week to perform the automated database service maintenance (`never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).
	MaintenanceDow pulumi.StringOutput `pulumi:"maintenanceDow"`
	// The time of day to perform the automated database service maintenance (`HH:MM:SS`)
	MaintenanceTime pulumi.StringOutput `pulumi:"maintenanceTime"`
	// *mysql* database service type specific arguments. Structure is documented below.
	Mysql DbaasMysqlPtrOutput `pulumi:"mysql"`
	// ❗ The name of the database service.
	Name pulumi.StringOutput `pulumi:"name"`
	// The number of CPUs of the database service.
	NodeCpus pulumi.IntOutput `pulumi:"nodeCpus"`
	// The amount of memory of the database service.
	NodeMemory pulumi.IntOutput `pulumi:"nodeMemory"`
	// The number of nodes of the database service.
	Nodes pulumi.IntOutput `pulumi:"nodes"`
	// *opensearch* database service type specific arguments. Structure is documented below.
	Opensearch DbaasOpensearchPtrOutput `pulumi:"opensearch"`
	// *pg* database service type specific arguments. Structure is documented below.
	Pg DbaasPgPtrOutput `pulumi:"pg"`
	// The plan of the database service (use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo dbaas type show <TYPE> --plans` - for reference).
	Plan pulumi.StringOutput `pulumi:"plan"`
	// The current state of the database service.
	State pulumi.StringOutput `pulumi:"state"`
	// The database service protection boolean flag against termination/power-off.
	TerminationProtection pulumi.BoolOutput      `pulumi:"terminationProtection"`
	Timeouts              DbaasTimeoutsPtrOutput `pulumi:"timeouts"`
	// ❗ The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `valkey`, `grafana`).
	Type pulumi.StringOutput `pulumi:"type"`
	// The date of the latest database service update.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// *valkey* database service type specific arguments. Structure is documented below.
	Valkey DbaasValkeyPtrOutput `pulumi:"valkey"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewDbaas registers a new resource with the given unique name, arguments, and options.
func NewDbaas(ctx *pulumi.Context,
	name string, args *DbaasArgs, opts ...pulumi.ResourceOption) (*Dbaas, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dbaas
	err := ctx.RegisterResource("exoscale:index/dbaas:Dbaas", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbaas gets an existing Dbaas resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbaas(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbaasState, opts ...pulumi.ResourceOption) (*Dbaas, error) {
	var resource Dbaas
	err := ctx.ReadResource("exoscale:index/dbaas:Dbaas", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dbaas resources.
type dbaasState struct {
	// CA Certificate required to reach a DBaaS service through a TLS-protected connection.
	CaCertificate *string `pulumi:"caCertificate"`
	// The creation date of the database service.
	CreatedAt *string `pulumi:"createdAt"`
	// The disk size of the database service.
	DiskSize *int `pulumi:"diskSize"`
	// *grafana* database service type specific arguments. Structure is documented below.
	Grafana *DbaasGrafana `pulumi:"grafana"`
	// *kafka* database service type specific arguments. Structure is documented below.
	Kafka *DbaasKafka `pulumi:"kafka"`
	// The day of week to perform the automated database service maintenance (`never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).
	MaintenanceDow *string `pulumi:"maintenanceDow"`
	// The time of day to perform the automated database service maintenance (`HH:MM:SS`)
	MaintenanceTime *string `pulumi:"maintenanceTime"`
	// *mysql* database service type specific arguments. Structure is documented below.
	Mysql *DbaasMysql `pulumi:"mysql"`
	// ❗ The name of the database service.
	Name *string `pulumi:"name"`
	// The number of CPUs of the database service.
	NodeCpus *int `pulumi:"nodeCpus"`
	// The amount of memory of the database service.
	NodeMemory *int `pulumi:"nodeMemory"`
	// The number of nodes of the database service.
	Nodes *int `pulumi:"nodes"`
	// *opensearch* database service type specific arguments. Structure is documented below.
	Opensearch *DbaasOpensearch `pulumi:"opensearch"`
	// *pg* database service type specific arguments. Structure is documented below.
	Pg *DbaasPg `pulumi:"pg"`
	// The plan of the database service (use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo dbaas type show <TYPE> --plans` - for reference).
	Plan *string `pulumi:"plan"`
	// The current state of the database service.
	State *string `pulumi:"state"`
	// The database service protection boolean flag against termination/power-off.
	TerminationProtection *bool          `pulumi:"terminationProtection"`
	Timeouts              *DbaasTimeouts `pulumi:"timeouts"`
	// ❗ The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `valkey`, `grafana`).
	Type *string `pulumi:"type"`
	// The date of the latest database service update.
	UpdatedAt *string `pulumi:"updatedAt"`
	// *valkey* database service type specific arguments. Structure is documented below.
	Valkey *DbaasValkey `pulumi:"valkey"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone *string `pulumi:"zone"`
}

type DbaasState struct {
	// CA Certificate required to reach a DBaaS service through a TLS-protected connection.
	CaCertificate pulumi.StringPtrInput
	// The creation date of the database service.
	CreatedAt pulumi.StringPtrInput
	// The disk size of the database service.
	DiskSize pulumi.IntPtrInput
	// *grafana* database service type specific arguments. Structure is documented below.
	Grafana DbaasGrafanaPtrInput
	// *kafka* database service type specific arguments. Structure is documented below.
	Kafka DbaasKafkaPtrInput
	// The day of week to perform the automated database service maintenance (`never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).
	MaintenanceDow pulumi.StringPtrInput
	// The time of day to perform the automated database service maintenance (`HH:MM:SS`)
	MaintenanceTime pulumi.StringPtrInput
	// *mysql* database service type specific arguments. Structure is documented below.
	Mysql DbaasMysqlPtrInput
	// ❗ The name of the database service.
	Name pulumi.StringPtrInput
	// The number of CPUs of the database service.
	NodeCpus pulumi.IntPtrInput
	// The amount of memory of the database service.
	NodeMemory pulumi.IntPtrInput
	// The number of nodes of the database service.
	Nodes pulumi.IntPtrInput
	// *opensearch* database service type specific arguments. Structure is documented below.
	Opensearch DbaasOpensearchPtrInput
	// *pg* database service type specific arguments. Structure is documented below.
	Pg DbaasPgPtrInput
	// The plan of the database service (use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo dbaas type show <TYPE> --plans` - for reference).
	Plan pulumi.StringPtrInput
	// The current state of the database service.
	State pulumi.StringPtrInput
	// The database service protection boolean flag against termination/power-off.
	TerminationProtection pulumi.BoolPtrInput
	Timeouts              DbaasTimeoutsPtrInput
	// ❗ The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `valkey`, `grafana`).
	Type pulumi.StringPtrInput
	// The date of the latest database service update.
	UpdatedAt pulumi.StringPtrInput
	// *valkey* database service type specific arguments. Structure is documented below.
	Valkey DbaasValkeyPtrInput
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringPtrInput
}

func (DbaasState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbaasState)(nil)).Elem()
}

type dbaasArgs struct {
	// *grafana* database service type specific arguments. Structure is documented below.
	Grafana *DbaasGrafana `pulumi:"grafana"`
	// *kafka* database service type specific arguments. Structure is documented below.
	Kafka *DbaasKafka `pulumi:"kafka"`
	// The day of week to perform the automated database service maintenance (`never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).
	MaintenanceDow *string `pulumi:"maintenanceDow"`
	// The time of day to perform the automated database service maintenance (`HH:MM:SS`)
	MaintenanceTime *string `pulumi:"maintenanceTime"`
	// *mysql* database service type specific arguments. Structure is documented below.
	Mysql *DbaasMysql `pulumi:"mysql"`
	// ❗ The name of the database service.
	Name *string `pulumi:"name"`
	// *opensearch* database service type specific arguments. Structure is documented below.
	Opensearch *DbaasOpensearch `pulumi:"opensearch"`
	// *pg* database service type specific arguments. Structure is documented below.
	Pg *DbaasPg `pulumi:"pg"`
	// The plan of the database service (use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo dbaas type show <TYPE> --plans` - for reference).
	Plan string `pulumi:"plan"`
	// The database service protection boolean flag against termination/power-off.
	TerminationProtection *bool          `pulumi:"terminationProtection"`
	Timeouts              *DbaasTimeouts `pulumi:"timeouts"`
	// ❗ The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `valkey`, `grafana`).
	Type string `pulumi:"type"`
	// *valkey* database service type specific arguments. Structure is documented below.
	Valkey *DbaasValkey `pulumi:"valkey"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a Dbaas resource.
type DbaasArgs struct {
	// *grafana* database service type specific arguments. Structure is documented below.
	Grafana DbaasGrafanaPtrInput
	// *kafka* database service type specific arguments. Structure is documented below.
	Kafka DbaasKafkaPtrInput
	// The day of week to perform the automated database service maintenance (`never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).
	MaintenanceDow pulumi.StringPtrInput
	// The time of day to perform the automated database service maintenance (`HH:MM:SS`)
	MaintenanceTime pulumi.StringPtrInput
	// *mysql* database service type specific arguments. Structure is documented below.
	Mysql DbaasMysqlPtrInput
	// ❗ The name of the database service.
	Name pulumi.StringPtrInput
	// *opensearch* database service type specific arguments. Structure is documented below.
	Opensearch DbaasOpensearchPtrInput
	// *pg* database service type specific arguments. Structure is documented below.
	Pg DbaasPgPtrInput
	// The plan of the database service (use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo dbaas type show <TYPE> --plans` - for reference).
	Plan pulumi.StringInput
	// The database service protection boolean flag against termination/power-off.
	TerminationProtection pulumi.BoolPtrInput
	Timeouts              DbaasTimeoutsPtrInput
	// ❗ The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `valkey`, `grafana`).
	Type pulumi.StringInput
	// *valkey* database service type specific arguments. Structure is documented below.
	Valkey DbaasValkeyPtrInput
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringInput
}

func (DbaasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbaasArgs)(nil)).Elem()
}

type DbaasInput interface {
	pulumi.Input

	ToDbaasOutput() DbaasOutput
	ToDbaasOutputWithContext(ctx context.Context) DbaasOutput
}

func (*Dbaas) ElementType() reflect.Type {
	return reflect.TypeOf((**Dbaas)(nil)).Elem()
}

func (i *Dbaas) ToDbaasOutput() DbaasOutput {
	return i.ToDbaasOutputWithContext(context.Background())
}

func (i *Dbaas) ToDbaasOutputWithContext(ctx context.Context) DbaasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasOutput)
}

// DbaasArrayInput is an input type that accepts DbaasArray and DbaasArrayOutput values.
// You can construct a concrete instance of `DbaasArrayInput` via:
//
//	DbaasArray{ DbaasArgs{...} }
type DbaasArrayInput interface {
	pulumi.Input

	ToDbaasArrayOutput() DbaasArrayOutput
	ToDbaasArrayOutputWithContext(context.Context) DbaasArrayOutput
}

type DbaasArray []DbaasInput

func (DbaasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dbaas)(nil)).Elem()
}

func (i DbaasArray) ToDbaasArrayOutput() DbaasArrayOutput {
	return i.ToDbaasArrayOutputWithContext(context.Background())
}

func (i DbaasArray) ToDbaasArrayOutputWithContext(ctx context.Context) DbaasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasArrayOutput)
}

// DbaasMapInput is an input type that accepts DbaasMap and DbaasMapOutput values.
// You can construct a concrete instance of `DbaasMapInput` via:
//
//	DbaasMap{ "key": DbaasArgs{...} }
type DbaasMapInput interface {
	pulumi.Input

	ToDbaasMapOutput() DbaasMapOutput
	ToDbaasMapOutputWithContext(context.Context) DbaasMapOutput
}

type DbaasMap map[string]DbaasInput

func (DbaasMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dbaas)(nil)).Elem()
}

func (i DbaasMap) ToDbaasMapOutput() DbaasMapOutput {
	return i.ToDbaasMapOutputWithContext(context.Background())
}

func (i DbaasMap) ToDbaasMapOutputWithContext(ctx context.Context) DbaasMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasMapOutput)
}

type DbaasOutput struct{ *pulumi.OutputState }

func (DbaasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dbaas)(nil)).Elem()
}

func (o DbaasOutput) ToDbaasOutput() DbaasOutput {
	return o
}

func (o DbaasOutput) ToDbaasOutputWithContext(ctx context.Context) DbaasOutput {
	return o
}

// CA Certificate required to reach a DBaaS service through a TLS-protected connection.
func (o DbaasOutput) CaCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *Dbaas) pulumi.StringOutput { return v.CaCertificate }).(pulumi.StringOutput)
}

// The creation date of the database service.
func (o DbaasOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Dbaas) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The disk size of the database service.
func (o DbaasOutput) DiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Dbaas) pulumi.IntOutput { return v.DiskSize }).(pulumi.IntOutput)
}

// *grafana* database service type specific arguments. Structure is documented below.
func (o DbaasOutput) Grafana() DbaasGrafanaPtrOutput {
	return o.ApplyT(func(v *Dbaas) DbaasGrafanaPtrOutput { return v.Grafana }).(DbaasGrafanaPtrOutput)
}

// *kafka* database service type specific arguments. Structure is documented below.
func (o DbaasOutput) Kafka() DbaasKafkaPtrOutput {
	return o.ApplyT(func(v *Dbaas) DbaasKafkaPtrOutput { return v.Kafka }).(DbaasKafkaPtrOutput)
}

// The day of week to perform the automated database service maintenance (`never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).
func (o DbaasOutput) MaintenanceDow() pulumi.StringOutput {
	return o.ApplyT(func(v *Dbaas) pulumi.StringOutput { return v.MaintenanceDow }).(pulumi.StringOutput)
}

// The time of day to perform the automated database service maintenance (`HH:MM:SS`)
func (o DbaasOutput) MaintenanceTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Dbaas) pulumi.StringOutput { return v.MaintenanceTime }).(pulumi.StringOutput)
}

// *mysql* database service type specific arguments. Structure is documented below.
func (o DbaasOutput) Mysql() DbaasMysqlPtrOutput {
	return o.ApplyT(func(v *Dbaas) DbaasMysqlPtrOutput { return v.Mysql }).(DbaasMysqlPtrOutput)
}

// ❗ The name of the database service.
func (o DbaasOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Dbaas) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The number of CPUs of the database service.
func (o DbaasOutput) NodeCpus() pulumi.IntOutput {
	return o.ApplyT(func(v *Dbaas) pulumi.IntOutput { return v.NodeCpus }).(pulumi.IntOutput)
}

// The amount of memory of the database service.
func (o DbaasOutput) NodeMemory() pulumi.IntOutput {
	return o.ApplyT(func(v *Dbaas) pulumi.IntOutput { return v.NodeMemory }).(pulumi.IntOutput)
}

// The number of nodes of the database service.
func (o DbaasOutput) Nodes() pulumi.IntOutput {
	return o.ApplyT(func(v *Dbaas) pulumi.IntOutput { return v.Nodes }).(pulumi.IntOutput)
}

// *opensearch* database service type specific arguments. Structure is documented below.
func (o DbaasOutput) Opensearch() DbaasOpensearchPtrOutput {
	return o.ApplyT(func(v *Dbaas) DbaasOpensearchPtrOutput { return v.Opensearch }).(DbaasOpensearchPtrOutput)
}

// *pg* database service type specific arguments. Structure is documented below.
func (o DbaasOutput) Pg() DbaasPgPtrOutput {
	return o.ApplyT(func(v *Dbaas) DbaasPgPtrOutput { return v.Pg }).(DbaasPgPtrOutput)
}

// The plan of the database service (use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo dbaas type show <TYPE> --plans` - for reference).
func (o DbaasOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v *Dbaas) pulumi.StringOutput { return v.Plan }).(pulumi.StringOutput)
}

// The current state of the database service.
func (o DbaasOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Dbaas) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The database service protection boolean flag against termination/power-off.
func (o DbaasOutput) TerminationProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v *Dbaas) pulumi.BoolOutput { return v.TerminationProtection }).(pulumi.BoolOutput)
}

func (o DbaasOutput) Timeouts() DbaasTimeoutsPtrOutput {
	return o.ApplyT(func(v *Dbaas) DbaasTimeoutsPtrOutput { return v.Timeouts }).(DbaasTimeoutsPtrOutput)
}

// ❗ The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `valkey`, `grafana`).
func (o DbaasOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Dbaas) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The date of the latest database service update.
func (o DbaasOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Dbaas) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// *valkey* database service type specific arguments. Structure is documented below.
func (o DbaasOutput) Valkey() DbaasValkeyPtrOutput {
	return o.ApplyT(func(v *Dbaas) DbaasValkeyPtrOutput { return v.Valkey }).(DbaasValkeyPtrOutput)
}

// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
func (o DbaasOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *Dbaas) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type DbaasArrayOutput struct{ *pulumi.OutputState }

func (DbaasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dbaas)(nil)).Elem()
}

func (o DbaasArrayOutput) ToDbaasArrayOutput() DbaasArrayOutput {
	return o
}

func (o DbaasArrayOutput) ToDbaasArrayOutputWithContext(ctx context.Context) DbaasArrayOutput {
	return o
}

func (o DbaasArrayOutput) Index(i pulumi.IntInput) DbaasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Dbaas {
		return vs[0].([]*Dbaas)[vs[1].(int)]
	}).(DbaasOutput)
}

type DbaasMapOutput struct{ *pulumi.OutputState }

func (DbaasMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dbaas)(nil)).Elem()
}

func (o DbaasMapOutput) ToDbaasMapOutput() DbaasMapOutput {
	return o
}

func (o DbaasMapOutput) ToDbaasMapOutputWithContext(ctx context.Context) DbaasMapOutput {
	return o
}

func (o DbaasMapOutput) MapIndex(k pulumi.StringInput) DbaasOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Dbaas {
		return vs[0].(map[string]*Dbaas)[vs[1].(string)]
	}).(DbaasOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasInput)(nil)).Elem(), &Dbaas{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasArrayInput)(nil)).Elem(), DbaasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasMapInput)(nil)).Elem(), DbaasMap{})
	pulumi.RegisterOutputType(DbaasOutput{})
	pulumi.RegisterOutputType(DbaasArrayOutput{})
	pulumi.RegisterOutputType(DbaasMapOutput{})
}
