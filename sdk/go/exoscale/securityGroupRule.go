// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

// Manage Exoscale [Security Group](https://community.exoscale.com/product/networking/security-group/) Rules.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mySecurityGroup, err := exoscale.NewSecurityGroup(ctx, "mySecurityGroup", nil)
//			if err != nil {
//				return err
//			}
//			_, err = exoscale.NewSecurityGroupRule(ctx, "mySecurityGroupRule", &exoscale.SecurityGroupRuleArgs{
//				SecurityGroupId: mySecurityGroup.ID(),
//				Type:            pulumi.String("INGRESS"),
//				Protocol:        pulumi.String("TCP"),
//				Cidr:            pulumi.String("0.0.0.0/0"),
//				StartPort:       pulumi.Int(80),
//				EndPort:         pulumi.Int(80),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Please refer to the examples
// directory for complete configuration examples.
//
// ## Import
//
// An existing security group rule may be imported by `<security-group-ID>/<security-group-rule-ID>`:
//
// ```sh
// $ pulumi import exoscale:index/securityGroupRule:SecurityGroupRule \
// ```
//
//	exoscale_security_group_rule.my_security_group_rule \
//
//	f81d4fae-7dec-11d0-a765-00a0c91e6bf6/9ecc6b8b-73d4-4211-8ced-f7f29bb79524
type SecurityGroupRule struct {
	pulumi.CustomResourceState

	// ❗ An (`INGRESS`) source / (`EGRESS`) destination IP subnet (in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)) to match (conflicts with `publicSecurityGroup`/`userSecurityGroup`/`userSecurityGroupId`).
	Cidr pulumi.StringPtrOutput `pulumi:"cidr"`
	// ❗ A free-form text describing the security group rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// ❗ A `TCP`/`UDP` port range to match.
	EndPort pulumi.IntPtrOutput `pulumi:"endPort"`
	// ❗ An ICMP/ICMPv6 [type/code](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) to match.
	IcmpCode pulumi.IntPtrOutput `pulumi:"icmpCode"`
	// ❗ An ICMP/ICMPv6 [type/code](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) to match.
	IcmpType pulumi.IntPtrOutput `pulumi:"icmpType"`
	// ❗ The network protocol to match (`TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` or `ALL`)
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// ❗ An (`INGRESS`) source / (`EGRESS`) destination public security group name to match (conflicts with `cidr`/`userSecurityGroup`/`userSecurityGroupId`).
	PublicSecurityGroup pulumi.StringOutput `pulumi:"publicSecurityGroup"`
	// ❗ The parent security group name. Please use the `securityGroupId` argument along the exoscale*security*group data source instead.
	//
	// Deprecated: Deprecated in favor of `securityGroupId`
	SecurityGroup pulumi.StringOutput `pulumi:"securityGroup"`
	// ❗ The parent exoscale*security*group ID.
	SecurityGroupId pulumi.StringOutput `pulumi:"securityGroupId"`
	// ❗ A `TCP`/`UDP` port range to match.
	StartPort pulumi.IntPtrOutput `pulumi:"startPort"`
	// ❗ The traffic direction to match (`INGRESS` or `EGRESS`).
	Type pulumi.StringOutput `pulumi:"type"`
	// ❗ An (`INGRESS`) source / (`EGRESS`) destination security group name to match (conflicts with `cidr`/`publicSecurityGroup`/`userSecurityGroupId`). Please use the `userSecurityGroupId` argument along the exoscale*security*group data source instead.
	//
	// Deprecated: Deprecated in favor of `userSecurityGroupId`
	UserSecurityGroup pulumi.StringOutput `pulumi:"userSecurityGroup"`
	// ❗ An (`INGRESS`) source / (`EGRESS`) destination security group ID to match (conflicts with `cidr`/`publicSecurityGroup`/`user_security_group)`).
	UserSecurityGroupId pulumi.StringPtrOutput `pulumi:"userSecurityGroupId"`
}

// NewSecurityGroupRule registers a new resource with the given unique name, arguments, and options.
func NewSecurityGroupRule(ctx *pulumi.Context,
	name string, args *SecurityGroupRuleArgs, opts ...pulumi.ResourceOption) (*SecurityGroupRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityGroupRule
	err := ctx.RegisterResource("exoscale:index/securityGroupRule:SecurityGroupRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityGroupRule gets an existing SecurityGroupRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityGroupRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityGroupRuleState, opts ...pulumi.ResourceOption) (*SecurityGroupRule, error) {
	var resource SecurityGroupRule
	err := ctx.ReadResource("exoscale:index/securityGroupRule:SecurityGroupRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityGroupRule resources.
type securityGroupRuleState struct {
	// ❗ An (`INGRESS`) source / (`EGRESS`) destination IP subnet (in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)) to match (conflicts with `publicSecurityGroup`/`userSecurityGroup`/`userSecurityGroupId`).
	Cidr *string `pulumi:"cidr"`
	// ❗ A free-form text describing the security group rule.
	Description *string `pulumi:"description"`
	// ❗ A `TCP`/`UDP` port range to match.
	EndPort *int `pulumi:"endPort"`
	// ❗ An ICMP/ICMPv6 [type/code](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) to match.
	IcmpCode *int `pulumi:"icmpCode"`
	// ❗ An ICMP/ICMPv6 [type/code](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) to match.
	IcmpType *int `pulumi:"icmpType"`
	// ❗ The network protocol to match (`TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` or `ALL`)
	Protocol *string `pulumi:"protocol"`
	// ❗ An (`INGRESS`) source / (`EGRESS`) destination public security group name to match (conflicts with `cidr`/`userSecurityGroup`/`userSecurityGroupId`).
	PublicSecurityGroup *string `pulumi:"publicSecurityGroup"`
	// ❗ The parent security group name. Please use the `securityGroupId` argument along the exoscale*security*group data source instead.
	//
	// Deprecated: Deprecated in favor of `securityGroupId`
	SecurityGroup *string `pulumi:"securityGroup"`
	// ❗ The parent exoscale*security*group ID.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// ❗ A `TCP`/`UDP` port range to match.
	StartPort *int `pulumi:"startPort"`
	// ❗ The traffic direction to match (`INGRESS` or `EGRESS`).
	Type *string `pulumi:"type"`
	// ❗ An (`INGRESS`) source / (`EGRESS`) destination security group name to match (conflicts with `cidr`/`publicSecurityGroup`/`userSecurityGroupId`). Please use the `userSecurityGroupId` argument along the exoscale*security*group data source instead.
	//
	// Deprecated: Deprecated in favor of `userSecurityGroupId`
	UserSecurityGroup *string `pulumi:"userSecurityGroup"`
	// ❗ An (`INGRESS`) source / (`EGRESS`) destination security group ID to match (conflicts with `cidr`/`publicSecurityGroup`/`user_security_group)`).
	UserSecurityGroupId *string `pulumi:"userSecurityGroupId"`
}

type SecurityGroupRuleState struct {
	// ❗ An (`INGRESS`) source / (`EGRESS`) destination IP subnet (in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)) to match (conflicts with `publicSecurityGroup`/`userSecurityGroup`/`userSecurityGroupId`).
	Cidr pulumi.StringPtrInput
	// ❗ A free-form text describing the security group rule.
	Description pulumi.StringPtrInput
	// ❗ A `TCP`/`UDP` port range to match.
	EndPort pulumi.IntPtrInput
	// ❗ An ICMP/ICMPv6 [type/code](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) to match.
	IcmpCode pulumi.IntPtrInput
	// ❗ An ICMP/ICMPv6 [type/code](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) to match.
	IcmpType pulumi.IntPtrInput
	// ❗ The network protocol to match (`TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` or `ALL`)
	Protocol pulumi.StringPtrInput
	// ❗ An (`INGRESS`) source / (`EGRESS`) destination public security group name to match (conflicts with `cidr`/`userSecurityGroup`/`userSecurityGroupId`).
	PublicSecurityGroup pulumi.StringPtrInput
	// ❗ The parent security group name. Please use the `securityGroupId` argument along the exoscale*security*group data source instead.
	//
	// Deprecated: Deprecated in favor of `securityGroupId`
	SecurityGroup pulumi.StringPtrInput
	// ❗ The parent exoscale*security*group ID.
	SecurityGroupId pulumi.StringPtrInput
	// ❗ A `TCP`/`UDP` port range to match.
	StartPort pulumi.IntPtrInput
	// ❗ The traffic direction to match (`INGRESS` or `EGRESS`).
	Type pulumi.StringPtrInput
	// ❗ An (`INGRESS`) source / (`EGRESS`) destination security group name to match (conflicts with `cidr`/`publicSecurityGroup`/`userSecurityGroupId`). Please use the `userSecurityGroupId` argument along the exoscale*security*group data source instead.
	//
	// Deprecated: Deprecated in favor of `userSecurityGroupId`
	UserSecurityGroup pulumi.StringPtrInput
	// ❗ An (`INGRESS`) source / (`EGRESS`) destination security group ID to match (conflicts with `cidr`/`publicSecurityGroup`/`user_security_group)`).
	UserSecurityGroupId pulumi.StringPtrInput
}

func (SecurityGroupRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupRuleState)(nil)).Elem()
}

type securityGroupRuleArgs struct {
	// ❗ An (`INGRESS`) source / (`EGRESS`) destination IP subnet (in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)) to match (conflicts with `publicSecurityGroup`/`userSecurityGroup`/`userSecurityGroupId`).
	Cidr *string `pulumi:"cidr"`
	// ❗ A free-form text describing the security group rule.
	Description *string `pulumi:"description"`
	// ❗ A `TCP`/`UDP` port range to match.
	EndPort *int `pulumi:"endPort"`
	// ❗ An ICMP/ICMPv6 [type/code](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) to match.
	IcmpCode *int `pulumi:"icmpCode"`
	// ❗ An ICMP/ICMPv6 [type/code](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) to match.
	IcmpType *int `pulumi:"icmpType"`
	// ❗ The network protocol to match (`TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` or `ALL`)
	Protocol *string `pulumi:"protocol"`
	// ❗ An (`INGRESS`) source / (`EGRESS`) destination public security group name to match (conflicts with `cidr`/`userSecurityGroup`/`userSecurityGroupId`).
	PublicSecurityGroup *string `pulumi:"publicSecurityGroup"`
	// ❗ The parent security group name. Please use the `securityGroupId` argument along the exoscale*security*group data source instead.
	//
	// Deprecated: Deprecated in favor of `securityGroupId`
	SecurityGroup *string `pulumi:"securityGroup"`
	// ❗ The parent exoscale*security*group ID.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// ❗ A `TCP`/`UDP` port range to match.
	StartPort *int `pulumi:"startPort"`
	// ❗ The traffic direction to match (`INGRESS` or `EGRESS`).
	Type string `pulumi:"type"`
	// ❗ An (`INGRESS`) source / (`EGRESS`) destination security group name to match (conflicts with `cidr`/`publicSecurityGroup`/`userSecurityGroupId`). Please use the `userSecurityGroupId` argument along the exoscale*security*group data source instead.
	//
	// Deprecated: Deprecated in favor of `userSecurityGroupId`
	UserSecurityGroup *string `pulumi:"userSecurityGroup"`
	// ❗ An (`INGRESS`) source / (`EGRESS`) destination security group ID to match (conflicts with `cidr`/`publicSecurityGroup`/`user_security_group)`).
	UserSecurityGroupId *string `pulumi:"userSecurityGroupId"`
}

// The set of arguments for constructing a SecurityGroupRule resource.
type SecurityGroupRuleArgs struct {
	// ❗ An (`INGRESS`) source / (`EGRESS`) destination IP subnet (in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)) to match (conflicts with `publicSecurityGroup`/`userSecurityGroup`/`userSecurityGroupId`).
	Cidr pulumi.StringPtrInput
	// ❗ A free-form text describing the security group rule.
	Description pulumi.StringPtrInput
	// ❗ A `TCP`/`UDP` port range to match.
	EndPort pulumi.IntPtrInput
	// ❗ An ICMP/ICMPv6 [type/code](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) to match.
	IcmpCode pulumi.IntPtrInput
	// ❗ An ICMP/ICMPv6 [type/code](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) to match.
	IcmpType pulumi.IntPtrInput
	// ❗ The network protocol to match (`TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` or `ALL`)
	Protocol pulumi.StringPtrInput
	// ❗ An (`INGRESS`) source / (`EGRESS`) destination public security group name to match (conflicts with `cidr`/`userSecurityGroup`/`userSecurityGroupId`).
	PublicSecurityGroup pulumi.StringPtrInput
	// ❗ The parent security group name. Please use the `securityGroupId` argument along the exoscale*security*group data source instead.
	//
	// Deprecated: Deprecated in favor of `securityGroupId`
	SecurityGroup pulumi.StringPtrInput
	// ❗ The parent exoscale*security*group ID.
	SecurityGroupId pulumi.StringPtrInput
	// ❗ A `TCP`/`UDP` port range to match.
	StartPort pulumi.IntPtrInput
	// ❗ The traffic direction to match (`INGRESS` or `EGRESS`).
	Type pulumi.StringInput
	// ❗ An (`INGRESS`) source / (`EGRESS`) destination security group name to match (conflicts with `cidr`/`publicSecurityGroup`/`userSecurityGroupId`). Please use the `userSecurityGroupId` argument along the exoscale*security*group data source instead.
	//
	// Deprecated: Deprecated in favor of `userSecurityGroupId`
	UserSecurityGroup pulumi.StringPtrInput
	// ❗ An (`INGRESS`) source / (`EGRESS`) destination security group ID to match (conflicts with `cidr`/`publicSecurityGroup`/`user_security_group)`).
	UserSecurityGroupId pulumi.StringPtrInput
}

func (SecurityGroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupRuleArgs)(nil)).Elem()
}

type SecurityGroupRuleInput interface {
	pulumi.Input

	ToSecurityGroupRuleOutput() SecurityGroupRuleOutput
	ToSecurityGroupRuleOutputWithContext(ctx context.Context) SecurityGroupRuleOutput
}

func (*SecurityGroupRule) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupRule)(nil)).Elem()
}

func (i *SecurityGroupRule) ToSecurityGroupRuleOutput() SecurityGroupRuleOutput {
	return i.ToSecurityGroupRuleOutputWithContext(context.Background())
}

func (i *SecurityGroupRule) ToSecurityGroupRuleOutputWithContext(ctx context.Context) SecurityGroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRuleOutput)
}

// SecurityGroupRuleArrayInput is an input type that accepts SecurityGroupRuleArray and SecurityGroupRuleArrayOutput values.
// You can construct a concrete instance of `SecurityGroupRuleArrayInput` via:
//
//	SecurityGroupRuleArray{ SecurityGroupRuleArgs{...} }
type SecurityGroupRuleArrayInput interface {
	pulumi.Input

	ToSecurityGroupRuleArrayOutput() SecurityGroupRuleArrayOutput
	ToSecurityGroupRuleArrayOutputWithContext(context.Context) SecurityGroupRuleArrayOutput
}

type SecurityGroupRuleArray []SecurityGroupRuleInput

func (SecurityGroupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityGroupRule)(nil)).Elem()
}

func (i SecurityGroupRuleArray) ToSecurityGroupRuleArrayOutput() SecurityGroupRuleArrayOutput {
	return i.ToSecurityGroupRuleArrayOutputWithContext(context.Background())
}

func (i SecurityGroupRuleArray) ToSecurityGroupRuleArrayOutputWithContext(ctx context.Context) SecurityGroupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRuleArrayOutput)
}

// SecurityGroupRuleMapInput is an input type that accepts SecurityGroupRuleMap and SecurityGroupRuleMapOutput values.
// You can construct a concrete instance of `SecurityGroupRuleMapInput` via:
//
//	SecurityGroupRuleMap{ "key": SecurityGroupRuleArgs{...} }
type SecurityGroupRuleMapInput interface {
	pulumi.Input

	ToSecurityGroupRuleMapOutput() SecurityGroupRuleMapOutput
	ToSecurityGroupRuleMapOutputWithContext(context.Context) SecurityGroupRuleMapOutput
}

type SecurityGroupRuleMap map[string]SecurityGroupRuleInput

func (SecurityGroupRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityGroupRule)(nil)).Elem()
}

func (i SecurityGroupRuleMap) ToSecurityGroupRuleMapOutput() SecurityGroupRuleMapOutput {
	return i.ToSecurityGroupRuleMapOutputWithContext(context.Background())
}

func (i SecurityGroupRuleMap) ToSecurityGroupRuleMapOutputWithContext(ctx context.Context) SecurityGroupRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRuleMapOutput)
}

type SecurityGroupRuleOutput struct{ *pulumi.OutputState }

func (SecurityGroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupRule)(nil)).Elem()
}

func (o SecurityGroupRuleOutput) ToSecurityGroupRuleOutput() SecurityGroupRuleOutput {
	return o
}

func (o SecurityGroupRuleOutput) ToSecurityGroupRuleOutputWithContext(ctx context.Context) SecurityGroupRuleOutput {
	return o
}

// ❗ An (`INGRESS`) source / (`EGRESS`) destination IP subnet (in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)) to match (conflicts with `publicSecurityGroup`/`userSecurityGroup`/`userSecurityGroupId`).
func (o SecurityGroupRuleOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.StringPtrOutput { return v.Cidr }).(pulumi.StringPtrOutput)
}

// ❗ A free-form text describing the security group rule.
func (o SecurityGroupRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// ❗ A `TCP`/`UDP` port range to match.
func (o SecurityGroupRuleOutput) EndPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.IntPtrOutput { return v.EndPort }).(pulumi.IntPtrOutput)
}

// ❗ An ICMP/ICMPv6 [type/code](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) to match.
func (o SecurityGroupRuleOutput) IcmpCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.IntPtrOutput { return v.IcmpCode }).(pulumi.IntPtrOutput)
}

// ❗ An ICMP/ICMPv6 [type/code](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) to match.
func (o SecurityGroupRuleOutput) IcmpType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.IntPtrOutput { return v.IcmpType }).(pulumi.IntPtrOutput)
}

// ❗ The network protocol to match (`TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` or `ALL`)
func (o SecurityGroupRuleOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.StringPtrOutput { return v.Protocol }).(pulumi.StringPtrOutput)
}

// ❗ An (`INGRESS`) source / (`EGRESS`) destination public security group name to match (conflicts with `cidr`/`userSecurityGroup`/`userSecurityGroupId`).
func (o SecurityGroupRuleOutput) PublicSecurityGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.StringOutput { return v.PublicSecurityGroup }).(pulumi.StringOutput)
}

// ❗ The parent security group name. Please use the `securityGroupId` argument along the exoscale*security*group data source instead.
//
// Deprecated: Deprecated in favor of `securityGroupId`
func (o SecurityGroupRuleOutput) SecurityGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.StringOutput { return v.SecurityGroup }).(pulumi.StringOutput)
}

// ❗ The parent exoscale*security*group ID.
func (o SecurityGroupRuleOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// ❗ A `TCP`/`UDP` port range to match.
func (o SecurityGroupRuleOutput) StartPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.IntPtrOutput { return v.StartPort }).(pulumi.IntPtrOutput)
}

// ❗ The traffic direction to match (`INGRESS` or `EGRESS`).
func (o SecurityGroupRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// ❗ An (`INGRESS`) source / (`EGRESS`) destination security group name to match (conflicts with `cidr`/`publicSecurityGroup`/`userSecurityGroupId`). Please use the `userSecurityGroupId` argument along the exoscale*security*group data source instead.
//
// Deprecated: Deprecated in favor of `userSecurityGroupId`
func (o SecurityGroupRuleOutput) UserSecurityGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.StringOutput { return v.UserSecurityGroup }).(pulumi.StringOutput)
}

// ❗ An (`INGRESS`) source / (`EGRESS`) destination security group ID to match (conflicts with `cidr`/`publicSecurityGroup`/`user_security_group)`).
func (o SecurityGroupRuleOutput) UserSecurityGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.StringPtrOutput { return v.UserSecurityGroupId }).(pulumi.StringPtrOutput)
}

type SecurityGroupRuleArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityGroupRule)(nil)).Elem()
}

func (o SecurityGroupRuleArrayOutput) ToSecurityGroupRuleArrayOutput() SecurityGroupRuleArrayOutput {
	return o
}

func (o SecurityGroupRuleArrayOutput) ToSecurityGroupRuleArrayOutputWithContext(ctx context.Context) SecurityGroupRuleArrayOutput {
	return o
}

func (o SecurityGroupRuleArrayOutput) Index(i pulumi.IntInput) SecurityGroupRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityGroupRule {
		return vs[0].([]*SecurityGroupRule)[vs[1].(int)]
	}).(SecurityGroupRuleOutput)
}

type SecurityGroupRuleMapOutput struct{ *pulumi.OutputState }

func (SecurityGroupRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityGroupRule)(nil)).Elem()
}

func (o SecurityGroupRuleMapOutput) ToSecurityGroupRuleMapOutput() SecurityGroupRuleMapOutput {
	return o
}

func (o SecurityGroupRuleMapOutput) ToSecurityGroupRuleMapOutputWithContext(ctx context.Context) SecurityGroupRuleMapOutput {
	return o
}

func (o SecurityGroupRuleMapOutput) MapIndex(k pulumi.StringInput) SecurityGroupRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityGroupRule {
		return vs[0].(map[string]*SecurityGroupRule)[vs[1].(string)]
	}).(SecurityGroupRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRuleInput)(nil)).Elem(), &SecurityGroupRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRuleArrayInput)(nil)).Elem(), SecurityGroupRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRuleMapInput)(nil)).Elem(), SecurityGroupRuleMap{})
	pulumi.RegisterOutputType(SecurityGroupRuleOutput{})
	pulumi.RegisterOutputType(SecurityGroupRuleArrayOutput{})
	pulumi.RegisterOutputType(SecurityGroupRuleMapOutput{})
}
