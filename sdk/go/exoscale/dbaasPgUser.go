// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

// ❗ Manage service users for a PostgreSQL Exoscale [Database Services (DBaaS)](https://community.exoscale.com/documentation/dbaas/).
type DbaasPgUser struct {
	pulumi.CustomResourceState

	// Allows replication
	AllowReplication pulumi.BoolOutput `pulumi:"allowReplication"`
	// The password of the service user.
	Password pulumi.StringOutput `pulumi:"password"`
	// ❗ The name of the database service.
	Service  pulumi.StringOutput          `pulumi:"service"`
	Timeouts DbaasPgUserTimeoutsPtrOutput `pulumi:"timeouts"`
	// The type of the service user.
	Type pulumi.StringOutput `pulumi:"type"`
	// ❗ The name of the user for this service.
	Username pulumi.StringOutput `pulumi:"username"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewDbaasPgUser registers a new resource with the given unique name, arguments, and options.
func NewDbaasPgUser(ctx *pulumi.Context,
	name string, args *DbaasPgUserArgs, opts ...pulumi.ResourceOption) (*DbaasPgUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DbaasPgUser
	err := ctx.RegisterResource("exoscale:index/dbaasPgUser:DbaasPgUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbaasPgUser gets an existing DbaasPgUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbaasPgUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbaasPgUserState, opts ...pulumi.ResourceOption) (*DbaasPgUser, error) {
	var resource DbaasPgUser
	err := ctx.ReadResource("exoscale:index/dbaasPgUser:DbaasPgUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbaasPgUser resources.
type dbaasPgUserState struct {
	// Allows replication
	AllowReplication *bool `pulumi:"allowReplication"`
	// The password of the service user.
	Password *string `pulumi:"password"`
	// ❗ The name of the database service.
	Service  *string              `pulumi:"service"`
	Timeouts *DbaasPgUserTimeouts `pulumi:"timeouts"`
	// The type of the service user.
	Type *string `pulumi:"type"`
	// ❗ The name of the user for this service.
	Username *string `pulumi:"username"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone *string `pulumi:"zone"`
}

type DbaasPgUserState struct {
	// Allows replication
	AllowReplication pulumi.BoolPtrInput
	// The password of the service user.
	Password pulumi.StringPtrInput
	// ❗ The name of the database service.
	Service  pulumi.StringPtrInput
	Timeouts DbaasPgUserTimeoutsPtrInput
	// The type of the service user.
	Type pulumi.StringPtrInput
	// ❗ The name of the user for this service.
	Username pulumi.StringPtrInput
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringPtrInput
}

func (DbaasPgUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbaasPgUserState)(nil)).Elem()
}

type dbaasPgUserArgs struct {
	// Allows replication
	AllowReplication *bool `pulumi:"allowReplication"`
	// ❗ The name of the database service.
	Service  string               `pulumi:"service"`
	Timeouts *DbaasPgUserTimeouts `pulumi:"timeouts"`
	// ❗ The name of the user for this service.
	Username string `pulumi:"username"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a DbaasPgUser resource.
type DbaasPgUserArgs struct {
	// Allows replication
	AllowReplication pulumi.BoolPtrInput
	// ❗ The name of the database service.
	Service  pulumi.StringInput
	Timeouts DbaasPgUserTimeoutsPtrInput
	// ❗ The name of the user for this service.
	Username pulumi.StringInput
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringInput
}

func (DbaasPgUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbaasPgUserArgs)(nil)).Elem()
}

type DbaasPgUserInput interface {
	pulumi.Input

	ToDbaasPgUserOutput() DbaasPgUserOutput
	ToDbaasPgUserOutputWithContext(ctx context.Context) DbaasPgUserOutput
}

func (*DbaasPgUser) ElementType() reflect.Type {
	return reflect.TypeOf((**DbaasPgUser)(nil)).Elem()
}

func (i *DbaasPgUser) ToDbaasPgUserOutput() DbaasPgUserOutput {
	return i.ToDbaasPgUserOutputWithContext(context.Background())
}

func (i *DbaasPgUser) ToDbaasPgUserOutputWithContext(ctx context.Context) DbaasPgUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasPgUserOutput)
}

// DbaasPgUserArrayInput is an input type that accepts DbaasPgUserArray and DbaasPgUserArrayOutput values.
// You can construct a concrete instance of `DbaasPgUserArrayInput` via:
//
//	DbaasPgUserArray{ DbaasPgUserArgs{...} }
type DbaasPgUserArrayInput interface {
	pulumi.Input

	ToDbaasPgUserArrayOutput() DbaasPgUserArrayOutput
	ToDbaasPgUserArrayOutputWithContext(context.Context) DbaasPgUserArrayOutput
}

type DbaasPgUserArray []DbaasPgUserInput

func (DbaasPgUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbaasPgUser)(nil)).Elem()
}

func (i DbaasPgUserArray) ToDbaasPgUserArrayOutput() DbaasPgUserArrayOutput {
	return i.ToDbaasPgUserArrayOutputWithContext(context.Background())
}

func (i DbaasPgUserArray) ToDbaasPgUserArrayOutputWithContext(ctx context.Context) DbaasPgUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasPgUserArrayOutput)
}

// DbaasPgUserMapInput is an input type that accepts DbaasPgUserMap and DbaasPgUserMapOutput values.
// You can construct a concrete instance of `DbaasPgUserMapInput` via:
//
//	DbaasPgUserMap{ "key": DbaasPgUserArgs{...} }
type DbaasPgUserMapInput interface {
	pulumi.Input

	ToDbaasPgUserMapOutput() DbaasPgUserMapOutput
	ToDbaasPgUserMapOutputWithContext(context.Context) DbaasPgUserMapOutput
}

type DbaasPgUserMap map[string]DbaasPgUserInput

func (DbaasPgUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbaasPgUser)(nil)).Elem()
}

func (i DbaasPgUserMap) ToDbaasPgUserMapOutput() DbaasPgUserMapOutput {
	return i.ToDbaasPgUserMapOutputWithContext(context.Background())
}

func (i DbaasPgUserMap) ToDbaasPgUserMapOutputWithContext(ctx context.Context) DbaasPgUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasPgUserMapOutput)
}

type DbaasPgUserOutput struct{ *pulumi.OutputState }

func (DbaasPgUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbaasPgUser)(nil)).Elem()
}

func (o DbaasPgUserOutput) ToDbaasPgUserOutput() DbaasPgUserOutput {
	return o
}

func (o DbaasPgUserOutput) ToDbaasPgUserOutputWithContext(ctx context.Context) DbaasPgUserOutput {
	return o
}

// Allows replication
func (o DbaasPgUserOutput) AllowReplication() pulumi.BoolOutput {
	return o.ApplyT(func(v *DbaasPgUser) pulumi.BoolOutput { return v.AllowReplication }).(pulumi.BoolOutput)
}

// The password of the service user.
func (o DbaasPgUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasPgUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// ❗ The name of the database service.
func (o DbaasPgUserOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasPgUser) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

func (o DbaasPgUserOutput) Timeouts() DbaasPgUserTimeoutsPtrOutput {
	return o.ApplyT(func(v *DbaasPgUser) DbaasPgUserTimeoutsPtrOutput { return v.Timeouts }).(DbaasPgUserTimeoutsPtrOutput)
}

// The type of the service user.
func (o DbaasPgUserOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasPgUser) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// ❗ The name of the user for this service.
func (o DbaasPgUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasPgUser) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
func (o DbaasPgUserOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasPgUser) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type DbaasPgUserArrayOutput struct{ *pulumi.OutputState }

func (DbaasPgUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbaasPgUser)(nil)).Elem()
}

func (o DbaasPgUserArrayOutput) ToDbaasPgUserArrayOutput() DbaasPgUserArrayOutput {
	return o
}

func (o DbaasPgUserArrayOutput) ToDbaasPgUserArrayOutputWithContext(ctx context.Context) DbaasPgUserArrayOutput {
	return o
}

func (o DbaasPgUserArrayOutput) Index(i pulumi.IntInput) DbaasPgUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DbaasPgUser {
		return vs[0].([]*DbaasPgUser)[vs[1].(int)]
	}).(DbaasPgUserOutput)
}

type DbaasPgUserMapOutput struct{ *pulumi.OutputState }

func (DbaasPgUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbaasPgUser)(nil)).Elem()
}

func (o DbaasPgUserMapOutput) ToDbaasPgUserMapOutput() DbaasPgUserMapOutput {
	return o
}

func (o DbaasPgUserMapOutput) ToDbaasPgUserMapOutputWithContext(ctx context.Context) DbaasPgUserMapOutput {
	return o
}

func (o DbaasPgUserMapOutput) MapIndex(k pulumi.StringInput) DbaasPgUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DbaasPgUser {
		return vs[0].(map[string]*DbaasPgUser)[vs[1].(string)]
	}).(DbaasPgUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasPgUserInput)(nil)).Elem(), &DbaasPgUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasPgUserArrayInput)(nil)).Elem(), DbaasPgUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasPgUserMapInput)(nil)).Elem(), DbaasPgUserMap{})
	pulumi.RegisterOutputType(DbaasPgUserOutput{})
	pulumi.RegisterOutputType(DbaasPgUserArrayOutput{})
	pulumi.RegisterOutputType(DbaasPgUserMapOutput{})
}
