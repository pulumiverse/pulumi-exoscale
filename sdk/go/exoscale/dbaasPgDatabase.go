// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

// ❗ Manage service database for a PostgreSQL Exoscale [Database Services (DBaaS)](https://community.exoscale.com/documentation/dbaas/).
type DbaasPgDatabase struct {
	pulumi.CustomResourceState

	// ❗ The name of the database for this service.
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// Default string sort order (LC_COLLATE) for PostgreSQL database
	LcCollate pulumi.StringPtrOutput `pulumi:"lcCollate"`
	// Default character classification (LC_CTYPE) for PostgreSQL database
	LcCtype pulumi.StringPtrOutput `pulumi:"lcCtype"`
	// ❗ The name of the database service.
	Service  pulumi.StringOutput              `pulumi:"service"`
	Timeouts DbaasPgDatabaseTimeoutsPtrOutput `pulumi:"timeouts"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewDbaasPgDatabase registers a new resource with the given unique name, arguments, and options.
func NewDbaasPgDatabase(ctx *pulumi.Context,
	name string, args *DbaasPgDatabaseArgs, opts ...pulumi.ResourceOption) (*DbaasPgDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DbaasPgDatabase
	err := ctx.RegisterResource("exoscale:index/dbaasPgDatabase:DbaasPgDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbaasPgDatabase gets an existing DbaasPgDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbaasPgDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbaasPgDatabaseState, opts ...pulumi.ResourceOption) (*DbaasPgDatabase, error) {
	var resource DbaasPgDatabase
	err := ctx.ReadResource("exoscale:index/dbaasPgDatabase:DbaasPgDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbaasPgDatabase resources.
type dbaasPgDatabaseState struct {
	// ❗ The name of the database for this service.
	DatabaseName *string `pulumi:"databaseName"`
	// Default string sort order (LC_COLLATE) for PostgreSQL database
	LcCollate *string `pulumi:"lcCollate"`
	// Default character classification (LC_CTYPE) for PostgreSQL database
	LcCtype *string `pulumi:"lcCtype"`
	// ❗ The name of the database service.
	Service  *string                  `pulumi:"service"`
	Timeouts *DbaasPgDatabaseTimeouts `pulumi:"timeouts"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone *string `pulumi:"zone"`
}

type DbaasPgDatabaseState struct {
	// ❗ The name of the database for this service.
	DatabaseName pulumi.StringPtrInput
	// Default string sort order (LC_COLLATE) for PostgreSQL database
	LcCollate pulumi.StringPtrInput
	// Default character classification (LC_CTYPE) for PostgreSQL database
	LcCtype pulumi.StringPtrInput
	// ❗ The name of the database service.
	Service  pulumi.StringPtrInput
	Timeouts DbaasPgDatabaseTimeoutsPtrInput
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringPtrInput
}

func (DbaasPgDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbaasPgDatabaseState)(nil)).Elem()
}

type dbaasPgDatabaseArgs struct {
	// ❗ The name of the database for this service.
	DatabaseName string `pulumi:"databaseName"`
	// Default string sort order (LC_COLLATE) for PostgreSQL database
	LcCollate *string `pulumi:"lcCollate"`
	// Default character classification (LC_CTYPE) for PostgreSQL database
	LcCtype *string `pulumi:"lcCtype"`
	// ❗ The name of the database service.
	Service  string                   `pulumi:"service"`
	Timeouts *DbaasPgDatabaseTimeouts `pulumi:"timeouts"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a DbaasPgDatabase resource.
type DbaasPgDatabaseArgs struct {
	// ❗ The name of the database for this service.
	DatabaseName pulumi.StringInput
	// Default string sort order (LC_COLLATE) for PostgreSQL database
	LcCollate pulumi.StringPtrInput
	// Default character classification (LC_CTYPE) for PostgreSQL database
	LcCtype pulumi.StringPtrInput
	// ❗ The name of the database service.
	Service  pulumi.StringInput
	Timeouts DbaasPgDatabaseTimeoutsPtrInput
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringInput
}

func (DbaasPgDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbaasPgDatabaseArgs)(nil)).Elem()
}

type DbaasPgDatabaseInput interface {
	pulumi.Input

	ToDbaasPgDatabaseOutput() DbaasPgDatabaseOutput
	ToDbaasPgDatabaseOutputWithContext(ctx context.Context) DbaasPgDatabaseOutput
}

func (*DbaasPgDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**DbaasPgDatabase)(nil)).Elem()
}

func (i *DbaasPgDatabase) ToDbaasPgDatabaseOutput() DbaasPgDatabaseOutput {
	return i.ToDbaasPgDatabaseOutputWithContext(context.Background())
}

func (i *DbaasPgDatabase) ToDbaasPgDatabaseOutputWithContext(ctx context.Context) DbaasPgDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasPgDatabaseOutput)
}

// DbaasPgDatabaseArrayInput is an input type that accepts DbaasPgDatabaseArray and DbaasPgDatabaseArrayOutput values.
// You can construct a concrete instance of `DbaasPgDatabaseArrayInput` via:
//
//	DbaasPgDatabaseArray{ DbaasPgDatabaseArgs{...} }
type DbaasPgDatabaseArrayInput interface {
	pulumi.Input

	ToDbaasPgDatabaseArrayOutput() DbaasPgDatabaseArrayOutput
	ToDbaasPgDatabaseArrayOutputWithContext(context.Context) DbaasPgDatabaseArrayOutput
}

type DbaasPgDatabaseArray []DbaasPgDatabaseInput

func (DbaasPgDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbaasPgDatabase)(nil)).Elem()
}

func (i DbaasPgDatabaseArray) ToDbaasPgDatabaseArrayOutput() DbaasPgDatabaseArrayOutput {
	return i.ToDbaasPgDatabaseArrayOutputWithContext(context.Background())
}

func (i DbaasPgDatabaseArray) ToDbaasPgDatabaseArrayOutputWithContext(ctx context.Context) DbaasPgDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasPgDatabaseArrayOutput)
}

// DbaasPgDatabaseMapInput is an input type that accepts DbaasPgDatabaseMap and DbaasPgDatabaseMapOutput values.
// You can construct a concrete instance of `DbaasPgDatabaseMapInput` via:
//
//	DbaasPgDatabaseMap{ "key": DbaasPgDatabaseArgs{...} }
type DbaasPgDatabaseMapInput interface {
	pulumi.Input

	ToDbaasPgDatabaseMapOutput() DbaasPgDatabaseMapOutput
	ToDbaasPgDatabaseMapOutputWithContext(context.Context) DbaasPgDatabaseMapOutput
}

type DbaasPgDatabaseMap map[string]DbaasPgDatabaseInput

func (DbaasPgDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbaasPgDatabase)(nil)).Elem()
}

func (i DbaasPgDatabaseMap) ToDbaasPgDatabaseMapOutput() DbaasPgDatabaseMapOutput {
	return i.ToDbaasPgDatabaseMapOutputWithContext(context.Background())
}

func (i DbaasPgDatabaseMap) ToDbaasPgDatabaseMapOutputWithContext(ctx context.Context) DbaasPgDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasPgDatabaseMapOutput)
}

type DbaasPgDatabaseOutput struct{ *pulumi.OutputState }

func (DbaasPgDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbaasPgDatabase)(nil)).Elem()
}

func (o DbaasPgDatabaseOutput) ToDbaasPgDatabaseOutput() DbaasPgDatabaseOutput {
	return o
}

func (o DbaasPgDatabaseOutput) ToDbaasPgDatabaseOutputWithContext(ctx context.Context) DbaasPgDatabaseOutput {
	return o
}

// ❗ The name of the database for this service.
func (o DbaasPgDatabaseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasPgDatabase) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

// Default string sort order (LC_COLLATE) for PostgreSQL database
func (o DbaasPgDatabaseOutput) LcCollate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbaasPgDatabase) pulumi.StringPtrOutput { return v.LcCollate }).(pulumi.StringPtrOutput)
}

// Default character classification (LC_CTYPE) for PostgreSQL database
func (o DbaasPgDatabaseOutput) LcCtype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbaasPgDatabase) pulumi.StringPtrOutput { return v.LcCtype }).(pulumi.StringPtrOutput)
}

// ❗ The name of the database service.
func (o DbaasPgDatabaseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasPgDatabase) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

func (o DbaasPgDatabaseOutput) Timeouts() DbaasPgDatabaseTimeoutsPtrOutput {
	return o.ApplyT(func(v *DbaasPgDatabase) DbaasPgDatabaseTimeoutsPtrOutput { return v.Timeouts }).(DbaasPgDatabaseTimeoutsPtrOutput)
}

// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
func (o DbaasPgDatabaseOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasPgDatabase) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type DbaasPgDatabaseArrayOutput struct{ *pulumi.OutputState }

func (DbaasPgDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbaasPgDatabase)(nil)).Elem()
}

func (o DbaasPgDatabaseArrayOutput) ToDbaasPgDatabaseArrayOutput() DbaasPgDatabaseArrayOutput {
	return o
}

func (o DbaasPgDatabaseArrayOutput) ToDbaasPgDatabaseArrayOutputWithContext(ctx context.Context) DbaasPgDatabaseArrayOutput {
	return o
}

func (o DbaasPgDatabaseArrayOutput) Index(i pulumi.IntInput) DbaasPgDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DbaasPgDatabase {
		return vs[0].([]*DbaasPgDatabase)[vs[1].(int)]
	}).(DbaasPgDatabaseOutput)
}

type DbaasPgDatabaseMapOutput struct{ *pulumi.OutputState }

func (DbaasPgDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbaasPgDatabase)(nil)).Elem()
}

func (o DbaasPgDatabaseMapOutput) ToDbaasPgDatabaseMapOutput() DbaasPgDatabaseMapOutput {
	return o
}

func (o DbaasPgDatabaseMapOutput) ToDbaasPgDatabaseMapOutputWithContext(ctx context.Context) DbaasPgDatabaseMapOutput {
	return o
}

func (o DbaasPgDatabaseMapOutput) MapIndex(k pulumi.StringInput) DbaasPgDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DbaasPgDatabase {
		return vs[0].(map[string]*DbaasPgDatabase)[vs[1].(string)]
	}).(DbaasPgDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasPgDatabaseInput)(nil)).Elem(), &DbaasPgDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasPgDatabaseArrayInput)(nil)).Elem(), DbaasPgDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasPgDatabaseMapInput)(nil)).Elem(), DbaasPgDatabaseMap{})
	pulumi.RegisterOutputType(DbaasPgDatabaseOutput{})
	pulumi.RegisterOutputType(DbaasPgDatabaseArrayOutput{})
	pulumi.RegisterOutputType(DbaasPgDatabaseMapOutput{})
}
