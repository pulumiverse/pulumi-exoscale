// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

// Manage Exoscale [Anti-Affinity Groups](https://community.exoscale.com/product/compute/instances/how-to/anti-affinity/).
//
// Corresponding data source: exoscale_anti_affinity_group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := exoscale.NewAntiAffinityGroup(ctx, "myAntiAffinityGroup", &exoscale.AntiAffinityGroupArgs{
//				Description: pulumi.String("Prevent compute instances to run on the same host"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Please refer to the examples
// directory for complete configuration examples.
//
// ## Import
//
// An existing anti-affinity group may be imported by `<ID>`:
//
// ```sh
// $ pulumi import exoscale:index/antiAffinityGroup:AntiAffinityGroup \
// ```
//
//	exoscale_anti_affinity_group.my_anti_affinity_group \
//
//	f81d4fae-7dec-11d0-a765-00a0c91e6bf6
type AntiAffinityGroup struct {
	pulumi.CustomResourceState

	// ❗ A free-form text describing the group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// ❗ The anti-affinity group name.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAntiAffinityGroup registers a new resource with the given unique name, arguments, and options.
func NewAntiAffinityGroup(ctx *pulumi.Context,
	name string, args *AntiAffinityGroupArgs, opts ...pulumi.ResourceOption) (*AntiAffinityGroup, error) {
	if args == nil {
		args = &AntiAffinityGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AntiAffinityGroup
	err := ctx.RegisterResource("exoscale:index/antiAffinityGroup:AntiAffinityGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAntiAffinityGroup gets an existing AntiAffinityGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAntiAffinityGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AntiAffinityGroupState, opts ...pulumi.ResourceOption) (*AntiAffinityGroup, error) {
	var resource AntiAffinityGroup
	err := ctx.ReadResource("exoscale:index/antiAffinityGroup:AntiAffinityGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AntiAffinityGroup resources.
type antiAffinityGroupState struct {
	// ❗ A free-form text describing the group.
	Description *string `pulumi:"description"`
	// ❗ The anti-affinity group name.
	Name *string `pulumi:"name"`
}

type AntiAffinityGroupState struct {
	// ❗ A free-form text describing the group.
	Description pulumi.StringPtrInput
	// ❗ The anti-affinity group name.
	Name pulumi.StringPtrInput
}

func (AntiAffinityGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*antiAffinityGroupState)(nil)).Elem()
}

type antiAffinityGroupArgs struct {
	// ❗ A free-form text describing the group.
	Description *string `pulumi:"description"`
	// ❗ The anti-affinity group name.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AntiAffinityGroup resource.
type AntiAffinityGroupArgs struct {
	// ❗ A free-form text describing the group.
	Description pulumi.StringPtrInput
	// ❗ The anti-affinity group name.
	Name pulumi.StringPtrInput
}

func (AntiAffinityGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*antiAffinityGroupArgs)(nil)).Elem()
}

type AntiAffinityGroupInput interface {
	pulumi.Input

	ToAntiAffinityGroupOutput() AntiAffinityGroupOutput
	ToAntiAffinityGroupOutputWithContext(ctx context.Context) AntiAffinityGroupOutput
}

func (*AntiAffinityGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**AntiAffinityGroup)(nil)).Elem()
}

func (i *AntiAffinityGroup) ToAntiAffinityGroupOutput() AntiAffinityGroupOutput {
	return i.ToAntiAffinityGroupOutputWithContext(context.Background())
}

func (i *AntiAffinityGroup) ToAntiAffinityGroupOutputWithContext(ctx context.Context) AntiAffinityGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AntiAffinityGroupOutput)
}

// AntiAffinityGroupArrayInput is an input type that accepts AntiAffinityGroupArray and AntiAffinityGroupArrayOutput values.
// You can construct a concrete instance of `AntiAffinityGroupArrayInput` via:
//
//	AntiAffinityGroupArray{ AntiAffinityGroupArgs{...} }
type AntiAffinityGroupArrayInput interface {
	pulumi.Input

	ToAntiAffinityGroupArrayOutput() AntiAffinityGroupArrayOutput
	ToAntiAffinityGroupArrayOutputWithContext(context.Context) AntiAffinityGroupArrayOutput
}

type AntiAffinityGroupArray []AntiAffinityGroupInput

func (AntiAffinityGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AntiAffinityGroup)(nil)).Elem()
}

func (i AntiAffinityGroupArray) ToAntiAffinityGroupArrayOutput() AntiAffinityGroupArrayOutput {
	return i.ToAntiAffinityGroupArrayOutputWithContext(context.Background())
}

func (i AntiAffinityGroupArray) ToAntiAffinityGroupArrayOutputWithContext(ctx context.Context) AntiAffinityGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AntiAffinityGroupArrayOutput)
}

// AntiAffinityGroupMapInput is an input type that accepts AntiAffinityGroupMap and AntiAffinityGroupMapOutput values.
// You can construct a concrete instance of `AntiAffinityGroupMapInput` via:
//
//	AntiAffinityGroupMap{ "key": AntiAffinityGroupArgs{...} }
type AntiAffinityGroupMapInput interface {
	pulumi.Input

	ToAntiAffinityGroupMapOutput() AntiAffinityGroupMapOutput
	ToAntiAffinityGroupMapOutputWithContext(context.Context) AntiAffinityGroupMapOutput
}

type AntiAffinityGroupMap map[string]AntiAffinityGroupInput

func (AntiAffinityGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AntiAffinityGroup)(nil)).Elem()
}

func (i AntiAffinityGroupMap) ToAntiAffinityGroupMapOutput() AntiAffinityGroupMapOutput {
	return i.ToAntiAffinityGroupMapOutputWithContext(context.Background())
}

func (i AntiAffinityGroupMap) ToAntiAffinityGroupMapOutputWithContext(ctx context.Context) AntiAffinityGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AntiAffinityGroupMapOutput)
}

type AntiAffinityGroupOutput struct{ *pulumi.OutputState }

func (AntiAffinityGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AntiAffinityGroup)(nil)).Elem()
}

func (o AntiAffinityGroupOutput) ToAntiAffinityGroupOutput() AntiAffinityGroupOutput {
	return o
}

func (o AntiAffinityGroupOutput) ToAntiAffinityGroupOutputWithContext(ctx context.Context) AntiAffinityGroupOutput {
	return o
}

// ❗ A free-form text describing the group.
func (o AntiAffinityGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AntiAffinityGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// ❗ The anti-affinity group name.
func (o AntiAffinityGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AntiAffinityGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type AntiAffinityGroupArrayOutput struct{ *pulumi.OutputState }

func (AntiAffinityGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AntiAffinityGroup)(nil)).Elem()
}

func (o AntiAffinityGroupArrayOutput) ToAntiAffinityGroupArrayOutput() AntiAffinityGroupArrayOutput {
	return o
}

func (o AntiAffinityGroupArrayOutput) ToAntiAffinityGroupArrayOutputWithContext(ctx context.Context) AntiAffinityGroupArrayOutput {
	return o
}

func (o AntiAffinityGroupArrayOutput) Index(i pulumi.IntInput) AntiAffinityGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AntiAffinityGroup {
		return vs[0].([]*AntiAffinityGroup)[vs[1].(int)]
	}).(AntiAffinityGroupOutput)
}

type AntiAffinityGroupMapOutput struct{ *pulumi.OutputState }

func (AntiAffinityGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AntiAffinityGroup)(nil)).Elem()
}

func (o AntiAffinityGroupMapOutput) ToAntiAffinityGroupMapOutput() AntiAffinityGroupMapOutput {
	return o
}

func (o AntiAffinityGroupMapOutput) ToAntiAffinityGroupMapOutputWithContext(ctx context.Context) AntiAffinityGroupMapOutput {
	return o
}

func (o AntiAffinityGroupMapOutput) MapIndex(k pulumi.StringInput) AntiAffinityGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AntiAffinityGroup {
		return vs[0].(map[string]*AntiAffinityGroup)[vs[1].(string)]
	}).(AntiAffinityGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AntiAffinityGroupInput)(nil)).Elem(), &AntiAffinityGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*AntiAffinityGroupArrayInput)(nil)).Elem(), AntiAffinityGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AntiAffinityGroupMapInput)(nil)).Elem(), AntiAffinityGroupMap{})
	pulumi.RegisterOutputType(AntiAffinityGroupOutput{})
	pulumi.RegisterOutputType(AntiAffinityGroupArrayOutput{})
	pulumi.RegisterOutputType(AntiAffinityGroupMapOutput{})
}
