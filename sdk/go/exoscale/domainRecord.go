// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

// Manage Exoscale [DNS](https://community.exoscale.com/product/networking/dns/) Domain Records.
//
// Corresponding data source: exoscale_domain_record.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myDomain, err := exoscale.NewDomain(ctx, "my_domain", &exoscale.DomainArgs{
//				Name: pulumi.String("example.net"),
//			})
//			if err != nil {
//				return err
//			}
//			myHost, err := exoscale.NewDomainRecord(ctx, "my_host", &exoscale.DomainRecordArgs{
//				Domain:     myDomain.ID(),
//				Name:       pulumi.String("my-host"),
//				RecordType: pulumi.String("A"),
//				Content:    pulumi.String("1.2.3.4"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = exoscale.NewDomainRecord(ctx, "my_host_alias", &exoscale.DomainRecordArgs{
//				Domain:     myDomain.ID(),
//				Name:       pulumi.String("my-host-alias"),
//				RecordType: pulumi.String("CNAME"),
//				Content:    myHost.Hostname,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Please refer to the examples
// directory for complete configuration examples.
//
// ## Import
//
// An existing DNS domain record may be imported by `<ID>`:
//
// ```sh
// $ pulumi import exoscale:index/domainRecord:DomainRecord \
// ```
//
//	exoscale_domain_record.my_host \
//
//	f81d4fae-7dec-11d0-a765-00a0c91e6bf6
type DomainRecord struct {
	pulumi.CustomResourceState

	// The record value. Format follows specific record type. For example SRV record format would be `<weight> <port> <target>`
	Content pulumi.StringOutput `pulumi:"content"`
	// The normalized value of the record
	ContentNormalized pulumi.StringOutput `pulumi:"contentNormalized"`
	// ❗ The parent Domain to attach the record to.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// The record *Fully Qualified Domain Name* (FQDN). Useful for aliasing `A`/`AAAA` records with `CNAME`.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// The record name, Leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
	Name pulumi.StringOutput `pulumi:"name"`
	// The record priority (for types that support it; minimum `0`).
	Prio pulumi.IntOutput `pulumi:"prio"`
	// ❗ The record type (`A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`).
	RecordType pulumi.StringOutput `pulumi:"recordType"`
	// The record TTL (seconds; minimum `0`; default: `3600`).
	Ttl pulumi.IntOutput `pulumi:"ttl"`
}

// NewDomainRecord registers a new resource with the given unique name, arguments, and options.
func NewDomainRecord(ctx *pulumi.Context,
	name string, args *DomainRecordArgs, opts ...pulumi.ResourceOption) (*DomainRecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.RecordType == nil {
		return nil, errors.New("invalid value for required argument 'RecordType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainRecord
	err := ctx.RegisterResource("exoscale:index/domainRecord:DomainRecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainRecord gets an existing DomainRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainRecordState, opts ...pulumi.ResourceOption) (*DomainRecord, error) {
	var resource DomainRecord
	err := ctx.ReadResource("exoscale:index/domainRecord:DomainRecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainRecord resources.
type domainRecordState struct {
	// The record value. Format follows specific record type. For example SRV record format would be `<weight> <port> <target>`
	Content *string `pulumi:"content"`
	// The normalized value of the record
	ContentNormalized *string `pulumi:"contentNormalized"`
	// ❗ The parent Domain to attach the record to.
	Domain *string `pulumi:"domain"`
	// The record *Fully Qualified Domain Name* (FQDN). Useful for aliasing `A`/`AAAA` records with `CNAME`.
	Hostname *string `pulumi:"hostname"`
	// The record name, Leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
	Name *string `pulumi:"name"`
	// The record priority (for types that support it; minimum `0`).
	Prio *int `pulumi:"prio"`
	// ❗ The record type (`A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`).
	RecordType *string `pulumi:"recordType"`
	// The record TTL (seconds; minimum `0`; default: `3600`).
	Ttl *int `pulumi:"ttl"`
}

type DomainRecordState struct {
	// The record value. Format follows specific record type. For example SRV record format would be `<weight> <port> <target>`
	Content pulumi.StringPtrInput
	// The normalized value of the record
	ContentNormalized pulumi.StringPtrInput
	// ❗ The parent Domain to attach the record to.
	Domain pulumi.StringPtrInput
	// The record *Fully Qualified Domain Name* (FQDN). Useful for aliasing `A`/`AAAA` records with `CNAME`.
	Hostname pulumi.StringPtrInput
	// The record name, Leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
	Name pulumi.StringPtrInput
	// The record priority (for types that support it; minimum `0`).
	Prio pulumi.IntPtrInput
	// ❗ The record type (`A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`).
	RecordType pulumi.StringPtrInput
	// The record TTL (seconds; minimum `0`; default: `3600`).
	Ttl pulumi.IntPtrInput
}

func (DomainRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainRecordState)(nil)).Elem()
}

type domainRecordArgs struct {
	// The record value. Format follows specific record type. For example SRV record format would be `<weight> <port> <target>`
	Content string `pulumi:"content"`
	// ❗ The parent Domain to attach the record to.
	Domain string `pulumi:"domain"`
	// The record name, Leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
	Name *string `pulumi:"name"`
	// The record priority (for types that support it; minimum `0`).
	Prio *int `pulumi:"prio"`
	// ❗ The record type (`A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`).
	RecordType string `pulumi:"recordType"`
	// The record TTL (seconds; minimum `0`; default: `3600`).
	Ttl *int `pulumi:"ttl"`
}

// The set of arguments for constructing a DomainRecord resource.
type DomainRecordArgs struct {
	// The record value. Format follows specific record type. For example SRV record format would be `<weight> <port> <target>`
	Content pulumi.StringInput
	// ❗ The parent Domain to attach the record to.
	Domain pulumi.StringInput
	// The record name, Leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
	Name pulumi.StringPtrInput
	// The record priority (for types that support it; minimum `0`).
	Prio pulumi.IntPtrInput
	// ❗ The record type (`A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`).
	RecordType pulumi.StringInput
	// The record TTL (seconds; minimum `0`; default: `3600`).
	Ttl pulumi.IntPtrInput
}

func (DomainRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainRecordArgs)(nil)).Elem()
}

type DomainRecordInput interface {
	pulumi.Input

	ToDomainRecordOutput() DomainRecordOutput
	ToDomainRecordOutputWithContext(ctx context.Context) DomainRecordOutput
}

func (*DomainRecord) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainRecord)(nil)).Elem()
}

func (i *DomainRecord) ToDomainRecordOutput() DomainRecordOutput {
	return i.ToDomainRecordOutputWithContext(context.Background())
}

func (i *DomainRecord) ToDomainRecordOutputWithContext(ctx context.Context) DomainRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRecordOutput)
}

// DomainRecordArrayInput is an input type that accepts DomainRecordArray and DomainRecordArrayOutput values.
// You can construct a concrete instance of `DomainRecordArrayInput` via:
//
//	DomainRecordArray{ DomainRecordArgs{...} }
type DomainRecordArrayInput interface {
	pulumi.Input

	ToDomainRecordArrayOutput() DomainRecordArrayOutput
	ToDomainRecordArrayOutputWithContext(context.Context) DomainRecordArrayOutput
}

type DomainRecordArray []DomainRecordInput

func (DomainRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainRecord)(nil)).Elem()
}

func (i DomainRecordArray) ToDomainRecordArrayOutput() DomainRecordArrayOutput {
	return i.ToDomainRecordArrayOutputWithContext(context.Background())
}

func (i DomainRecordArray) ToDomainRecordArrayOutputWithContext(ctx context.Context) DomainRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRecordArrayOutput)
}

// DomainRecordMapInput is an input type that accepts DomainRecordMap and DomainRecordMapOutput values.
// You can construct a concrete instance of `DomainRecordMapInput` via:
//
//	DomainRecordMap{ "key": DomainRecordArgs{...} }
type DomainRecordMapInput interface {
	pulumi.Input

	ToDomainRecordMapOutput() DomainRecordMapOutput
	ToDomainRecordMapOutputWithContext(context.Context) DomainRecordMapOutput
}

type DomainRecordMap map[string]DomainRecordInput

func (DomainRecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainRecord)(nil)).Elem()
}

func (i DomainRecordMap) ToDomainRecordMapOutput() DomainRecordMapOutput {
	return i.ToDomainRecordMapOutputWithContext(context.Background())
}

func (i DomainRecordMap) ToDomainRecordMapOutputWithContext(ctx context.Context) DomainRecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRecordMapOutput)
}

type DomainRecordOutput struct{ *pulumi.OutputState }

func (DomainRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainRecord)(nil)).Elem()
}

func (o DomainRecordOutput) ToDomainRecordOutput() DomainRecordOutput {
	return o
}

func (o DomainRecordOutput) ToDomainRecordOutputWithContext(ctx context.Context) DomainRecordOutput {
	return o
}

// The record value. Format follows specific record type. For example SRV record format would be `<weight> <port> <target>`
func (o DomainRecordOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainRecord) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// The normalized value of the record
func (o DomainRecordOutput) ContentNormalized() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainRecord) pulumi.StringOutput { return v.ContentNormalized }).(pulumi.StringOutput)
}

// ❗ The parent Domain to attach the record to.
func (o DomainRecordOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainRecord) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// The record *Fully Qualified Domain Name* (FQDN). Useful for aliasing `A`/`AAAA` records with `CNAME`.
func (o DomainRecordOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainRecord) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// The record name, Leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
func (o DomainRecordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainRecord) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The record priority (for types that support it; minimum `0`).
func (o DomainRecordOutput) Prio() pulumi.IntOutput {
	return o.ApplyT(func(v *DomainRecord) pulumi.IntOutput { return v.Prio }).(pulumi.IntOutput)
}

// ❗ The record type (`A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`).
func (o DomainRecordOutput) RecordType() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainRecord) pulumi.StringOutput { return v.RecordType }).(pulumi.StringOutput)
}

// The record TTL (seconds; minimum `0`; default: `3600`).
func (o DomainRecordOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v *DomainRecord) pulumi.IntOutput { return v.Ttl }).(pulumi.IntOutput)
}

type DomainRecordArrayOutput struct{ *pulumi.OutputState }

func (DomainRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainRecord)(nil)).Elem()
}

func (o DomainRecordArrayOutput) ToDomainRecordArrayOutput() DomainRecordArrayOutput {
	return o
}

func (o DomainRecordArrayOutput) ToDomainRecordArrayOutputWithContext(ctx context.Context) DomainRecordArrayOutput {
	return o
}

func (o DomainRecordArrayOutput) Index(i pulumi.IntInput) DomainRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainRecord {
		return vs[0].([]*DomainRecord)[vs[1].(int)]
	}).(DomainRecordOutput)
}

type DomainRecordMapOutput struct{ *pulumi.OutputState }

func (DomainRecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainRecord)(nil)).Elem()
}

func (o DomainRecordMapOutput) ToDomainRecordMapOutput() DomainRecordMapOutput {
	return o
}

func (o DomainRecordMapOutput) ToDomainRecordMapOutputWithContext(ctx context.Context) DomainRecordMapOutput {
	return o
}

func (o DomainRecordMapOutput) MapIndex(k pulumi.StringInput) DomainRecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainRecord {
		return vs[0].(map[string]*DomainRecord)[vs[1].(string)]
	}).(DomainRecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRecordInput)(nil)).Elem(), &DomainRecord{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRecordArrayInput)(nil)).Elem(), DomainRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRecordMapInput)(nil)).Elem(), DomainRecordMap{})
	pulumi.RegisterOutputType(DomainRecordOutput{})
	pulumi.RegisterOutputType(DomainRecordArrayOutput{})
	pulumi.RegisterOutputType(DomainRecordMapOutput{})
}
