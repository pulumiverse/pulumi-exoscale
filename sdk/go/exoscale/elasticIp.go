// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

// Manage Exoscale [Elastic IPs (EIP)](https://community.exoscale.com/product/networking/eip/).
//
// Corresponding data source: exoscale_elastic_ip.
//
// ## Example Usage
//
// *Unmanaged* EIPv4:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := exoscale.NewElasticIp(ctx, "my_elastic_ip", &exoscale.ElasticIpArgs{
//				Zone: pulumi.String("ch-gva-2"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// *Managed* EIPv6:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := exoscale.NewElasticIp(ctx, "my_managed_elastic_ip", &exoscale.ElasticIpArgs{
//				Zone:          pulumi.String("ch-gva-2"),
//				AddressFamily: pulumi.String("inet6"),
//				ReverseDns:    pulumi.String("example.net"),
//				Healthcheck: &exoscale.ElasticIpHealthcheckArgs{
//					Mode:        pulumi.String("https"),
//					Port:        pulumi.Int(443),
//					Uri:         pulumi.String("/health"),
//					Interval:    pulumi.Int(5),
//					Timeout:     pulumi.Int(3),
//					StrikesOk:   pulumi.Int(2),
//					StrikesFail: pulumi.Int(3),
//					TlsSni:      pulumi.String("example.net"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Please refer to the examples
// directory for complete configuration examples.
//
// ## Import
//
// An existing Elastic IP (EIP) may be imported by `<ID>@<zone>`:
//
// ```sh
// $ pulumi import exoscale:index/elasticIp:ElasticIp \
// ```
//
//	exoscale_elastic_ip.my_elastic_ip \
//
//	f81d4fae-7dec-11d0-a765-00a0c91e6bf6@ch-gva-2
type ElasticIp struct {
	pulumi.CustomResourceState

	// ❗ The Elastic IP (EIP) address family (`inet4` or `inet6`; default: `inet4`).
	AddressFamily pulumi.StringOutput `pulumi:"addressFamily"`
	// The Elastic IP (EIP) CIDR.
	Cidr pulumi.StringOutput `pulumi:"cidr"`
	// A free-form text describing the Elastic IP (EIP).
	Description pulumi.StringOutput `pulumi:"description"`
	// Healthcheck configuration for *managed* EIPs. It can not be added to an existing *Unmanaged* EIP.
	Healthcheck ElasticIpHealthcheckOutput `pulumi:"healthcheck"`
	// The Elastic IP (EIP) IPv4 or IPv6 address.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// A map of key/value labels.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Domain name for reverse DNS record.
	ReverseDns pulumi.StringPtrOutput `pulumi:"reverseDns"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewElasticIp registers a new resource with the given unique name, arguments, and options.
func NewElasticIp(ctx *pulumi.Context,
	name string, args *ElasticIpArgs, opts ...pulumi.ResourceOption) (*ElasticIp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ElasticIp
	err := ctx.RegisterResource("exoscale:index/elasticIp:ElasticIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticIp gets an existing ElasticIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticIpState, opts ...pulumi.ResourceOption) (*ElasticIp, error) {
	var resource ElasticIp
	err := ctx.ReadResource("exoscale:index/elasticIp:ElasticIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticIp resources.
type elasticIpState struct {
	// ❗ The Elastic IP (EIP) address family (`inet4` or `inet6`; default: `inet4`).
	AddressFamily *string `pulumi:"addressFamily"`
	// The Elastic IP (EIP) CIDR.
	Cidr *string `pulumi:"cidr"`
	// A free-form text describing the Elastic IP (EIP).
	Description *string `pulumi:"description"`
	// Healthcheck configuration for *managed* EIPs. It can not be added to an existing *Unmanaged* EIP.
	Healthcheck *ElasticIpHealthcheck `pulumi:"healthcheck"`
	// The Elastic IP (EIP) IPv4 or IPv6 address.
	IpAddress *string `pulumi:"ipAddress"`
	// A map of key/value labels.
	Labels map[string]string `pulumi:"labels"`
	// Domain name for reverse DNS record.
	ReverseDns *string `pulumi:"reverseDns"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone *string `pulumi:"zone"`
}

type ElasticIpState struct {
	// ❗ The Elastic IP (EIP) address family (`inet4` or `inet6`; default: `inet4`).
	AddressFamily pulumi.StringPtrInput
	// The Elastic IP (EIP) CIDR.
	Cidr pulumi.StringPtrInput
	// A free-form text describing the Elastic IP (EIP).
	Description pulumi.StringPtrInput
	// Healthcheck configuration for *managed* EIPs. It can not be added to an existing *Unmanaged* EIP.
	Healthcheck ElasticIpHealthcheckPtrInput
	// The Elastic IP (EIP) IPv4 or IPv6 address.
	IpAddress pulumi.StringPtrInput
	// A map of key/value labels.
	Labels pulumi.StringMapInput
	// Domain name for reverse DNS record.
	ReverseDns pulumi.StringPtrInput
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringPtrInput
}

func (ElasticIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticIpState)(nil)).Elem()
}

type elasticIpArgs struct {
	// ❗ The Elastic IP (EIP) address family (`inet4` or `inet6`; default: `inet4`).
	AddressFamily *string `pulumi:"addressFamily"`
	// A free-form text describing the Elastic IP (EIP).
	Description *string `pulumi:"description"`
	// Healthcheck configuration for *managed* EIPs. It can not be added to an existing *Unmanaged* EIP.
	Healthcheck *ElasticIpHealthcheck `pulumi:"healthcheck"`
	// A map of key/value labels.
	Labels map[string]string `pulumi:"labels"`
	// Domain name for reverse DNS record.
	ReverseDns *string `pulumi:"reverseDns"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a ElasticIp resource.
type ElasticIpArgs struct {
	// ❗ The Elastic IP (EIP) address family (`inet4` or `inet6`; default: `inet4`).
	AddressFamily pulumi.StringPtrInput
	// A free-form text describing the Elastic IP (EIP).
	Description pulumi.StringPtrInput
	// Healthcheck configuration for *managed* EIPs. It can not be added to an existing *Unmanaged* EIP.
	Healthcheck ElasticIpHealthcheckPtrInput
	// A map of key/value labels.
	Labels pulumi.StringMapInput
	// Domain name for reverse DNS record.
	ReverseDns pulumi.StringPtrInput
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringInput
}

func (ElasticIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticIpArgs)(nil)).Elem()
}

type ElasticIpInput interface {
	pulumi.Input

	ToElasticIpOutput() ElasticIpOutput
	ToElasticIpOutputWithContext(ctx context.Context) ElasticIpOutput
}

func (*ElasticIp) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticIp)(nil)).Elem()
}

func (i *ElasticIp) ToElasticIpOutput() ElasticIpOutput {
	return i.ToElasticIpOutputWithContext(context.Background())
}

func (i *ElasticIp) ToElasticIpOutputWithContext(ctx context.Context) ElasticIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticIpOutput)
}

// ElasticIpArrayInput is an input type that accepts ElasticIpArray and ElasticIpArrayOutput values.
// You can construct a concrete instance of `ElasticIpArrayInput` via:
//
//	ElasticIpArray{ ElasticIpArgs{...} }
type ElasticIpArrayInput interface {
	pulumi.Input

	ToElasticIpArrayOutput() ElasticIpArrayOutput
	ToElasticIpArrayOutputWithContext(context.Context) ElasticIpArrayOutput
}

type ElasticIpArray []ElasticIpInput

func (ElasticIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticIp)(nil)).Elem()
}

func (i ElasticIpArray) ToElasticIpArrayOutput() ElasticIpArrayOutput {
	return i.ToElasticIpArrayOutputWithContext(context.Background())
}

func (i ElasticIpArray) ToElasticIpArrayOutputWithContext(ctx context.Context) ElasticIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticIpArrayOutput)
}

// ElasticIpMapInput is an input type that accepts ElasticIpMap and ElasticIpMapOutput values.
// You can construct a concrete instance of `ElasticIpMapInput` via:
//
//	ElasticIpMap{ "key": ElasticIpArgs{...} }
type ElasticIpMapInput interface {
	pulumi.Input

	ToElasticIpMapOutput() ElasticIpMapOutput
	ToElasticIpMapOutputWithContext(context.Context) ElasticIpMapOutput
}

type ElasticIpMap map[string]ElasticIpInput

func (ElasticIpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticIp)(nil)).Elem()
}

func (i ElasticIpMap) ToElasticIpMapOutput() ElasticIpMapOutput {
	return i.ToElasticIpMapOutputWithContext(context.Background())
}

func (i ElasticIpMap) ToElasticIpMapOutputWithContext(ctx context.Context) ElasticIpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticIpMapOutput)
}

type ElasticIpOutput struct{ *pulumi.OutputState }

func (ElasticIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticIp)(nil)).Elem()
}

func (o ElasticIpOutput) ToElasticIpOutput() ElasticIpOutput {
	return o
}

func (o ElasticIpOutput) ToElasticIpOutputWithContext(ctx context.Context) ElasticIpOutput {
	return o
}

// ❗ The Elastic IP (EIP) address family (`inet4` or `inet6`; default: `inet4`).
func (o ElasticIpOutput) AddressFamily() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticIp) pulumi.StringOutput { return v.AddressFamily }).(pulumi.StringOutput)
}

// The Elastic IP (EIP) CIDR.
func (o ElasticIpOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticIp) pulumi.StringOutput { return v.Cidr }).(pulumi.StringOutput)
}

// A free-form text describing the Elastic IP (EIP).
func (o ElasticIpOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticIp) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Healthcheck configuration for *managed* EIPs. It can not be added to an existing *Unmanaged* EIP.
func (o ElasticIpOutput) Healthcheck() ElasticIpHealthcheckOutput {
	return o.ApplyT(func(v *ElasticIp) ElasticIpHealthcheckOutput { return v.Healthcheck }).(ElasticIpHealthcheckOutput)
}

// The Elastic IP (EIP) IPv4 or IPv6 address.
func (o ElasticIpOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticIp) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// A map of key/value labels.
func (o ElasticIpOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticIp) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Domain name for reverse DNS record.
func (o ElasticIpOutput) ReverseDns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticIp) pulumi.StringPtrOutput { return v.ReverseDns }).(pulumi.StringPtrOutput)
}

// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
func (o ElasticIpOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticIp) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type ElasticIpArrayOutput struct{ *pulumi.OutputState }

func (ElasticIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticIp)(nil)).Elem()
}

func (o ElasticIpArrayOutput) ToElasticIpArrayOutput() ElasticIpArrayOutput {
	return o
}

func (o ElasticIpArrayOutput) ToElasticIpArrayOutputWithContext(ctx context.Context) ElasticIpArrayOutput {
	return o
}

func (o ElasticIpArrayOutput) Index(i pulumi.IntInput) ElasticIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElasticIp {
		return vs[0].([]*ElasticIp)[vs[1].(int)]
	}).(ElasticIpOutput)
}

type ElasticIpMapOutput struct{ *pulumi.OutputState }

func (ElasticIpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticIp)(nil)).Elem()
}

func (o ElasticIpMapOutput) ToElasticIpMapOutput() ElasticIpMapOutput {
	return o
}

func (o ElasticIpMapOutput) ToElasticIpMapOutputWithContext(ctx context.Context) ElasticIpMapOutput {
	return o
}

func (o ElasticIpMapOutput) MapIndex(k pulumi.StringInput) ElasticIpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElasticIp {
		return vs[0].(map[string]*ElasticIp)[vs[1].(string)]
	}).(ElasticIpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticIpInput)(nil)).Elem(), &ElasticIp{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticIpArrayInput)(nil)).Elem(), ElasticIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticIpMapInput)(nil)).Elem(), ElasticIpMap{})
	pulumi.RegisterOutputType(ElasticIpOutput{})
	pulumi.RegisterOutputType(ElasticIpArrayOutput{})
	pulumi.RegisterOutputType(ElasticIpMapOutput{})
}
