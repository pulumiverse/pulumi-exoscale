// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := exoscale.NewIamAccessKey(ctx, "mySosAccessKey", &exoscale.IamAccessKeyArgs{
//				Operations: pulumi.StringArray{
//					pulumi.String("get-sos-object"),
//					pulumi.String("list-sos-bucket"),
//				},
//				Resources: pulumi.StringArray{
//					pulumi.String("sos/bucket:my-bucket"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = exoscale.NewIamAccessKey(ctx, "mySksAccessKey", &exoscale.IamAccessKeyArgs{
//				Tags: pulumi.StringArray{
//					pulumi.String("sks"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Please refer to the examples
// directory for complete configuration examples.
//
// > **NOTE:** You can retrieve the list of available operations and tags using the [Exoscale CLI](https://github.com/exoscale/cli/): `exo iam access-key list-operations`.
type IamAccessKey struct {
	pulumi.CustomResourceState

	// The IAM access key (identifier).
	Key pulumi.StringOutput `pulumi:"key"`
	// ❗ The IAM access key name.
	Name pulumi.StringOutput `pulumi:"name"`
	// ❗ A list of API operations to restrict the key to.
	Operations pulumi.StringArrayOutput `pulumi:"operations"`
	// ❗ A list of API [resources](https://community.exoscale.com/documentation/iam/quick-start/#restricting-api-access-keys-to-resources) to restrict the key to (`<domain>/<type>:<name>`).
	Resources pulumi.StringArrayOutput `pulumi:"resources"`
	// The key secret.
	Secret pulumi.StringOutput `pulumi:"secret"`
	// ❗ A list of tags to restrict the key to.
	Tags           pulumi.StringArrayOutput `pulumi:"tags"`
	TagsOperations pulumi.StringArrayOutput `pulumi:"tagsOperations"`
}

// NewIamAccessKey registers a new resource with the given unique name, arguments, and options.
func NewIamAccessKey(ctx *pulumi.Context,
	name string, args *IamAccessKeyArgs, opts ...pulumi.ResourceOption) (*IamAccessKey, error) {
	if args == nil {
		args = &IamAccessKeyArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"key",
		"secret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IamAccessKey
	err := ctx.RegisterResource("exoscale:index/iamAccessKey:IamAccessKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamAccessKey gets an existing IamAccessKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamAccessKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamAccessKeyState, opts ...pulumi.ResourceOption) (*IamAccessKey, error) {
	var resource IamAccessKey
	err := ctx.ReadResource("exoscale:index/iamAccessKey:IamAccessKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamAccessKey resources.
type iamAccessKeyState struct {
	// The IAM access key (identifier).
	Key *string `pulumi:"key"`
	// ❗ The IAM access key name.
	Name *string `pulumi:"name"`
	// ❗ A list of API operations to restrict the key to.
	Operations []string `pulumi:"operations"`
	// ❗ A list of API [resources](https://community.exoscale.com/documentation/iam/quick-start/#restricting-api-access-keys-to-resources) to restrict the key to (`<domain>/<type>:<name>`).
	Resources []string `pulumi:"resources"`
	// The key secret.
	Secret *string `pulumi:"secret"`
	// ❗ A list of tags to restrict the key to.
	Tags           []string `pulumi:"tags"`
	TagsOperations []string `pulumi:"tagsOperations"`
}

type IamAccessKeyState struct {
	// The IAM access key (identifier).
	Key pulumi.StringPtrInput
	// ❗ The IAM access key name.
	Name pulumi.StringPtrInput
	// ❗ A list of API operations to restrict the key to.
	Operations pulumi.StringArrayInput
	// ❗ A list of API [resources](https://community.exoscale.com/documentation/iam/quick-start/#restricting-api-access-keys-to-resources) to restrict the key to (`<domain>/<type>:<name>`).
	Resources pulumi.StringArrayInput
	// The key secret.
	Secret pulumi.StringPtrInput
	// ❗ A list of tags to restrict the key to.
	Tags           pulumi.StringArrayInput
	TagsOperations pulumi.StringArrayInput
}

func (IamAccessKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamAccessKeyState)(nil)).Elem()
}

type iamAccessKeyArgs struct {
	// ❗ The IAM access key name.
	Name *string `pulumi:"name"`
	// ❗ A list of API operations to restrict the key to.
	Operations []string `pulumi:"operations"`
	// ❗ A list of API [resources](https://community.exoscale.com/documentation/iam/quick-start/#restricting-api-access-keys-to-resources) to restrict the key to (`<domain>/<type>:<name>`).
	Resources []string `pulumi:"resources"`
	// ❗ A list of tags to restrict the key to.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a IamAccessKey resource.
type IamAccessKeyArgs struct {
	// ❗ The IAM access key name.
	Name pulumi.StringPtrInput
	// ❗ A list of API operations to restrict the key to.
	Operations pulumi.StringArrayInput
	// ❗ A list of API [resources](https://community.exoscale.com/documentation/iam/quick-start/#restricting-api-access-keys-to-resources) to restrict the key to (`<domain>/<type>:<name>`).
	Resources pulumi.StringArrayInput
	// ❗ A list of tags to restrict the key to.
	Tags pulumi.StringArrayInput
}

func (IamAccessKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamAccessKeyArgs)(nil)).Elem()
}

type IamAccessKeyInput interface {
	pulumi.Input

	ToIamAccessKeyOutput() IamAccessKeyOutput
	ToIamAccessKeyOutputWithContext(ctx context.Context) IamAccessKeyOutput
}

func (*IamAccessKey) ElementType() reflect.Type {
	return reflect.TypeOf((**IamAccessKey)(nil)).Elem()
}

func (i *IamAccessKey) ToIamAccessKeyOutput() IamAccessKeyOutput {
	return i.ToIamAccessKeyOutputWithContext(context.Background())
}

func (i *IamAccessKey) ToIamAccessKeyOutputWithContext(ctx context.Context) IamAccessKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamAccessKeyOutput)
}

// IamAccessKeyArrayInput is an input type that accepts IamAccessKeyArray and IamAccessKeyArrayOutput values.
// You can construct a concrete instance of `IamAccessKeyArrayInput` via:
//
//	IamAccessKeyArray{ IamAccessKeyArgs{...} }
type IamAccessKeyArrayInput interface {
	pulumi.Input

	ToIamAccessKeyArrayOutput() IamAccessKeyArrayOutput
	ToIamAccessKeyArrayOutputWithContext(context.Context) IamAccessKeyArrayOutput
}

type IamAccessKeyArray []IamAccessKeyInput

func (IamAccessKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamAccessKey)(nil)).Elem()
}

func (i IamAccessKeyArray) ToIamAccessKeyArrayOutput() IamAccessKeyArrayOutput {
	return i.ToIamAccessKeyArrayOutputWithContext(context.Background())
}

func (i IamAccessKeyArray) ToIamAccessKeyArrayOutputWithContext(ctx context.Context) IamAccessKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamAccessKeyArrayOutput)
}

// IamAccessKeyMapInput is an input type that accepts IamAccessKeyMap and IamAccessKeyMapOutput values.
// You can construct a concrete instance of `IamAccessKeyMapInput` via:
//
//	IamAccessKeyMap{ "key": IamAccessKeyArgs{...} }
type IamAccessKeyMapInput interface {
	pulumi.Input

	ToIamAccessKeyMapOutput() IamAccessKeyMapOutput
	ToIamAccessKeyMapOutputWithContext(context.Context) IamAccessKeyMapOutput
}

type IamAccessKeyMap map[string]IamAccessKeyInput

func (IamAccessKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamAccessKey)(nil)).Elem()
}

func (i IamAccessKeyMap) ToIamAccessKeyMapOutput() IamAccessKeyMapOutput {
	return i.ToIamAccessKeyMapOutputWithContext(context.Background())
}

func (i IamAccessKeyMap) ToIamAccessKeyMapOutputWithContext(ctx context.Context) IamAccessKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamAccessKeyMapOutput)
}

type IamAccessKeyOutput struct{ *pulumi.OutputState }

func (IamAccessKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamAccessKey)(nil)).Elem()
}

func (o IamAccessKeyOutput) ToIamAccessKeyOutput() IamAccessKeyOutput {
	return o
}

func (o IamAccessKeyOutput) ToIamAccessKeyOutputWithContext(ctx context.Context) IamAccessKeyOutput {
	return o
}

// The IAM access key (identifier).
func (o IamAccessKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *IamAccessKey) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// ❗ The IAM access key name.
func (o IamAccessKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IamAccessKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ❗ A list of API operations to restrict the key to.
func (o IamAccessKeyOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IamAccessKey) pulumi.StringArrayOutput { return v.Operations }).(pulumi.StringArrayOutput)
}

// ❗ A list of API [resources](https://community.exoscale.com/documentation/iam/quick-start/#restricting-api-access-keys-to-resources) to restrict the key to (`<domain>/<type>:<name>`).
func (o IamAccessKeyOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IamAccessKey) pulumi.StringArrayOutput { return v.Resources }).(pulumi.StringArrayOutput)
}

// The key secret.
func (o IamAccessKeyOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v *IamAccessKey) pulumi.StringOutput { return v.Secret }).(pulumi.StringOutput)
}

// ❗ A list of tags to restrict the key to.
func (o IamAccessKeyOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IamAccessKey) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o IamAccessKeyOutput) TagsOperations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IamAccessKey) pulumi.StringArrayOutput { return v.TagsOperations }).(pulumi.StringArrayOutput)
}

type IamAccessKeyArrayOutput struct{ *pulumi.OutputState }

func (IamAccessKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamAccessKey)(nil)).Elem()
}

func (o IamAccessKeyArrayOutput) ToIamAccessKeyArrayOutput() IamAccessKeyArrayOutput {
	return o
}

func (o IamAccessKeyArrayOutput) ToIamAccessKeyArrayOutputWithContext(ctx context.Context) IamAccessKeyArrayOutput {
	return o
}

func (o IamAccessKeyArrayOutput) Index(i pulumi.IntInput) IamAccessKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IamAccessKey {
		return vs[0].([]*IamAccessKey)[vs[1].(int)]
	}).(IamAccessKeyOutput)
}

type IamAccessKeyMapOutput struct{ *pulumi.OutputState }

func (IamAccessKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamAccessKey)(nil)).Elem()
}

func (o IamAccessKeyMapOutput) ToIamAccessKeyMapOutput() IamAccessKeyMapOutput {
	return o
}

func (o IamAccessKeyMapOutput) ToIamAccessKeyMapOutputWithContext(ctx context.Context) IamAccessKeyMapOutput {
	return o
}

func (o IamAccessKeyMapOutput) MapIndex(k pulumi.StringInput) IamAccessKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IamAccessKey {
		return vs[0].(map[string]*IamAccessKey)[vs[1].(string)]
	}).(IamAccessKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamAccessKeyInput)(nil)).Elem(), &IamAccessKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamAccessKeyArrayInput)(nil)).Elem(), IamAccessKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamAccessKeyMapInput)(nil)).Elem(), IamAccessKeyMap{})
	pulumi.RegisterOutputType(IamAccessKeyOutput{})
	pulumi.RegisterOutputType(IamAccessKeyArrayOutput{})
	pulumi.RegisterOutputType(IamAccessKeyMapOutput{})
}
