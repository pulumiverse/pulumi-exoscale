// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myTemplate, err := exoscale.GetTemplate(ctx, &exoscale.GetTemplateArgs{
//				Zone: "ch-gva-2",
//				Name: pulumi.StringRef("Linux Ubuntu 22.04 LTS 64-bit"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("myTemplateId", myTemplate.Id)
//			return nil
//		})
//	}
//
// ```
//
// Please refer to the examples
// directory for complete configuration examples.
func GetTemplate(ctx *pulumi.Context, args *GetTemplateArgs, opts ...pulumi.InvokeOption) (*GetTemplateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTemplateResult
	err := ctx.Invoke("exoscale:index/getTemplate:getTemplate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTemplate.
type GetTemplateArgs struct {
	// The compute instance template ID to match (conflicts with `name`).
	Id *string `pulumi:"id"`
	// The template name to match (conflicts with `id`) (when multiple templates have the same name, the newest one will be returned).
	Name *string `pulumi:"name"`
	// A template category filter (default: `public`); among: - `public` - official Exoscale templates - `private` - custom templates private to my organization
	Visibility *string `pulumi:"visibility"`
	// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone string `pulumi:"zone"`
}

// A collection of values returned by getTemplate.
type GetTemplateResult struct {
	// Username to use to log into a compute instance based on this template
	DefaultUser string `pulumi:"defaultUser"`
	// The compute instance template ID to match (conflicts with `name`).
	Id *string `pulumi:"id"`
	// The template name to match (conflicts with `id`) (when multiple templates have the same name, the newest one will be returned).
	Name *string `pulumi:"name"`
	// A template category filter (default: `public`); among: - `public` - official Exoscale templates - `private` - custom templates private to my organization
	Visibility *string `pulumi:"visibility"`
	// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone string `pulumi:"zone"`
}

func GetTemplateOutput(ctx *pulumi.Context, args GetTemplateOutputArgs, opts ...pulumi.InvokeOption) GetTemplateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetTemplateResultOutput, error) {
			args := v.(GetTemplateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("exoscale:index/getTemplate:getTemplate", args, GetTemplateResultOutput{}, options).(GetTemplateResultOutput), nil
		}).(GetTemplateResultOutput)
}

// A collection of arguments for invoking getTemplate.
type GetTemplateOutputArgs struct {
	// The compute instance template ID to match (conflicts with `name`).
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The template name to match (conflicts with `id`) (when multiple templates have the same name, the newest one will be returned).
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A template category filter (default: `public`); among: - `public` - official Exoscale templates - `private` - custom templates private to my organization
	Visibility pulumi.StringPtrInput `pulumi:"visibility"`
	// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetTemplateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTemplateArgs)(nil)).Elem()
}

// A collection of values returned by getTemplate.
type GetTemplateResultOutput struct{ *pulumi.OutputState }

func (GetTemplateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTemplateResult)(nil)).Elem()
}

func (o GetTemplateResultOutput) ToGetTemplateResultOutput() GetTemplateResultOutput {
	return o
}

func (o GetTemplateResultOutput) ToGetTemplateResultOutputWithContext(ctx context.Context) GetTemplateResultOutput {
	return o
}

// Username to use to log into a compute instance based on this template
func (o GetTemplateResultOutput) DefaultUser() pulumi.StringOutput {
	return o.ApplyT(func(v GetTemplateResult) string { return v.DefaultUser }).(pulumi.StringOutput)
}

// The compute instance template ID to match (conflicts with `name`).
func (o GetTemplateResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTemplateResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The template name to match (conflicts with `id`) (when multiple templates have the same name, the newest one will be returned).
func (o GetTemplateResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTemplateResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A template category filter (default: `public`); among: - `public` - official Exoscale templates - `private` - custom templates private to my organization
func (o GetTemplateResultOutput) Visibility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTemplateResult) *string { return v.Visibility }).(pulumi.StringPtrOutput)
}

// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
func (o GetTemplateResultOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetTemplateResult) string { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTemplateResultOutput{})
}
