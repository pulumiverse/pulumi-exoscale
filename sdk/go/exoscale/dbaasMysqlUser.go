// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

// Manage service users for MySQL Exoscale [Database Services (DBaaS)](https://community.exoscale.com/documentation/dbaas/).
type DbaasMysqlUser struct {
	pulumi.CustomResourceState

	// ❗ Authentication details. The possible values are `null`, `cachingSha2Password` and `mysqlNativePassword`.
	Authentication pulumi.StringOutput `pulumi:"authentication"`
	// The password of the service user.
	Password pulumi.StringOutput `pulumi:"password"`
	// ❗ The name of the database service.
	Service  pulumi.StringOutput             `pulumi:"service"`
	Timeouts DbaasMysqlUserTimeoutsPtrOutput `pulumi:"timeouts"`
	// The type of the service user.
	Type pulumi.StringOutput `pulumi:"type"`
	// ❗ The name of the user for this service.
	Username pulumi.StringOutput `pulumi:"username"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewDbaasMysqlUser registers a new resource with the given unique name, arguments, and options.
func NewDbaasMysqlUser(ctx *pulumi.Context,
	name string, args *DbaasMysqlUserArgs, opts ...pulumi.ResourceOption) (*DbaasMysqlUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DbaasMysqlUser
	err := ctx.RegisterResource("exoscale:index/dbaasMysqlUser:DbaasMysqlUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbaasMysqlUser gets an existing DbaasMysqlUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbaasMysqlUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbaasMysqlUserState, opts ...pulumi.ResourceOption) (*DbaasMysqlUser, error) {
	var resource DbaasMysqlUser
	err := ctx.ReadResource("exoscale:index/dbaasMysqlUser:DbaasMysqlUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbaasMysqlUser resources.
type dbaasMysqlUserState struct {
	// ❗ Authentication details. The possible values are `null`, `cachingSha2Password` and `mysqlNativePassword`.
	Authentication *string `pulumi:"authentication"`
	// The password of the service user.
	Password *string `pulumi:"password"`
	// ❗ The name of the database service.
	Service  *string                 `pulumi:"service"`
	Timeouts *DbaasMysqlUserTimeouts `pulumi:"timeouts"`
	// The type of the service user.
	Type *string `pulumi:"type"`
	// ❗ The name of the user for this service.
	Username *string `pulumi:"username"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone *string `pulumi:"zone"`
}

type DbaasMysqlUserState struct {
	// ❗ Authentication details. The possible values are `null`, `cachingSha2Password` and `mysqlNativePassword`.
	Authentication pulumi.StringPtrInput
	// The password of the service user.
	Password pulumi.StringPtrInput
	// ❗ The name of the database service.
	Service  pulumi.StringPtrInput
	Timeouts DbaasMysqlUserTimeoutsPtrInput
	// The type of the service user.
	Type pulumi.StringPtrInput
	// ❗ The name of the user for this service.
	Username pulumi.StringPtrInput
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringPtrInput
}

func (DbaasMysqlUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbaasMysqlUserState)(nil)).Elem()
}

type dbaasMysqlUserArgs struct {
	// ❗ Authentication details. The possible values are `null`, `cachingSha2Password` and `mysqlNativePassword`.
	Authentication *string `pulumi:"authentication"`
	// ❗ The name of the database service.
	Service  string                  `pulumi:"service"`
	Timeouts *DbaasMysqlUserTimeouts `pulumi:"timeouts"`
	// ❗ The name of the user for this service.
	Username string `pulumi:"username"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a DbaasMysqlUser resource.
type DbaasMysqlUserArgs struct {
	// ❗ Authentication details. The possible values are `null`, `cachingSha2Password` and `mysqlNativePassword`.
	Authentication pulumi.StringPtrInput
	// ❗ The name of the database service.
	Service  pulumi.StringInput
	Timeouts DbaasMysqlUserTimeoutsPtrInput
	// ❗ The name of the user for this service.
	Username pulumi.StringInput
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringInput
}

func (DbaasMysqlUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbaasMysqlUserArgs)(nil)).Elem()
}

type DbaasMysqlUserInput interface {
	pulumi.Input

	ToDbaasMysqlUserOutput() DbaasMysqlUserOutput
	ToDbaasMysqlUserOutputWithContext(ctx context.Context) DbaasMysqlUserOutput
}

func (*DbaasMysqlUser) ElementType() reflect.Type {
	return reflect.TypeOf((**DbaasMysqlUser)(nil)).Elem()
}

func (i *DbaasMysqlUser) ToDbaasMysqlUserOutput() DbaasMysqlUserOutput {
	return i.ToDbaasMysqlUserOutputWithContext(context.Background())
}

func (i *DbaasMysqlUser) ToDbaasMysqlUserOutputWithContext(ctx context.Context) DbaasMysqlUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasMysqlUserOutput)
}

// DbaasMysqlUserArrayInput is an input type that accepts DbaasMysqlUserArray and DbaasMysqlUserArrayOutput values.
// You can construct a concrete instance of `DbaasMysqlUserArrayInput` via:
//
//	DbaasMysqlUserArray{ DbaasMysqlUserArgs{...} }
type DbaasMysqlUserArrayInput interface {
	pulumi.Input

	ToDbaasMysqlUserArrayOutput() DbaasMysqlUserArrayOutput
	ToDbaasMysqlUserArrayOutputWithContext(context.Context) DbaasMysqlUserArrayOutput
}

type DbaasMysqlUserArray []DbaasMysqlUserInput

func (DbaasMysqlUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbaasMysqlUser)(nil)).Elem()
}

func (i DbaasMysqlUserArray) ToDbaasMysqlUserArrayOutput() DbaasMysqlUserArrayOutput {
	return i.ToDbaasMysqlUserArrayOutputWithContext(context.Background())
}

func (i DbaasMysqlUserArray) ToDbaasMysqlUserArrayOutputWithContext(ctx context.Context) DbaasMysqlUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasMysqlUserArrayOutput)
}

// DbaasMysqlUserMapInput is an input type that accepts DbaasMysqlUserMap and DbaasMysqlUserMapOutput values.
// You can construct a concrete instance of `DbaasMysqlUserMapInput` via:
//
//	DbaasMysqlUserMap{ "key": DbaasMysqlUserArgs{...} }
type DbaasMysqlUserMapInput interface {
	pulumi.Input

	ToDbaasMysqlUserMapOutput() DbaasMysqlUserMapOutput
	ToDbaasMysqlUserMapOutputWithContext(context.Context) DbaasMysqlUserMapOutput
}

type DbaasMysqlUserMap map[string]DbaasMysqlUserInput

func (DbaasMysqlUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbaasMysqlUser)(nil)).Elem()
}

func (i DbaasMysqlUserMap) ToDbaasMysqlUserMapOutput() DbaasMysqlUserMapOutput {
	return i.ToDbaasMysqlUserMapOutputWithContext(context.Background())
}

func (i DbaasMysqlUserMap) ToDbaasMysqlUserMapOutputWithContext(ctx context.Context) DbaasMysqlUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasMysqlUserMapOutput)
}

type DbaasMysqlUserOutput struct{ *pulumi.OutputState }

func (DbaasMysqlUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbaasMysqlUser)(nil)).Elem()
}

func (o DbaasMysqlUserOutput) ToDbaasMysqlUserOutput() DbaasMysqlUserOutput {
	return o
}

func (o DbaasMysqlUserOutput) ToDbaasMysqlUserOutputWithContext(ctx context.Context) DbaasMysqlUserOutput {
	return o
}

// ❗ Authentication details. The possible values are `null`, `cachingSha2Password` and `mysqlNativePassword`.
func (o DbaasMysqlUserOutput) Authentication() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasMysqlUser) pulumi.StringOutput { return v.Authentication }).(pulumi.StringOutput)
}

// The password of the service user.
func (o DbaasMysqlUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasMysqlUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// ❗ The name of the database service.
func (o DbaasMysqlUserOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasMysqlUser) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

func (o DbaasMysqlUserOutput) Timeouts() DbaasMysqlUserTimeoutsPtrOutput {
	return o.ApplyT(func(v *DbaasMysqlUser) DbaasMysqlUserTimeoutsPtrOutput { return v.Timeouts }).(DbaasMysqlUserTimeoutsPtrOutput)
}

// The type of the service user.
func (o DbaasMysqlUserOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasMysqlUser) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// ❗ The name of the user for this service.
func (o DbaasMysqlUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasMysqlUser) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
func (o DbaasMysqlUserOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasMysqlUser) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type DbaasMysqlUserArrayOutput struct{ *pulumi.OutputState }

func (DbaasMysqlUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbaasMysqlUser)(nil)).Elem()
}

func (o DbaasMysqlUserArrayOutput) ToDbaasMysqlUserArrayOutput() DbaasMysqlUserArrayOutput {
	return o
}

func (o DbaasMysqlUserArrayOutput) ToDbaasMysqlUserArrayOutputWithContext(ctx context.Context) DbaasMysqlUserArrayOutput {
	return o
}

func (o DbaasMysqlUserArrayOutput) Index(i pulumi.IntInput) DbaasMysqlUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DbaasMysqlUser {
		return vs[0].([]*DbaasMysqlUser)[vs[1].(int)]
	}).(DbaasMysqlUserOutput)
}

type DbaasMysqlUserMapOutput struct{ *pulumi.OutputState }

func (DbaasMysqlUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbaasMysqlUser)(nil)).Elem()
}

func (o DbaasMysqlUserMapOutput) ToDbaasMysqlUserMapOutput() DbaasMysqlUserMapOutput {
	return o
}

func (o DbaasMysqlUserMapOutput) ToDbaasMysqlUserMapOutputWithContext(ctx context.Context) DbaasMysqlUserMapOutput {
	return o
}

func (o DbaasMysqlUserMapOutput) MapIndex(k pulumi.StringInput) DbaasMysqlUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DbaasMysqlUser {
		return vs[0].(map[string]*DbaasMysqlUser)[vs[1].(string)]
	}).(DbaasMysqlUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasMysqlUserInput)(nil)).Elem(), &DbaasMysqlUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasMysqlUserArrayInput)(nil)).Elem(), DbaasMysqlUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasMysqlUserMapInput)(nil)).Elem(), DbaasMysqlUserMap{})
	pulumi.RegisterOutputType(DbaasMysqlUserOutput{})
	pulumi.RegisterOutputType(DbaasMysqlUserArrayOutput{})
	pulumi.RegisterOutputType(DbaasMysqlUserMapOutput{})
}
