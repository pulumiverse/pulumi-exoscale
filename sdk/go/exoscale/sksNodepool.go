// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

// Manage Exoscale [Scalable Kubernetes Service (SKS)](https://community.exoscale.com/product/compute/containers/) Node Pools.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mySksCluster, err := exoscale.NewSksCluster(ctx, "mySksCluster", &exoscale.SksClusterArgs{
//				Zone: pulumi.String("ch-gva-2"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = exoscale.NewSksNodepool(ctx, "mySksNodepool", &exoscale.SksNodepoolArgs{
//				ClusterId:    mySksCluster.ID(),
//				Zone:         mySksCluster.Zone,
//				InstanceType: pulumi.String("standard.medium"),
//				Size:         pulumi.Int(3),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Please refer to the examples
// directory for complete configuration examples.
//
// ## Import
//
// An existing SKS node pool may be imported by `<cluster-ID>/<nodepool-ID>@<zone>`:
//
// ```sh
// $ pulumi import exoscale:index/sksNodepool:SksNodepool \
// ```
//
//	exoscale_sks_nodepool.my_sks_nodepool \
//
//	f81d4fae-7dec-11d0-a765-00a0c91e6bf6/9ecc6b8b-73d4-4211-8ced-f7f29bb79524@ch-gva-2
type SksNodepool struct {
	pulumi.CustomResourceState

	// A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
	AntiAffinityGroupIds pulumi.StringArrayOutput `pulumi:"antiAffinityGroupIds"`
	// ❗ The parent exoscale*sks*cluster ID.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The pool creation date.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// A deploy target ID.
	DeployTargetId pulumi.StringPtrOutput `pulumi:"deployTargetId"`
	// A free-form text describing the pool.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The managed instances disk size (GiB; default: `50`).
	DiskSize pulumi.IntPtrOutput `pulumi:"diskSize"`
	// The underlying exoscale*instance*pool ID.
	InstancePoolId pulumi.StringOutput `pulumi:"instancePoolId"`
	// The string used to prefix the managed instances name (default `pool`).
	InstancePrefix pulumi.StringPtrOutput `pulumi:"instancePrefix"`
	// The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
	InstanceType pulumi.StringOutput `pulumi:"instanceType"`
	// Enable IPV6 for the nodepool nodes
	Ipv6 pulumi.BoolPtrOutput `pulumi:"ipv6"`
	// Configuration for this nodepool's kubelet image garbage collector
	KubeletImageGcs SksNodepoolKubeletImageGcArrayOutput `pulumi:"kubeletImageGcs"`
	// A map of key/value labels.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The SKS node pool name.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of exoscale*private*network (IDs) to be attached to the managed instances.
	PrivateNetworkIds pulumi.StringArrayOutput `pulumi:"privateNetworkIds"`
	// A list of exoscale*security*group (IDs) to be attached to the managed instances.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	Size             pulumi.IntOutput         `pulumi:"size"`
	// The current pool state.
	State pulumi.StringOutput `pulumi:"state"`
	// Create nodes with non-standard partitioning for persistent storage (requires min 100G of disk space) (may only be set at creation time).
	StorageLvm pulumi.BoolPtrOutput `pulumi:"storageLvm"`
	// A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) ('taints = { \n\n = "\n\n:\n\n" }').
	Taints pulumi.StringMapOutput `pulumi:"taints"`
	// The managed instances template ID.
	TemplateId pulumi.StringOutput `pulumi:"templateId"`
	// The managed instances version.
	Version pulumi.StringOutput `pulumi:"version"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewSksNodepool registers a new resource with the given unique name, arguments, and options.
func NewSksNodepool(ctx *pulumi.Context,
	name string, args *SksNodepoolArgs, opts ...pulumi.ResourceOption) (*SksNodepool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'InstanceType'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SksNodepool
	err := ctx.RegisterResource("exoscale:index/sksNodepool:SksNodepool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSksNodepool gets an existing SksNodepool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSksNodepool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SksNodepoolState, opts ...pulumi.ResourceOption) (*SksNodepool, error) {
	var resource SksNodepool
	err := ctx.ReadResource("exoscale:index/sksNodepool:SksNodepool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SksNodepool resources.
type sksNodepoolState struct {
	// A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
	AntiAffinityGroupIds []string `pulumi:"antiAffinityGroupIds"`
	// ❗ The parent exoscale*sks*cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// The pool creation date.
	CreatedAt *string `pulumi:"createdAt"`
	// A deploy target ID.
	DeployTargetId *string `pulumi:"deployTargetId"`
	// A free-form text describing the pool.
	Description *string `pulumi:"description"`
	// The managed instances disk size (GiB; default: `50`).
	DiskSize *int `pulumi:"diskSize"`
	// The underlying exoscale*instance*pool ID.
	InstancePoolId *string `pulumi:"instancePoolId"`
	// The string used to prefix the managed instances name (default `pool`).
	InstancePrefix *string `pulumi:"instancePrefix"`
	// The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
	InstanceType *string `pulumi:"instanceType"`
	// Enable IPV6 for the nodepool nodes
	Ipv6 *bool `pulumi:"ipv6"`
	// Configuration for this nodepool's kubelet image garbage collector
	KubeletImageGcs []SksNodepoolKubeletImageGc `pulumi:"kubeletImageGcs"`
	// A map of key/value labels.
	Labels map[string]string `pulumi:"labels"`
	// The SKS node pool name.
	Name *string `pulumi:"name"`
	// A list of exoscale*private*network (IDs) to be attached to the managed instances.
	PrivateNetworkIds []string `pulumi:"privateNetworkIds"`
	// A list of exoscale*security*group (IDs) to be attached to the managed instances.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	Size             *int     `pulumi:"size"`
	// The current pool state.
	State *string `pulumi:"state"`
	// Create nodes with non-standard partitioning for persistent storage (requires min 100G of disk space) (may only be set at creation time).
	StorageLvm *bool `pulumi:"storageLvm"`
	// A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) ('taints = { \n\n = "\n\n:\n\n" }').
	Taints map[string]string `pulumi:"taints"`
	// The managed instances template ID.
	TemplateId *string `pulumi:"templateId"`
	// The managed instances version.
	Version *string `pulumi:"version"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone *string `pulumi:"zone"`
}

type SksNodepoolState struct {
	// A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
	AntiAffinityGroupIds pulumi.StringArrayInput
	// ❗ The parent exoscale*sks*cluster ID.
	ClusterId pulumi.StringPtrInput
	// The pool creation date.
	CreatedAt pulumi.StringPtrInput
	// A deploy target ID.
	DeployTargetId pulumi.StringPtrInput
	// A free-form text describing the pool.
	Description pulumi.StringPtrInput
	// The managed instances disk size (GiB; default: `50`).
	DiskSize pulumi.IntPtrInput
	// The underlying exoscale*instance*pool ID.
	InstancePoolId pulumi.StringPtrInput
	// The string used to prefix the managed instances name (default `pool`).
	InstancePrefix pulumi.StringPtrInput
	// The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
	InstanceType pulumi.StringPtrInput
	// Enable IPV6 for the nodepool nodes
	Ipv6 pulumi.BoolPtrInput
	// Configuration for this nodepool's kubelet image garbage collector
	KubeletImageGcs SksNodepoolKubeletImageGcArrayInput
	// A map of key/value labels.
	Labels pulumi.StringMapInput
	// The SKS node pool name.
	Name pulumi.StringPtrInput
	// A list of exoscale*private*network (IDs) to be attached to the managed instances.
	PrivateNetworkIds pulumi.StringArrayInput
	// A list of exoscale*security*group (IDs) to be attached to the managed instances.
	SecurityGroupIds pulumi.StringArrayInput
	Size             pulumi.IntPtrInput
	// The current pool state.
	State pulumi.StringPtrInput
	// Create nodes with non-standard partitioning for persistent storage (requires min 100G of disk space) (may only be set at creation time).
	StorageLvm pulumi.BoolPtrInput
	// A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) ('taints = { \n\n = "\n\n:\n\n" }').
	Taints pulumi.StringMapInput
	// The managed instances template ID.
	TemplateId pulumi.StringPtrInput
	// The managed instances version.
	Version pulumi.StringPtrInput
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringPtrInput
}

func (SksNodepoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*sksNodepoolState)(nil)).Elem()
}

type sksNodepoolArgs struct {
	// A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
	AntiAffinityGroupIds []string `pulumi:"antiAffinityGroupIds"`
	// ❗ The parent exoscale*sks*cluster ID.
	ClusterId string `pulumi:"clusterId"`
	// A deploy target ID.
	DeployTargetId *string `pulumi:"deployTargetId"`
	// A free-form text describing the pool.
	Description *string `pulumi:"description"`
	// The managed instances disk size (GiB; default: `50`).
	DiskSize *int `pulumi:"diskSize"`
	// The string used to prefix the managed instances name (default `pool`).
	InstancePrefix *string `pulumi:"instancePrefix"`
	// The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
	InstanceType string `pulumi:"instanceType"`
	// Enable IPV6 for the nodepool nodes
	Ipv6 *bool `pulumi:"ipv6"`
	// Configuration for this nodepool's kubelet image garbage collector
	KubeletImageGcs []SksNodepoolKubeletImageGc `pulumi:"kubeletImageGcs"`
	// A map of key/value labels.
	Labels map[string]string `pulumi:"labels"`
	// The SKS node pool name.
	Name *string `pulumi:"name"`
	// A list of exoscale*private*network (IDs) to be attached to the managed instances.
	PrivateNetworkIds []string `pulumi:"privateNetworkIds"`
	// A list of exoscale*security*group (IDs) to be attached to the managed instances.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	Size             int      `pulumi:"size"`
	// Create nodes with non-standard partitioning for persistent storage (requires min 100G of disk space) (may only be set at creation time).
	StorageLvm *bool `pulumi:"storageLvm"`
	// A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) ('taints = { \n\n = "\n\n:\n\n" }').
	Taints map[string]string `pulumi:"taints"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a SksNodepool resource.
type SksNodepoolArgs struct {
	// A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
	AntiAffinityGroupIds pulumi.StringArrayInput
	// ❗ The parent exoscale*sks*cluster ID.
	ClusterId pulumi.StringInput
	// A deploy target ID.
	DeployTargetId pulumi.StringPtrInput
	// A free-form text describing the pool.
	Description pulumi.StringPtrInput
	// The managed instances disk size (GiB; default: `50`).
	DiskSize pulumi.IntPtrInput
	// The string used to prefix the managed instances name (default `pool`).
	InstancePrefix pulumi.StringPtrInput
	// The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
	InstanceType pulumi.StringInput
	// Enable IPV6 for the nodepool nodes
	Ipv6 pulumi.BoolPtrInput
	// Configuration for this nodepool's kubelet image garbage collector
	KubeletImageGcs SksNodepoolKubeletImageGcArrayInput
	// A map of key/value labels.
	Labels pulumi.StringMapInput
	// The SKS node pool name.
	Name pulumi.StringPtrInput
	// A list of exoscale*private*network (IDs) to be attached to the managed instances.
	PrivateNetworkIds pulumi.StringArrayInput
	// A list of exoscale*security*group (IDs) to be attached to the managed instances.
	SecurityGroupIds pulumi.StringArrayInput
	Size             pulumi.IntInput
	// Create nodes with non-standard partitioning for persistent storage (requires min 100G of disk space) (may only be set at creation time).
	StorageLvm pulumi.BoolPtrInput
	// A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) ('taints = { \n\n = "\n\n:\n\n" }').
	Taints pulumi.StringMapInput
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringInput
}

func (SksNodepoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sksNodepoolArgs)(nil)).Elem()
}

type SksNodepoolInput interface {
	pulumi.Input

	ToSksNodepoolOutput() SksNodepoolOutput
	ToSksNodepoolOutputWithContext(ctx context.Context) SksNodepoolOutput
}

func (*SksNodepool) ElementType() reflect.Type {
	return reflect.TypeOf((**SksNodepool)(nil)).Elem()
}

func (i *SksNodepool) ToSksNodepoolOutput() SksNodepoolOutput {
	return i.ToSksNodepoolOutputWithContext(context.Background())
}

func (i *SksNodepool) ToSksNodepoolOutputWithContext(ctx context.Context) SksNodepoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SksNodepoolOutput)
}

// SksNodepoolArrayInput is an input type that accepts SksNodepoolArray and SksNodepoolArrayOutput values.
// You can construct a concrete instance of `SksNodepoolArrayInput` via:
//
//	SksNodepoolArray{ SksNodepoolArgs{...} }
type SksNodepoolArrayInput interface {
	pulumi.Input

	ToSksNodepoolArrayOutput() SksNodepoolArrayOutput
	ToSksNodepoolArrayOutputWithContext(context.Context) SksNodepoolArrayOutput
}

type SksNodepoolArray []SksNodepoolInput

func (SksNodepoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SksNodepool)(nil)).Elem()
}

func (i SksNodepoolArray) ToSksNodepoolArrayOutput() SksNodepoolArrayOutput {
	return i.ToSksNodepoolArrayOutputWithContext(context.Background())
}

func (i SksNodepoolArray) ToSksNodepoolArrayOutputWithContext(ctx context.Context) SksNodepoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SksNodepoolArrayOutput)
}

// SksNodepoolMapInput is an input type that accepts SksNodepoolMap and SksNodepoolMapOutput values.
// You can construct a concrete instance of `SksNodepoolMapInput` via:
//
//	SksNodepoolMap{ "key": SksNodepoolArgs{...} }
type SksNodepoolMapInput interface {
	pulumi.Input

	ToSksNodepoolMapOutput() SksNodepoolMapOutput
	ToSksNodepoolMapOutputWithContext(context.Context) SksNodepoolMapOutput
}

type SksNodepoolMap map[string]SksNodepoolInput

func (SksNodepoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SksNodepool)(nil)).Elem()
}

func (i SksNodepoolMap) ToSksNodepoolMapOutput() SksNodepoolMapOutput {
	return i.ToSksNodepoolMapOutputWithContext(context.Background())
}

func (i SksNodepoolMap) ToSksNodepoolMapOutputWithContext(ctx context.Context) SksNodepoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SksNodepoolMapOutput)
}

type SksNodepoolOutput struct{ *pulumi.OutputState }

func (SksNodepoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SksNodepool)(nil)).Elem()
}

func (o SksNodepoolOutput) ToSksNodepoolOutput() SksNodepoolOutput {
	return o
}

func (o SksNodepoolOutput) ToSksNodepoolOutputWithContext(ctx context.Context) SksNodepoolOutput {
	return o
}

// A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
func (o SksNodepoolOutput) AntiAffinityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SksNodepool) pulumi.StringArrayOutput { return v.AntiAffinityGroupIds }).(pulumi.StringArrayOutput)
}

// ❗ The parent exoscale*sks*cluster ID.
func (o SksNodepoolOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *SksNodepool) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The pool creation date.
func (o SksNodepoolOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SksNodepool) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// A deploy target ID.
func (o SksNodepoolOutput) DeployTargetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SksNodepool) pulumi.StringPtrOutput { return v.DeployTargetId }).(pulumi.StringPtrOutput)
}

// A free-form text describing the pool.
func (o SksNodepoolOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SksNodepool) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The managed instances disk size (GiB; default: `50`).
func (o SksNodepoolOutput) DiskSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SksNodepool) pulumi.IntPtrOutput { return v.DiskSize }).(pulumi.IntPtrOutput)
}

// The underlying exoscale*instance*pool ID.
func (o SksNodepoolOutput) InstancePoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *SksNodepool) pulumi.StringOutput { return v.InstancePoolId }).(pulumi.StringOutput)
}

// The string used to prefix the managed instances name (default `pool`).
func (o SksNodepoolOutput) InstancePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SksNodepool) pulumi.StringPtrOutput { return v.InstancePrefix }).(pulumi.StringPtrOutput)
}

// The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
func (o SksNodepoolOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SksNodepool) pulumi.StringOutput { return v.InstanceType }).(pulumi.StringOutput)
}

// Enable IPV6 for the nodepool nodes
func (o SksNodepoolOutput) Ipv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SksNodepool) pulumi.BoolPtrOutput { return v.Ipv6 }).(pulumi.BoolPtrOutput)
}

// Configuration for this nodepool's kubelet image garbage collector
func (o SksNodepoolOutput) KubeletImageGcs() SksNodepoolKubeletImageGcArrayOutput {
	return o.ApplyT(func(v *SksNodepool) SksNodepoolKubeletImageGcArrayOutput { return v.KubeletImageGcs }).(SksNodepoolKubeletImageGcArrayOutput)
}

// A map of key/value labels.
func (o SksNodepoolOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SksNodepool) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The SKS node pool name.
func (o SksNodepoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SksNodepool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of exoscale*private*network (IDs) to be attached to the managed instances.
func (o SksNodepoolOutput) PrivateNetworkIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SksNodepool) pulumi.StringArrayOutput { return v.PrivateNetworkIds }).(pulumi.StringArrayOutput)
}

// A list of exoscale*security*group (IDs) to be attached to the managed instances.
func (o SksNodepoolOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SksNodepool) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

func (o SksNodepoolOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *SksNodepool) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The current pool state.
func (o SksNodepoolOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *SksNodepool) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Create nodes with non-standard partitioning for persistent storage (requires min 100G of disk space) (may only be set at creation time).
func (o SksNodepoolOutput) StorageLvm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SksNodepool) pulumi.BoolPtrOutput { return v.StorageLvm }).(pulumi.BoolPtrOutput)
}

// A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) ('taints = { \n\n = "\n\n:\n\n" }').
func (o SksNodepoolOutput) Taints() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SksNodepool) pulumi.StringMapOutput { return v.Taints }).(pulumi.StringMapOutput)
}

// The managed instances template ID.
func (o SksNodepoolOutput) TemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v *SksNodepool) pulumi.StringOutput { return v.TemplateId }).(pulumi.StringOutput)
}

// The managed instances version.
func (o SksNodepoolOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *SksNodepool) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
func (o SksNodepoolOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *SksNodepool) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type SksNodepoolArrayOutput struct{ *pulumi.OutputState }

func (SksNodepoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SksNodepool)(nil)).Elem()
}

func (o SksNodepoolArrayOutput) ToSksNodepoolArrayOutput() SksNodepoolArrayOutput {
	return o
}

func (o SksNodepoolArrayOutput) ToSksNodepoolArrayOutputWithContext(ctx context.Context) SksNodepoolArrayOutput {
	return o
}

func (o SksNodepoolArrayOutput) Index(i pulumi.IntInput) SksNodepoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SksNodepool {
		return vs[0].([]*SksNodepool)[vs[1].(int)]
	}).(SksNodepoolOutput)
}

type SksNodepoolMapOutput struct{ *pulumi.OutputState }

func (SksNodepoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SksNodepool)(nil)).Elem()
}

func (o SksNodepoolMapOutput) ToSksNodepoolMapOutput() SksNodepoolMapOutput {
	return o
}

func (o SksNodepoolMapOutput) ToSksNodepoolMapOutputWithContext(ctx context.Context) SksNodepoolMapOutput {
	return o
}

func (o SksNodepoolMapOutput) MapIndex(k pulumi.StringInput) SksNodepoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SksNodepool {
		return vs[0].(map[string]*SksNodepool)[vs[1].(string)]
	}).(SksNodepoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SksNodepoolInput)(nil)).Elem(), &SksNodepool{})
	pulumi.RegisterInputType(reflect.TypeOf((*SksNodepoolArrayInput)(nil)).Elem(), SksNodepoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SksNodepoolMapInput)(nil)).Elem(), SksNodepoolMap{})
	pulumi.RegisterOutputType(SksNodepoolOutput{})
	pulumi.RegisterOutputType(SksNodepoolArrayOutput{})
	pulumi.RegisterOutputType(SksNodepoolMapOutput{})
}
