// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "exoscale:index/antiAffinityGroup:AntiAffinityGroup":
		r = &AntiAffinityGroup{}
	case "exoscale:index/blockStorageVolume:BlockStorageVolume":
		r = &BlockStorageVolume{}
	case "exoscale:index/blockStorageVolumeSnapshot:BlockStorageVolumeSnapshot":
		r = &BlockStorageVolumeSnapshot{}
	case "exoscale:index/computeInstance:ComputeInstance":
		r = &ComputeInstance{}
	case "exoscale:index/database:Database":
		r = &Database{}
	case "exoscale:index/dbaas:Dbaas":
		r = &Dbaas{}
	case "exoscale:index/dbaasKafkaUser:DbaasKafkaUser":
		r = &DbaasKafkaUser{}
	case "exoscale:index/dbaasMysqlDatabase:DbaasMysqlDatabase":
		r = &DbaasMysqlDatabase{}
	case "exoscale:index/dbaasMysqlUser:DbaasMysqlUser":
		r = &DbaasMysqlUser{}
	case "exoscale:index/dbaasOpensearchUser:DbaasOpensearchUser":
		r = &DbaasOpensearchUser{}
	case "exoscale:index/dbaasPgDatabase:DbaasPgDatabase":
		r = &DbaasPgDatabase{}
	case "exoscale:index/dbaasPgUser:DbaasPgUser":
		r = &DbaasPgUser{}
	case "exoscale:index/domain:Domain":
		r = &Domain{}
	case "exoscale:index/domainRecord:DomainRecord":
		r = &DomainRecord{}
	case "exoscale:index/elasticIp:ElasticIp":
		r = &ElasticIp{}
	case "exoscale:index/iamAccessKey:IamAccessKey":
		r = &IamAccessKey{}
	case "exoscale:index/iamApiKey:IamApiKey":
		r = &IamApiKey{}
	case "exoscale:index/iamOrgPolicy:IamOrgPolicy":
		r = &IamOrgPolicy{}
	case "exoscale:index/iamRole:IamRole":
		r = &IamRole{}
	case "exoscale:index/instancePool:InstancePool":
		r = &InstancePool{}
	case "exoscale:index/nlb:Nlb":
		r = &Nlb{}
	case "exoscale:index/nlbService:NlbService":
		r = &NlbService{}
	case "exoscale:index/privateNetwork:PrivateNetwork":
		r = &PrivateNetwork{}
	case "exoscale:index/securityGroup:SecurityGroup":
		r = &SecurityGroup{}
	case "exoscale:index/securityGroupRule:SecurityGroupRule":
		r = &SecurityGroupRule{}
	case "exoscale:index/sksCluster:SksCluster":
		r = &SksCluster{}
	case "exoscale:index/sksKubeconfig:SksKubeconfig":
		r = &SksKubeconfig{}
	case "exoscale:index/sksNodepool:SksNodepool":
		r = &SksNodepool{}
	case "exoscale:index/sosBucketPolicy:SosBucketPolicy":
		r = &SosBucketPolicy{}
	case "exoscale:index/sshKey:SshKey":
		r = &SshKey{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:exoscale" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/antiAffinityGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/blockStorageVolume",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/blockStorageVolumeSnapshot",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/computeInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/database",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/dbaas",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/dbaasKafkaUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/dbaasMysqlDatabase",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/dbaasMysqlUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/dbaasOpensearchUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/dbaasPgDatabase",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/dbaasPgUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/domain",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/domainRecord",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/elasticIp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/iamAccessKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/iamApiKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/iamOrgPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/iamRole",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/instancePool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/nlb",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/nlbService",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/privateNetwork",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/securityGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/securityGroupRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/sksCluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/sksKubeconfig",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/sksNodepool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/sosBucketPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/sshKey",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"exoscale",
		&pkg{version},
	)
}
