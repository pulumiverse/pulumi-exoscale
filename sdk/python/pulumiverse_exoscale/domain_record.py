# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['DomainRecordArgs', 'DomainRecord']

@pulumi.input_type
class DomainRecordArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[builtins.str],
                 domain: pulumi.Input[builtins.str],
                 record_type: pulumi.Input[builtins.str],
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 prio: Optional[pulumi.Input[builtins.int]] = None,
                 ttl: Optional[pulumi.Input[builtins.int]] = None):
        """
        The set of arguments for constructing a DomainRecord resource.
        :param pulumi.Input[builtins.str] content: The record value. Format follows specific record type. For example SRV record format would be `<weight> <port> <target>`
        :param pulumi.Input[builtins.str] domain: ❗ The parent Domain to attach the record to.
        :param pulumi.Input[builtins.str] record_type: ❗ The record type (`A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`).
        :param pulumi.Input[builtins.str] name: The record name, Leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
        :param pulumi.Input[builtins.int] prio: The record priority (for types that support it; minimum `0`).
        :param pulumi.Input[builtins.int] ttl: The record TTL (seconds; minimum `0`; default: `3600`).
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "record_type", record_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if prio is not None:
            pulumi.set(__self__, "prio", prio)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[builtins.str]:
        """
        The record value. Format follows specific record type. For example SRV record format would be `<weight> <port> <target>`
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[builtins.str]:
        """
        ❗ The parent Domain to attach the record to.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> pulumi.Input[builtins.str]:
        """
        ❗ The record type (`A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`).
        """
        return pulumi.get(self, "record_type")

    @record_type.setter
    def record_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "record_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The record name, Leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def prio(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The record priority (for types that support it; minimum `0`).
        """
        return pulumi.get(self, "prio")

    @prio.setter
    def prio(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "prio", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The record TTL (seconds; minimum `0`; default: `3600`).
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ttl", value)


@pulumi.input_type
class _DomainRecordState:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[builtins.str]] = None,
                 content_normalized: Optional[pulumi.Input[builtins.str]] = None,
                 domain: Optional[pulumi.Input[builtins.str]] = None,
                 hostname: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 prio: Optional[pulumi.Input[builtins.int]] = None,
                 record_type: Optional[pulumi.Input[builtins.str]] = None,
                 ttl: Optional[pulumi.Input[builtins.int]] = None):
        """
        Input properties used for looking up and filtering DomainRecord resources.
        :param pulumi.Input[builtins.str] content: The record value. Format follows specific record type. For example SRV record format would be `<weight> <port> <target>`
        :param pulumi.Input[builtins.str] content_normalized: The normalized value of the record
        :param pulumi.Input[builtins.str] domain: ❗ The parent Domain to attach the record to.
        :param pulumi.Input[builtins.str] hostname: The record *Fully Qualified Domain Name* (FQDN). Useful for aliasing `A`/`AAAA` records with `CNAME`.
        :param pulumi.Input[builtins.str] name: The record name, Leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
        :param pulumi.Input[builtins.int] prio: The record priority (for types that support it; minimum `0`).
        :param pulumi.Input[builtins.str] record_type: ❗ The record type (`A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`).
        :param pulumi.Input[builtins.int] ttl: The record TTL (seconds; minimum `0`; default: `3600`).
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if content_normalized is not None:
            pulumi.set(__self__, "content_normalized", content_normalized)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if prio is not None:
            pulumi.set(__self__, "prio", prio)
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The record value. Format follows specific record type. For example SRV record format would be `<weight> <port> <target>`
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentNormalized")
    def content_normalized(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The normalized value of the record
        """
        return pulumi.get(self, "content_normalized")

    @content_normalized.setter
    def content_normalized(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "content_normalized", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        ❗ The parent Domain to attach the record to.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The record *Fully Qualified Domain Name* (FQDN). Useful for aliasing `A`/`AAAA` records with `CNAME`.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The record name, Leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def prio(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The record priority (for types that support it; minimum `0`).
        """
        return pulumi.get(self, "prio")

    @prio.setter
    def prio(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "prio", value)

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        ❗ The record type (`A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`).
        """
        return pulumi.get(self, "record_type")

    @record_type.setter
    def record_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "record_type", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The record TTL (seconds; minimum `0`; default: `3600`).
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ttl", value)


@pulumi.type_token("exoscale:index/domainRecord:DomainRecord")
class DomainRecord(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[builtins.str]] = None,
                 domain: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 prio: Optional[pulumi.Input[builtins.int]] = None,
                 record_type: Optional[pulumi.Input[builtins.str]] = None,
                 ttl: Optional[pulumi.Input[builtins.int]] = None,
                 __props__=None):
        """
        Manage Exoscale [DNS](https://community.exoscale.com/product/networking/dns/) Domain Records.

        Corresponding data source: exoscale_domain_record.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_exoscale as exoscale

        my_domain = exoscale.Domain("myDomain")
        my_host = exoscale.DomainRecord("myHost",
            domain=my_domain.id,
            record_type="A",
            content="1.2.3.4")
        my_host_alias = exoscale.DomainRecord("myHostAlias",
            domain=my_domain.id,
            record_type="CNAME",
            content=my_host.hostname)
        ```

        Please refer to the examples
        directory for complete configuration examples.

        ## Import

        An existing DNS domain record may be imported by `<ID>`:

        ```sh
        $ pulumi import exoscale:index/domainRecord:DomainRecord \\ 
        ```

          exoscale_domain_record.my_host \\

          f81d4fae-7dec-11d0-a765-00a0c91e6bf6

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] content: The record value. Format follows specific record type. For example SRV record format would be `<weight> <port> <target>`
        :param pulumi.Input[builtins.str] domain: ❗ The parent Domain to attach the record to.
        :param pulumi.Input[builtins.str] name: The record name, Leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
        :param pulumi.Input[builtins.int] prio: The record priority (for types that support it; minimum `0`).
        :param pulumi.Input[builtins.str] record_type: ❗ The record type (`A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`).
        :param pulumi.Input[builtins.int] ttl: The record TTL (seconds; minimum `0`; default: `3600`).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DomainRecordArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage Exoscale [DNS](https://community.exoscale.com/product/networking/dns/) Domain Records.

        Corresponding data source: exoscale_domain_record.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_exoscale as exoscale

        my_domain = exoscale.Domain("myDomain")
        my_host = exoscale.DomainRecord("myHost",
            domain=my_domain.id,
            record_type="A",
            content="1.2.3.4")
        my_host_alias = exoscale.DomainRecord("myHostAlias",
            domain=my_domain.id,
            record_type="CNAME",
            content=my_host.hostname)
        ```

        Please refer to the examples
        directory for complete configuration examples.

        ## Import

        An existing DNS domain record may be imported by `<ID>`:

        ```sh
        $ pulumi import exoscale:index/domainRecord:DomainRecord \\ 
        ```

          exoscale_domain_record.my_host \\

          f81d4fae-7dec-11d0-a765-00a0c91e6bf6

        :param str resource_name: The name of the resource.
        :param DomainRecordArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DomainRecordArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[builtins.str]] = None,
                 domain: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 prio: Optional[pulumi.Input[builtins.int]] = None,
                 record_type: Optional[pulumi.Input[builtins.str]] = None,
                 ttl: Optional[pulumi.Input[builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DomainRecordArgs.__new__(DomainRecordArgs)

            if content is None and not opts.urn:
                raise TypeError("Missing required property 'content'")
            __props__.__dict__["content"] = content
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            __props__.__dict__["name"] = name
            __props__.__dict__["prio"] = prio
            if record_type is None and not opts.urn:
                raise TypeError("Missing required property 'record_type'")
            __props__.__dict__["record_type"] = record_type
            __props__.__dict__["ttl"] = ttl
            __props__.__dict__["content_normalized"] = None
            __props__.__dict__["hostname"] = None
        super(DomainRecord, __self__).__init__(
            'exoscale:index/domainRecord:DomainRecord',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            content: Optional[pulumi.Input[builtins.str]] = None,
            content_normalized: Optional[pulumi.Input[builtins.str]] = None,
            domain: Optional[pulumi.Input[builtins.str]] = None,
            hostname: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            prio: Optional[pulumi.Input[builtins.int]] = None,
            record_type: Optional[pulumi.Input[builtins.str]] = None,
            ttl: Optional[pulumi.Input[builtins.int]] = None) -> 'DomainRecord':
        """
        Get an existing DomainRecord resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] content: The record value. Format follows specific record type. For example SRV record format would be `<weight> <port> <target>`
        :param pulumi.Input[builtins.str] content_normalized: The normalized value of the record
        :param pulumi.Input[builtins.str] domain: ❗ The parent Domain to attach the record to.
        :param pulumi.Input[builtins.str] hostname: The record *Fully Qualified Domain Name* (FQDN). Useful for aliasing `A`/`AAAA` records with `CNAME`.
        :param pulumi.Input[builtins.str] name: The record name, Leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
        :param pulumi.Input[builtins.int] prio: The record priority (for types that support it; minimum `0`).
        :param pulumi.Input[builtins.str] record_type: ❗ The record type (`A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`).
        :param pulumi.Input[builtins.int] ttl: The record TTL (seconds; minimum `0`; default: `3600`).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DomainRecordState.__new__(_DomainRecordState)

        __props__.__dict__["content"] = content
        __props__.__dict__["content_normalized"] = content_normalized
        __props__.__dict__["domain"] = domain
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["name"] = name
        __props__.__dict__["prio"] = prio
        __props__.__dict__["record_type"] = record_type
        __props__.__dict__["ttl"] = ttl
        return DomainRecord(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[builtins.str]:
        """
        The record value. Format follows specific record type. For example SRV record format would be `<weight> <port> <target>`
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentNormalized")
    def content_normalized(self) -> pulumi.Output[builtins.str]:
        """
        The normalized value of the record
        """
        return pulumi.get(self, "content_normalized")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[builtins.str]:
        """
        ❗ The parent Domain to attach the record to.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[builtins.str]:
        """
        The record *Fully Qualified Domain Name* (FQDN). Useful for aliasing `A`/`AAAA` records with `CNAME`.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The record name, Leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def prio(self) -> pulumi.Output[builtins.int]:
        """
        The record priority (for types that support it; minimum `0`).
        """
        return pulumi.get(self, "prio")

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> pulumi.Output[builtins.str]:
        """
        ❗ The record type (`A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`).
        """
        return pulumi.get(self, "record_type")

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[builtins.int]:
        """
        The record TTL (seconds; minimum `0`; default: `3600`).
        """
        return pulumi.get(self, "ttl")

