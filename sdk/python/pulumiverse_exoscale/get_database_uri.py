# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetDatabaseUriResult',
    'AwaitableGetDatabaseUriResult',
    'get_database_uri',
    'get_database_uri_output',
]

@pulumi.output_type
class GetDatabaseUriResult:
    """
    A collection of values returned by getDatabaseUri.
    """
    def __init__(__self__, db_name=None, host=None, id=None, name=None, password=None, port=None, schema=None, timeouts=None, type=None, uri=None, username=None, zone=None):
        if db_name and not isinstance(db_name, str):
            raise TypeError("Expected argument 'db_name' to be a str")
        pulumi.set(__self__, "db_name", db_name)
        if host and not isinstance(host, str):
            raise TypeError("Expected argument 'host' to be a str")
        pulumi.set(__self__, "host", host)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if schema and not isinstance(schema, str):
            raise TypeError("Expected argument 'schema' to be a str")
        pulumi.set(__self__, "schema", schema)
        if timeouts and not isinstance(timeouts, dict):
            raise TypeError("Expected argument 'timeouts' to be a dict")
        pulumi.set(__self__, "timeouts", timeouts)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uri and not isinstance(uri, str):
            raise TypeError("Expected argument 'uri' to be a str")
        pulumi.set(__self__, "uri", uri)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> _builtins.str:
        """
        Default database name
        """
        return pulumi.get(self, "db_name")

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        """
        Database service hostname
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of database service to match.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        """
        Admin user password
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Database service port
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def schema(self) -> _builtins.str:
        """
        Database service connection schema
        """
        return pulumi.get(self, "schema")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional['outputs.GetDatabaseUriTimeoutsResult']:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `valkey`, `grafana`).
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def uri(self) -> _builtins.str:
        """
        Database service connection URI.
        """
        return pulumi.get(self, "uri")

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        """
        Admin user username
        """
        return pulumi.get(self, "username")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> _builtins.str:
        """
        The Exoscale Zone name.
        """
        return pulumi.get(self, "zone")


class AwaitableGetDatabaseUriResult(GetDatabaseUriResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabaseUriResult(
            db_name=self.db_name,
            host=self.host,
            id=self.id,
            name=self.name,
            password=self.password,
            port=self.port,
            schema=self.schema,
            timeouts=self.timeouts,
            type=self.type,
            uri=self.uri,
            username=self.username,
            zone=self.zone)


def get_database_uri(name: Optional[_builtins.str] = None,
                     timeouts: Optional[Union['GetDatabaseUriTimeoutsArgs', 'GetDatabaseUriTimeoutsArgsDict']] = None,
                     type: Optional[_builtins.str] = None,
                     zone: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabaseUriResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import json
    import pulumi_exoscale as exoscale
    import pulumiverse_exoscale as exoscale

    my_database_database = exoscale.Database("my_database",
        zone="ch-gva-2",
        name="my-database",
        type="pg",
        plan="startup-4",
        maintenance_dow="sunday",
        maintenance_time="23:00:00",
        termination_protection=True,
        pg={
            "version": "13",
            "backup_schedule": "04:00",
            "ip_filters": [
                "1.2.3.4/32",
                "5.6.7.8/32",
            ],
            "pg_settings": json.dumps({
                "timezone": "Europe/Zurich",
            }),
        })
    my_database = exoscale.get_database_uri(name="my-database",
        type="pg",
        zone="ch-gva-2")
    pulumi.export("myDatabaseUri", my_database.uri)
    ```


    :param _builtins.str name: Name of database service to match.
    :param _builtins.str type: The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `valkey`, `grafana`).
    :param _builtins.str zone: The Exoscale Zone name.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['timeouts'] = timeouts
    __args__['type'] = type
    __args__['zone'] = zone
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('exoscale:index/getDatabaseUri:getDatabaseUri', __args__, opts=opts, typ=GetDatabaseUriResult).value

    return AwaitableGetDatabaseUriResult(
        db_name=pulumi.get(__ret__, 'db_name'),
        host=pulumi.get(__ret__, 'host'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        password=pulumi.get(__ret__, 'password'),
        port=pulumi.get(__ret__, 'port'),
        schema=pulumi.get(__ret__, 'schema'),
        timeouts=pulumi.get(__ret__, 'timeouts'),
        type=pulumi.get(__ret__, 'type'),
        uri=pulumi.get(__ret__, 'uri'),
        username=pulumi.get(__ret__, 'username'),
        zone=pulumi.get(__ret__, 'zone'))
def get_database_uri_output(name: Optional[pulumi.Input[_builtins.str]] = None,
                            timeouts: Optional[pulumi.Input[Optional[Union['GetDatabaseUriTimeoutsArgs', 'GetDatabaseUriTimeoutsArgsDict']]]] = None,
                            type: Optional[pulumi.Input[_builtins.str]] = None,
                            zone: Optional[pulumi.Input[_builtins.str]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDatabaseUriResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import json
    import pulumi_exoscale as exoscale
    import pulumiverse_exoscale as exoscale

    my_database_database = exoscale.Database("my_database",
        zone="ch-gva-2",
        name="my-database",
        type="pg",
        plan="startup-4",
        maintenance_dow="sunday",
        maintenance_time="23:00:00",
        termination_protection=True,
        pg={
            "version": "13",
            "backup_schedule": "04:00",
            "ip_filters": [
                "1.2.3.4/32",
                "5.6.7.8/32",
            ],
            "pg_settings": json.dumps({
                "timezone": "Europe/Zurich",
            }),
        })
    my_database = exoscale.get_database_uri(name="my-database",
        type="pg",
        zone="ch-gva-2")
    pulumi.export("myDatabaseUri", my_database.uri)
    ```


    :param _builtins.str name: Name of database service to match.
    :param _builtins.str type: The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `valkey`, `grafana`).
    :param _builtins.str zone: The Exoscale Zone name.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['timeouts'] = timeouts
    __args__['type'] = type
    __args__['zone'] = zone
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('exoscale:index/getDatabaseUri:getDatabaseUri', __args__, opts=opts, typ=GetDatabaseUriResult)
    return __ret__.apply(lambda __response__: GetDatabaseUriResult(
        db_name=pulumi.get(__response__, 'db_name'),
        host=pulumi.get(__response__, 'host'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        password=pulumi.get(__response__, 'password'),
        port=pulumi.get(__response__, 'port'),
        schema=pulumi.get(__response__, 'schema'),
        timeouts=pulumi.get(__response__, 'timeouts'),
        type=pulumi.get(__response__, 'type'),
        uri=pulumi.get(__response__, 'uri'),
        username=pulumi.get(__response__, 'username'),
        zone=pulumi.get(__response__, 'zone')))
