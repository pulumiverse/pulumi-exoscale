# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NlbServiceArgs', 'NlbService']

@pulumi.input_type
class NlbServiceArgs:
    def __init__(__self__, *,
                 healthchecks: pulumi.Input[Sequence[pulumi.Input['NlbServiceHealthcheckArgs']]],
                 instance_pool_id: pulumi.Input[builtins.str],
                 nlb_id: pulumi.Input[builtins.str],
                 port: pulumi.Input[builtins.int],
                 target_port: pulumi.Input[builtins.int],
                 zone: pulumi.Input[builtins.str],
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 strategy: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a NlbService resource.
        :param pulumi.Input[Sequence[pulumi.Input['NlbServiceHealthcheckArgs']]] healthchecks: The service health checking configuration.
        :param pulumi.Input[builtins.str] instance_pool_id: ❗ The exoscale*instance*pool (ID) to forward traffic to.
        :param pulumi.Input[builtins.str] nlb_id: ❗ The parent Nlb ID.
        :param pulumi.Input[builtins.int] port: The healthcheck port.
        :param pulumi.Input[builtins.int] target_port: The (TCP/UDP) port to forward traffic to (on target instance pool members).
        :param pulumi.Input[builtins.str] zone: ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        :param pulumi.Input[builtins.str] description: A free-form text describing the NLB service.
        :param pulumi.Input[builtins.str] name: The NLB service name.
        :param pulumi.Input[builtins.str] protocol: The protocol (`tcp`|`udp`; default: `tcp`).
        :param pulumi.Input[builtins.str] strategy: The strategy (`round-robin`|`source-hash`; default: `round-robin`).
        """
        pulumi.set(__self__, "healthchecks", healthchecks)
        pulumi.set(__self__, "instance_pool_id", instance_pool_id)
        pulumi.set(__self__, "nlb_id", nlb_id)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "target_port", target_port)
        pulumi.set(__self__, "zone", zone)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter
    def healthchecks(self) -> pulumi.Input[Sequence[pulumi.Input['NlbServiceHealthcheckArgs']]]:
        """
        The service health checking configuration.
        """
        return pulumi.get(self, "healthchecks")

    @healthchecks.setter
    def healthchecks(self, value: pulumi.Input[Sequence[pulumi.Input['NlbServiceHealthcheckArgs']]]):
        pulumi.set(self, "healthchecks", value)

    @property
    @pulumi.getter(name="instancePoolId")
    def instance_pool_id(self) -> pulumi.Input[builtins.str]:
        """
        ❗ The exoscale*instance*pool (ID) to forward traffic to.
        """
        return pulumi.get(self, "instance_pool_id")

    @instance_pool_id.setter
    def instance_pool_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "instance_pool_id", value)

    @property
    @pulumi.getter(name="nlbId")
    def nlb_id(self) -> pulumi.Input[builtins.str]:
        """
        ❗ The parent Nlb ID.
        """
        return pulumi.get(self, "nlb_id")

    @nlb_id.setter
    def nlb_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "nlb_id", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[builtins.int]:
        """
        The healthcheck port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> pulumi.Input[builtins.int]:
        """
        The (TCP/UDP) port to forward traffic to (on target instance pool members).
        """
        return pulumi.get(self, "target_port")

    @target_port.setter
    def target_port(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "target_port", value)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[builtins.str]:
        """
        ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A free-form text describing the NLB service.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The NLB service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The protocol (`tcp`|`udp`; default: `tcp`).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The strategy (`round-robin`|`source-hash`; default: `round-robin`).
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class _NlbServiceState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input['NlbServiceHealthcheckArgs']]]] = None,
                 instance_pool_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nlb_id: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 strategy: Optional[pulumi.Input[builtins.str]] = None,
                 target_port: Optional[pulumi.Input[builtins.int]] = None,
                 zone: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering NlbService resources.
        :param pulumi.Input[builtins.str] description: A free-form text describing the NLB service.
        :param pulumi.Input[Sequence[pulumi.Input['NlbServiceHealthcheckArgs']]] healthchecks: The service health checking configuration.
        :param pulumi.Input[builtins.str] instance_pool_id: ❗ The exoscale*instance*pool (ID) to forward traffic to.
        :param pulumi.Input[builtins.str] name: The NLB service name.
        :param pulumi.Input[builtins.str] nlb_id: ❗ The parent Nlb ID.
        :param pulumi.Input[builtins.int] port: The healthcheck port.
        :param pulumi.Input[builtins.str] protocol: The protocol (`tcp`|`udp`; default: `tcp`).
        :param pulumi.Input[builtins.str] strategy: The strategy (`round-robin`|`source-hash`; default: `round-robin`).
        :param pulumi.Input[builtins.int] target_port: The (TCP/UDP) port to forward traffic to (on target instance pool members).
        :param pulumi.Input[builtins.str] zone: ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if healthchecks is not None:
            pulumi.set(__self__, "healthchecks", healthchecks)
        if instance_pool_id is not None:
            pulumi.set(__self__, "instance_pool_id", instance_pool_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nlb_id is not None:
            pulumi.set(__self__, "nlb_id", nlb_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A free-form text describing the NLB service.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def healthchecks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NlbServiceHealthcheckArgs']]]]:
        """
        The service health checking configuration.
        """
        return pulumi.get(self, "healthchecks")

    @healthchecks.setter
    def healthchecks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NlbServiceHealthcheckArgs']]]]):
        pulumi.set(self, "healthchecks", value)

    @property
    @pulumi.getter(name="instancePoolId")
    def instance_pool_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        ❗ The exoscale*instance*pool (ID) to forward traffic to.
        """
        return pulumi.get(self, "instance_pool_id")

    @instance_pool_id.setter
    def instance_pool_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "instance_pool_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The NLB service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nlbId")
    def nlb_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        ❗ The parent Nlb ID.
        """
        return pulumi.get(self, "nlb_id")

    @nlb_id.setter
    def nlb_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "nlb_id", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The healthcheck port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The protocol (`tcp`|`udp`; default: `tcp`).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The strategy (`round-robin`|`source-hash`; default: `round-robin`).
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "strategy", value)

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The (TCP/UDP) port to forward traffic to (on target instance pool members).
        """
        return pulumi.get(self, "target_port")

    @target_port.setter
    def target_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "target_port", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("exoscale:index/nlbService:NlbService")
class NlbService(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NlbServiceHealthcheckArgs', 'NlbServiceHealthcheckArgsDict']]]]] = None,
                 instance_pool_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nlb_id: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 strategy: Optional[pulumi.Input[builtins.str]] = None,
                 target_port: Optional[pulumi.Input[builtins.int]] = None,
                 zone: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Manage Exoscale [Network Load Balancer (NLB)](https://community.exoscale.com/product/networking/nlb/) Services.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_exoscale as exoscale

        my_nlb = exoscale.Nlb("myNlb", zone="ch-gva-2")
        my_nlb_service = exoscale.NlbService("myNlbService",
            nlb_id=my_nlb.id,
            zone=my_nlb.zone,
            instance_pool_id=exoscale_instance_pool["my_instance_pool"]["id"],
            protocol="tcp",
            port=443,
            target_port=8443,
            strategy="round-robin",
            healthchecks=[{
                "mode": "https",
                "port": 8443,
                "uri": "/healthz",
                "tls_sni": "example.net",
                "interval": 5,
                "timeout": 3,
                "retries": 1,
            }])
        ```

        Please refer to the examples
        directory for complete configuration examples.

        ## Import

        An existing NLB service may be imported by `<nlb-ID>/<service-ID>@<zone>`:

        ```sh
        $ pulumi import exoscale:index/nlbService:NlbService \\ 
        ```

          exoscale_nlb_service.my_nlb_service \\

          f81d4fae-7dec-11d0-a765-00a0c91e6bf6/9ecc6b8b-73d4-4211-8ced-f7f29bb79524@ch-gva-2

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] description: A free-form text describing the NLB service.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NlbServiceHealthcheckArgs', 'NlbServiceHealthcheckArgsDict']]]] healthchecks: The service health checking configuration.
        :param pulumi.Input[builtins.str] instance_pool_id: ❗ The exoscale*instance*pool (ID) to forward traffic to.
        :param pulumi.Input[builtins.str] name: The NLB service name.
        :param pulumi.Input[builtins.str] nlb_id: ❗ The parent Nlb ID.
        :param pulumi.Input[builtins.int] port: The healthcheck port.
        :param pulumi.Input[builtins.str] protocol: The protocol (`tcp`|`udp`; default: `tcp`).
        :param pulumi.Input[builtins.str] strategy: The strategy (`round-robin`|`source-hash`; default: `round-robin`).
        :param pulumi.Input[builtins.int] target_port: The (TCP/UDP) port to forward traffic to (on target instance pool members).
        :param pulumi.Input[builtins.str] zone: ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NlbServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage Exoscale [Network Load Balancer (NLB)](https://community.exoscale.com/product/networking/nlb/) Services.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_exoscale as exoscale

        my_nlb = exoscale.Nlb("myNlb", zone="ch-gva-2")
        my_nlb_service = exoscale.NlbService("myNlbService",
            nlb_id=my_nlb.id,
            zone=my_nlb.zone,
            instance_pool_id=exoscale_instance_pool["my_instance_pool"]["id"],
            protocol="tcp",
            port=443,
            target_port=8443,
            strategy="round-robin",
            healthchecks=[{
                "mode": "https",
                "port": 8443,
                "uri": "/healthz",
                "tls_sni": "example.net",
                "interval": 5,
                "timeout": 3,
                "retries": 1,
            }])
        ```

        Please refer to the examples
        directory for complete configuration examples.

        ## Import

        An existing NLB service may be imported by `<nlb-ID>/<service-ID>@<zone>`:

        ```sh
        $ pulumi import exoscale:index/nlbService:NlbService \\ 
        ```

          exoscale_nlb_service.my_nlb_service \\

          f81d4fae-7dec-11d0-a765-00a0c91e6bf6/9ecc6b8b-73d4-4211-8ced-f7f29bb79524@ch-gva-2

        :param str resource_name: The name of the resource.
        :param NlbServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NlbServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NlbServiceHealthcheckArgs', 'NlbServiceHealthcheckArgsDict']]]]] = None,
                 instance_pool_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nlb_id: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 strategy: Optional[pulumi.Input[builtins.str]] = None,
                 target_port: Optional[pulumi.Input[builtins.int]] = None,
                 zone: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NlbServiceArgs.__new__(NlbServiceArgs)

            __props__.__dict__["description"] = description
            if healthchecks is None and not opts.urn:
                raise TypeError("Missing required property 'healthchecks'")
            __props__.__dict__["healthchecks"] = healthchecks
            if instance_pool_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_pool_id'")
            __props__.__dict__["instance_pool_id"] = instance_pool_id
            __props__.__dict__["name"] = name
            if nlb_id is None and not opts.urn:
                raise TypeError("Missing required property 'nlb_id'")
            __props__.__dict__["nlb_id"] = nlb_id
            if port is None and not opts.urn:
                raise TypeError("Missing required property 'port'")
            __props__.__dict__["port"] = port
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["strategy"] = strategy
            if target_port is None and not opts.urn:
                raise TypeError("Missing required property 'target_port'")
            __props__.__dict__["target_port"] = target_port
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
            __props__.__dict__["state"] = None
        super(NlbService, __self__).__init__(
            'exoscale:index/nlbService:NlbService',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NlbServiceHealthcheckArgs', 'NlbServiceHealthcheckArgsDict']]]]] = None,
            instance_pool_id: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            nlb_id: Optional[pulumi.Input[builtins.str]] = None,
            port: Optional[pulumi.Input[builtins.int]] = None,
            protocol: Optional[pulumi.Input[builtins.str]] = None,
            state: Optional[pulumi.Input[builtins.str]] = None,
            strategy: Optional[pulumi.Input[builtins.str]] = None,
            target_port: Optional[pulumi.Input[builtins.int]] = None,
            zone: Optional[pulumi.Input[builtins.str]] = None) -> 'NlbService':
        """
        Get an existing NlbService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] description: A free-form text describing the NLB service.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NlbServiceHealthcheckArgs', 'NlbServiceHealthcheckArgsDict']]]] healthchecks: The service health checking configuration.
        :param pulumi.Input[builtins.str] instance_pool_id: ❗ The exoscale*instance*pool (ID) to forward traffic to.
        :param pulumi.Input[builtins.str] name: The NLB service name.
        :param pulumi.Input[builtins.str] nlb_id: ❗ The parent Nlb ID.
        :param pulumi.Input[builtins.int] port: The healthcheck port.
        :param pulumi.Input[builtins.str] protocol: The protocol (`tcp`|`udp`; default: `tcp`).
        :param pulumi.Input[builtins.str] strategy: The strategy (`round-robin`|`source-hash`; default: `round-robin`).
        :param pulumi.Input[builtins.int] target_port: The (TCP/UDP) port to forward traffic to (on target instance pool members).
        :param pulumi.Input[builtins.str] zone: ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NlbServiceState.__new__(_NlbServiceState)

        __props__.__dict__["description"] = description
        __props__.__dict__["healthchecks"] = healthchecks
        __props__.__dict__["instance_pool_id"] = instance_pool_id
        __props__.__dict__["name"] = name
        __props__.__dict__["nlb_id"] = nlb_id
        __props__.__dict__["port"] = port
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["state"] = state
        __props__.__dict__["strategy"] = strategy
        __props__.__dict__["target_port"] = target_port
        __props__.__dict__["zone"] = zone
        return NlbService(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        A free-form text describing the NLB service.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def healthchecks(self) -> pulumi.Output[Sequence['outputs.NlbServiceHealthcheck']]:
        """
        The service health checking configuration.
        """
        return pulumi.get(self, "healthchecks")

    @property
    @pulumi.getter(name="instancePoolId")
    def instance_pool_id(self) -> pulumi.Output[builtins.str]:
        """
        ❗ The exoscale*instance*pool (ID) to forward traffic to.
        """
        return pulumi.get(self, "instance_pool_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The NLB service name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nlbId")
    def nlb_id(self) -> pulumi.Output[builtins.str]:
        """
        ❗ The parent Nlb ID.
        """
        return pulumi.get(self, "nlb_id")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[builtins.int]:
        """
        The healthcheck port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The protocol (`tcp`|`udp`; default: `tcp`).
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def strategy(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The strategy (`round-robin`|`source-hash`; default: `round-robin`).
        """
        return pulumi.get(self, "strategy")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> pulumi.Output[builtins.int]:
        """
        The (TCP/UDP) port to forward traffic to (on target instance pool members).
        """
        return pulumi.get(self, "target_port")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[builtins.str]:
        """
        ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        return pulumi.get(self, "zone")

