# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DbaasKafkaUserArgs', 'DbaasKafkaUser']

@pulumi.input_type
class DbaasKafkaUserArgs:
    def __init__(__self__, *,
                 service: pulumi.Input[builtins.str],
                 username: pulumi.Input[builtins.str],
                 zone: pulumi.Input[builtins.str],
                 timeouts: Optional[pulumi.Input['DbaasKafkaUserTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a DbaasKafkaUser resource.
        :param pulumi.Input[builtins.str] service: ❗ The name of the database service.
        :param pulumi.Input[builtins.str] username: ❗ The name of the user for this service.
        :param pulumi.Input[builtins.str] zone: ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "zone", zone)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[builtins.str]:
        """
        ❗ The name of the database service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[builtins.str]:
        """
        ❗ The name of the user for this service.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[builtins.str]:
        """
        ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['DbaasKafkaUserTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['DbaasKafkaUserTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _DbaasKafkaUserState:
    def __init__(__self__, *,
                 access_cert: Optional[pulumi.Input[builtins.str]] = None,
                 access_cert_expiry: Optional[pulumi.Input[builtins.str]] = None,
                 access_key: Optional[pulumi.Input[builtins.str]] = None,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 service: Optional[pulumi.Input[builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['DbaasKafkaUserTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 username: Optional[pulumi.Input[builtins.str]] = None,
                 zone: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering DbaasKafkaUser resources.
        :param pulumi.Input[builtins.str] access_cert: Access certificate for the user.
        :param pulumi.Input[builtins.str] access_cert_expiry: Access certificate expiry date.
        :param pulumi.Input[builtins.str] access_key: Access certificate key for the user.
        :param pulumi.Input[builtins.str] password: The password of the service user.
        :param pulumi.Input[builtins.str] service: ❗ The name of the database service.
        :param pulumi.Input[builtins.str] type: The type of the service user.
        :param pulumi.Input[builtins.str] username: ❗ The name of the user for this service.
        :param pulumi.Input[builtins.str] zone: ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        if access_cert is not None:
            pulumi.set(__self__, "access_cert", access_cert)
        if access_cert_expiry is not None:
            pulumi.set(__self__, "access_cert_expiry", access_cert_expiry)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accessCert")
    def access_cert(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Access certificate for the user.
        """
        return pulumi.get(self, "access_cert")

    @access_cert.setter
    def access_cert(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "access_cert", value)

    @property
    @pulumi.getter(name="accessCertExpiry")
    def access_cert_expiry(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Access certificate expiry date.
        """
        return pulumi.get(self, "access_cert_expiry")

    @access_cert_expiry.setter
    def access_cert_expiry(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "access_cert_expiry", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Access certificate key for the user.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The password of the service user.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        ❗ The name of the database service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['DbaasKafkaUserTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['DbaasKafkaUserTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of the service user.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        ❗ The name of the user for this service.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("exoscale:index/dbaasKafkaUser:DbaasKafkaUser")
class DbaasKafkaUser(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 service: Optional[pulumi.Input[builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['DbaasKafkaUserTimeoutsArgs', 'DbaasKafkaUserTimeoutsArgsDict']]] = None,
                 username: Optional[pulumi.Input[builtins.str]] = None,
                 zone: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Manage service users for a Kafka Exoscale [Database Services (DBaaS)](https://community.exoscale.com/documentation/dbaas/).

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] service: ❗ The name of the database service.
        :param pulumi.Input[builtins.str] username: ❗ The name of the user for this service.
        :param pulumi.Input[builtins.str] zone: ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DbaasKafkaUserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage service users for a Kafka Exoscale [Database Services (DBaaS)](https://community.exoscale.com/documentation/dbaas/).

        :param str resource_name: The name of the resource.
        :param DbaasKafkaUserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DbaasKafkaUserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 service: Optional[pulumi.Input[builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['DbaasKafkaUserTimeoutsArgs', 'DbaasKafkaUserTimeoutsArgsDict']]] = None,
                 username: Optional[pulumi.Input[builtins.str]] = None,
                 zone: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DbaasKafkaUserArgs.__new__(DbaasKafkaUserArgs)

            if service is None and not opts.urn:
                raise TypeError("Missing required property 'service'")
            __props__.__dict__["service"] = service
            __props__.__dict__["timeouts"] = timeouts
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__.__dict__["username"] = username
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
            __props__.__dict__["access_cert"] = None
            __props__.__dict__["access_cert_expiry"] = None
            __props__.__dict__["access_key"] = None
            __props__.__dict__["password"] = None
            __props__.__dict__["type"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["accessCert", "accessKey", "password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(DbaasKafkaUser, __self__).__init__(
            'exoscale:index/dbaasKafkaUser:DbaasKafkaUser',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_cert: Optional[pulumi.Input[builtins.str]] = None,
            access_cert_expiry: Optional[pulumi.Input[builtins.str]] = None,
            access_key: Optional[pulumi.Input[builtins.str]] = None,
            password: Optional[pulumi.Input[builtins.str]] = None,
            service: Optional[pulumi.Input[builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['DbaasKafkaUserTimeoutsArgs', 'DbaasKafkaUserTimeoutsArgsDict']]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None,
            username: Optional[pulumi.Input[builtins.str]] = None,
            zone: Optional[pulumi.Input[builtins.str]] = None) -> 'DbaasKafkaUser':
        """
        Get an existing DbaasKafkaUser resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] access_cert: Access certificate for the user.
        :param pulumi.Input[builtins.str] access_cert_expiry: Access certificate expiry date.
        :param pulumi.Input[builtins.str] access_key: Access certificate key for the user.
        :param pulumi.Input[builtins.str] password: The password of the service user.
        :param pulumi.Input[builtins.str] service: ❗ The name of the database service.
        :param pulumi.Input[builtins.str] type: The type of the service user.
        :param pulumi.Input[builtins.str] username: ❗ The name of the user for this service.
        :param pulumi.Input[builtins.str] zone: ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DbaasKafkaUserState.__new__(_DbaasKafkaUserState)

        __props__.__dict__["access_cert"] = access_cert
        __props__.__dict__["access_cert_expiry"] = access_cert_expiry
        __props__.__dict__["access_key"] = access_key
        __props__.__dict__["password"] = password
        __props__.__dict__["service"] = service
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        __props__.__dict__["username"] = username
        __props__.__dict__["zone"] = zone
        return DbaasKafkaUser(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessCert")
    def access_cert(self) -> pulumi.Output[builtins.str]:
        """
        Access certificate for the user.
        """
        return pulumi.get(self, "access_cert")

    @property
    @pulumi.getter(name="accessCertExpiry")
    def access_cert_expiry(self) -> pulumi.Output[builtins.str]:
        """
        Access certificate expiry date.
        """
        return pulumi.get(self, "access_cert_expiry")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Output[builtins.str]:
        """
        Access certificate key for the user.
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[builtins.str]:
        """
        The password of the service user.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def service(self) -> pulumi.Output[builtins.str]:
        """
        ❗ The name of the database service.
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.DbaasKafkaUserTimeouts']]:
        return pulumi.get(self, "timeouts")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        The type of the service user.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[builtins.str]:
        """
        ❗ The name of the user for this service.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[builtins.str]:
        """
        ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        return pulumi.get(self, "zone")

