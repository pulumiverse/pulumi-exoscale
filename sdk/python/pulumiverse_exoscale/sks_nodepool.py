# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SksNodepoolArgs', 'SksNodepool']

@pulumi.input_type
class SksNodepoolArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[builtins.str],
                 instance_type: pulumi.Input[builtins.str],
                 size: pulumi.Input[builtins.int],
                 zone: pulumi.Input[builtins.str],
                 anti_affinity_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 deploy_target_id: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 disk_size: Optional[pulumi.Input[builtins.int]] = None,
                 instance_prefix: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6: Optional[pulumi.Input[builtins.bool]] = None,
                 kubelet_image_gcs: Optional[pulumi.Input[Sequence[pulumi.Input['SksNodepoolKubeletImageGcArgs']]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 private_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 storage_lvm: Optional[pulumi.Input[builtins.bool]] = None,
                 taints: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a SksNodepool resource.
        :param pulumi.Input[builtins.str] cluster_id: ❗ The parent exoscale*sks*cluster ID.
        :param pulumi.Input[builtins.str] instance_type: The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
        :param pulumi.Input[builtins.str] zone: ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] anti_affinity_group_ids: A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
        :param pulumi.Input[builtins.str] deploy_target_id: A deploy target ID.
        :param pulumi.Input[builtins.str] description: A free-form text describing the pool.
        :param pulumi.Input[builtins.int] disk_size: The managed instances disk size (GiB; default: `50`).
        :param pulumi.Input[builtins.str] instance_prefix: The string used to prefix the managed instances name (default `pool`).
        :param pulumi.Input[builtins.bool] ipv6: Enable IPV6 for the nodepool nodes
        :param pulumi.Input[Sequence[pulumi.Input['SksNodepoolKubeletImageGcArgs']]] kubelet_image_gcs: Configuration for this nodepool's kubelet image garbage collector
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: A map of key/value labels.
        :param pulumi.Input[builtins.str] name: The SKS node pool name.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] private_network_ids: A list of exoscale*private*network (IDs) to be attached to the managed instances.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] security_group_ids: A list of exoscale*security*group (IDs) to be attached to the managed instances.
        :param pulumi.Input[builtins.bool] storage_lvm: Create nodes with non-standard partitioning for persistent storage (requires min 100G of disk space) (may only be set at creation time).
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] taints: A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) ('taints = { \\n\\n = "\\n\\n:\\n\\n" }').
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "zone", zone)
        if anti_affinity_group_ids is not None:
            pulumi.set(__self__, "anti_affinity_group_ids", anti_affinity_group_ids)
        if deploy_target_id is not None:
            pulumi.set(__self__, "deploy_target_id", deploy_target_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if instance_prefix is not None:
            pulumi.set(__self__, "instance_prefix", instance_prefix)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if kubelet_image_gcs is not None:
            pulumi.set(__self__, "kubelet_image_gcs", kubelet_image_gcs)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_network_ids is not None:
            pulumi.set(__self__, "private_network_ids", private_network_ids)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if storage_lvm is not None:
            pulumi.set(__self__, "storage_lvm", storage_lvm)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[builtins.str]:
        """
        ❗ The parent exoscale*sks*cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[builtins.str]:
        """
        The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def size(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[builtins.str]:
        """
        ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter(name="antiAffinityGroupIds")
    def anti_affinity_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
        """
        return pulumi.get(self, "anti_affinity_group_ids")

    @anti_affinity_group_ids.setter
    def anti_affinity_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "anti_affinity_group_ids", value)

    @property
    @pulumi.getter(name="deployTargetId")
    def deploy_target_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A deploy target ID.
        """
        return pulumi.get(self, "deploy_target_id")

    @deploy_target_id.setter
    def deploy_target_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "deploy_target_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A free-form text describing the pool.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The managed instances disk size (GiB; default: `50`).
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="instancePrefix")
    def instance_prefix(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The string used to prefix the managed instances name (default `pool`).
        """
        return pulumi.get(self, "instance_prefix")

    @instance_prefix.setter
    def instance_prefix(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "instance_prefix", value)

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable IPV6 for the nodepool nodes
        """
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ipv6", value)

    @property
    @pulumi.getter(name="kubeletImageGcs")
    def kubelet_image_gcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SksNodepoolKubeletImageGcArgs']]]]:
        """
        Configuration for this nodepool's kubelet image garbage collector
        """
        return pulumi.get(self, "kubelet_image_gcs")

    @kubelet_image_gcs.setter
    def kubelet_image_gcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SksNodepoolKubeletImageGcArgs']]]]):
        pulumi.set(self, "kubelet_image_gcs", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        A map of key/value labels.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The SKS node pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateNetworkIds")
    def private_network_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        A list of exoscale*private*network (IDs) to be attached to the managed instances.
        """
        return pulumi.get(self, "private_network_ids")

    @private_network_ids.setter
    def private_network_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "private_network_ids", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        A list of exoscale*security*group (IDs) to be attached to the managed instances.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="storageLvm")
    def storage_lvm(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Create nodes with non-standard partitioning for persistent storage (requires min 100G of disk space) (may only be set at creation time).
        """
        return pulumi.get(self, "storage_lvm")

    @storage_lvm.setter
    def storage_lvm(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "storage_lvm", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) ('taints = { \\n\\n = "\\n\\n:\\n\\n" }').
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "taints", value)


@pulumi.input_type
class _SksNodepoolState:
    def __init__(__self__, *,
                 anti_affinity_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 cluster_id: Optional[pulumi.Input[builtins.str]] = None,
                 created_at: Optional[pulumi.Input[builtins.str]] = None,
                 deploy_target_id: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 disk_size: Optional[pulumi.Input[builtins.int]] = None,
                 instance_pool_id: Optional[pulumi.Input[builtins.str]] = None,
                 instance_prefix: Optional[pulumi.Input[builtins.str]] = None,
                 instance_type: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6: Optional[pulumi.Input[builtins.bool]] = None,
                 kubelet_image_gcs: Optional[pulumi.Input[Sequence[pulumi.Input['SksNodepoolKubeletImageGcArgs']]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 private_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 size: Optional[pulumi.Input[builtins.int]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 storage_lvm: Optional[pulumi.Input[builtins.bool]] = None,
                 taints: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 template_id: Optional[pulumi.Input[builtins.str]] = None,
                 version: Optional[pulumi.Input[builtins.str]] = None,
                 zone: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering SksNodepool resources.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] anti_affinity_group_ids: A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
        :param pulumi.Input[builtins.str] cluster_id: ❗ The parent exoscale*sks*cluster ID.
        :param pulumi.Input[builtins.str] created_at: The pool creation date.
        :param pulumi.Input[builtins.str] deploy_target_id: A deploy target ID.
        :param pulumi.Input[builtins.str] description: A free-form text describing the pool.
        :param pulumi.Input[builtins.int] disk_size: The managed instances disk size (GiB; default: `50`).
        :param pulumi.Input[builtins.str] instance_pool_id: The underlying exoscale*instance*pool ID.
        :param pulumi.Input[builtins.str] instance_prefix: The string used to prefix the managed instances name (default `pool`).
        :param pulumi.Input[builtins.str] instance_type: The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
        :param pulumi.Input[builtins.bool] ipv6: Enable IPV6 for the nodepool nodes
        :param pulumi.Input[Sequence[pulumi.Input['SksNodepoolKubeletImageGcArgs']]] kubelet_image_gcs: Configuration for this nodepool's kubelet image garbage collector
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: A map of key/value labels.
        :param pulumi.Input[builtins.str] name: The SKS node pool name.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] private_network_ids: A list of exoscale*private*network (IDs) to be attached to the managed instances.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] security_group_ids: A list of exoscale*security*group (IDs) to be attached to the managed instances.
        :param pulumi.Input[builtins.str] state: The current pool state.
        :param pulumi.Input[builtins.bool] storage_lvm: Create nodes with non-standard partitioning for persistent storage (requires min 100G of disk space) (may only be set at creation time).
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] taints: A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) ('taints = { \\n\\n = "\\n\\n:\\n\\n" }').
        :param pulumi.Input[builtins.str] template_id: The managed instances template ID.
        :param pulumi.Input[builtins.str] version: The managed instances version.
        :param pulumi.Input[builtins.str] zone: ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        if anti_affinity_group_ids is not None:
            pulumi.set(__self__, "anti_affinity_group_ids", anti_affinity_group_ids)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if deploy_target_id is not None:
            pulumi.set(__self__, "deploy_target_id", deploy_target_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if instance_pool_id is not None:
            pulumi.set(__self__, "instance_pool_id", instance_pool_id)
        if instance_prefix is not None:
            pulumi.set(__self__, "instance_prefix", instance_prefix)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if kubelet_image_gcs is not None:
            pulumi.set(__self__, "kubelet_image_gcs", kubelet_image_gcs)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_network_ids is not None:
            pulumi.set(__self__, "private_network_ids", private_network_ids)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if storage_lvm is not None:
            pulumi.set(__self__, "storage_lvm", storage_lvm)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="antiAffinityGroupIds")
    def anti_affinity_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
        """
        return pulumi.get(self, "anti_affinity_group_ids")

    @anti_affinity_group_ids.setter
    def anti_affinity_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "anti_affinity_group_ids", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        ❗ The parent exoscale*sks*cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The pool creation date.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="deployTargetId")
    def deploy_target_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A deploy target ID.
        """
        return pulumi.get(self, "deploy_target_id")

    @deploy_target_id.setter
    def deploy_target_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "deploy_target_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A free-form text describing the pool.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The managed instances disk size (GiB; default: `50`).
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="instancePoolId")
    def instance_pool_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The underlying exoscale*instance*pool ID.
        """
        return pulumi.get(self, "instance_pool_id")

    @instance_pool_id.setter
    def instance_pool_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "instance_pool_id", value)

    @property
    @pulumi.getter(name="instancePrefix")
    def instance_prefix(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The string used to prefix the managed instances name (default `pool`).
        """
        return pulumi.get(self, "instance_prefix")

    @instance_prefix.setter
    def instance_prefix(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "instance_prefix", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable IPV6 for the nodepool nodes
        """
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ipv6", value)

    @property
    @pulumi.getter(name="kubeletImageGcs")
    def kubelet_image_gcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SksNodepoolKubeletImageGcArgs']]]]:
        """
        Configuration for this nodepool's kubelet image garbage collector
        """
        return pulumi.get(self, "kubelet_image_gcs")

    @kubelet_image_gcs.setter
    def kubelet_image_gcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SksNodepoolKubeletImageGcArgs']]]]):
        pulumi.set(self, "kubelet_image_gcs", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        A map of key/value labels.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The SKS node pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateNetworkIds")
    def private_network_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        A list of exoscale*private*network (IDs) to be attached to the managed instances.
        """
        return pulumi.get(self, "private_network_ids")

    @private_network_ids.setter
    def private_network_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "private_network_ids", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        A list of exoscale*security*group (IDs) to be attached to the managed instances.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The current pool state.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="storageLvm")
    def storage_lvm(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Create nodes with non-standard partitioning for persistent storage (requires min 100G of disk space) (may only be set at creation time).
        """
        return pulumi.get(self, "storage_lvm")

    @storage_lvm.setter
    def storage_lvm(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "storage_lvm", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) ('taints = { \\n\\n = "\\n\\n:\\n\\n" }').
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "taints", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The managed instances template ID.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The managed instances version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("exoscale:index/sksNodepool:SksNodepool")
class SksNodepool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 anti_affinity_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 cluster_id: Optional[pulumi.Input[builtins.str]] = None,
                 deploy_target_id: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 disk_size: Optional[pulumi.Input[builtins.int]] = None,
                 instance_prefix: Optional[pulumi.Input[builtins.str]] = None,
                 instance_type: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6: Optional[pulumi.Input[builtins.bool]] = None,
                 kubelet_image_gcs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SksNodepoolKubeletImageGcArgs', 'SksNodepoolKubeletImageGcArgsDict']]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 private_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 size: Optional[pulumi.Input[builtins.int]] = None,
                 storage_lvm: Optional[pulumi.Input[builtins.bool]] = None,
                 taints: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 zone: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Manage Exoscale [Scalable Kubernetes Service (SKS)](https://community.exoscale.com/product/compute/containers/) Node Pools.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_exoscale as exoscale

        my_sks_cluster = exoscale.SksCluster("mySksCluster", zone="ch-gva-2")
        my_sks_nodepool = exoscale.SksNodepool("mySksNodepool",
            cluster_id=my_sks_cluster.id,
            zone=my_sks_cluster.zone,
            instance_type="standard.medium",
            size=3)
        ```

        Please refer to the examples
        directory for complete configuration examples.

        ## Import

        An existing SKS node pool may be imported by `<cluster-ID>/<nodepool-ID>@<zone>`:

        ```sh
        $ pulumi import exoscale:index/sksNodepool:SksNodepool \\ 
        ```

          exoscale_sks_nodepool.my_sks_nodepool \\

          f81d4fae-7dec-11d0-a765-00a0c91e6bf6/9ecc6b8b-73d4-4211-8ced-f7f29bb79524@ch-gva-2

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] anti_affinity_group_ids: A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
        :param pulumi.Input[builtins.str] cluster_id: ❗ The parent exoscale*sks*cluster ID.
        :param pulumi.Input[builtins.str] deploy_target_id: A deploy target ID.
        :param pulumi.Input[builtins.str] description: A free-form text describing the pool.
        :param pulumi.Input[builtins.int] disk_size: The managed instances disk size (GiB; default: `50`).
        :param pulumi.Input[builtins.str] instance_prefix: The string used to prefix the managed instances name (default `pool`).
        :param pulumi.Input[builtins.str] instance_type: The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
        :param pulumi.Input[builtins.bool] ipv6: Enable IPV6 for the nodepool nodes
        :param pulumi.Input[Sequence[pulumi.Input[Union['SksNodepoolKubeletImageGcArgs', 'SksNodepoolKubeletImageGcArgsDict']]]] kubelet_image_gcs: Configuration for this nodepool's kubelet image garbage collector
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: A map of key/value labels.
        :param pulumi.Input[builtins.str] name: The SKS node pool name.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] private_network_ids: A list of exoscale*private*network (IDs) to be attached to the managed instances.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] security_group_ids: A list of exoscale*security*group (IDs) to be attached to the managed instances.
        :param pulumi.Input[builtins.bool] storage_lvm: Create nodes with non-standard partitioning for persistent storage (requires min 100G of disk space) (may only be set at creation time).
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] taints: A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) ('taints = { \\n\\n = "\\n\\n:\\n\\n" }').
        :param pulumi.Input[builtins.str] zone: ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SksNodepoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage Exoscale [Scalable Kubernetes Service (SKS)](https://community.exoscale.com/product/compute/containers/) Node Pools.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_exoscale as exoscale

        my_sks_cluster = exoscale.SksCluster("mySksCluster", zone="ch-gva-2")
        my_sks_nodepool = exoscale.SksNodepool("mySksNodepool",
            cluster_id=my_sks_cluster.id,
            zone=my_sks_cluster.zone,
            instance_type="standard.medium",
            size=3)
        ```

        Please refer to the examples
        directory for complete configuration examples.

        ## Import

        An existing SKS node pool may be imported by `<cluster-ID>/<nodepool-ID>@<zone>`:

        ```sh
        $ pulumi import exoscale:index/sksNodepool:SksNodepool \\ 
        ```

          exoscale_sks_nodepool.my_sks_nodepool \\

          f81d4fae-7dec-11d0-a765-00a0c91e6bf6/9ecc6b8b-73d4-4211-8ced-f7f29bb79524@ch-gva-2

        :param str resource_name: The name of the resource.
        :param SksNodepoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SksNodepoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 anti_affinity_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 cluster_id: Optional[pulumi.Input[builtins.str]] = None,
                 deploy_target_id: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 disk_size: Optional[pulumi.Input[builtins.int]] = None,
                 instance_prefix: Optional[pulumi.Input[builtins.str]] = None,
                 instance_type: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6: Optional[pulumi.Input[builtins.bool]] = None,
                 kubelet_image_gcs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SksNodepoolKubeletImageGcArgs', 'SksNodepoolKubeletImageGcArgsDict']]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 private_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 size: Optional[pulumi.Input[builtins.int]] = None,
                 storage_lvm: Optional[pulumi.Input[builtins.bool]] = None,
                 taints: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 zone: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SksNodepoolArgs.__new__(SksNodepoolArgs)

            __props__.__dict__["anti_affinity_group_ids"] = anti_affinity_group_ids
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["deploy_target_id"] = deploy_target_id
            __props__.__dict__["description"] = description
            __props__.__dict__["disk_size"] = disk_size
            __props__.__dict__["instance_prefix"] = instance_prefix
            if instance_type is None and not opts.urn:
                raise TypeError("Missing required property 'instance_type'")
            __props__.__dict__["instance_type"] = instance_type
            __props__.__dict__["ipv6"] = ipv6
            __props__.__dict__["kubelet_image_gcs"] = kubelet_image_gcs
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["private_network_ids"] = private_network_ids
            __props__.__dict__["security_group_ids"] = security_group_ids
            if size is None and not opts.urn:
                raise TypeError("Missing required property 'size'")
            __props__.__dict__["size"] = size
            __props__.__dict__["storage_lvm"] = storage_lvm
            __props__.__dict__["taints"] = taints
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
            __props__.__dict__["created_at"] = None
            __props__.__dict__["instance_pool_id"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["template_id"] = None
            __props__.__dict__["version"] = None
        super(SksNodepool, __self__).__init__(
            'exoscale:index/sksNodepool:SksNodepool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            anti_affinity_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            cluster_id: Optional[pulumi.Input[builtins.str]] = None,
            created_at: Optional[pulumi.Input[builtins.str]] = None,
            deploy_target_id: Optional[pulumi.Input[builtins.str]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            disk_size: Optional[pulumi.Input[builtins.int]] = None,
            instance_pool_id: Optional[pulumi.Input[builtins.str]] = None,
            instance_prefix: Optional[pulumi.Input[builtins.str]] = None,
            instance_type: Optional[pulumi.Input[builtins.str]] = None,
            ipv6: Optional[pulumi.Input[builtins.bool]] = None,
            kubelet_image_gcs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SksNodepoolKubeletImageGcArgs', 'SksNodepoolKubeletImageGcArgsDict']]]]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            private_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            size: Optional[pulumi.Input[builtins.int]] = None,
            state: Optional[pulumi.Input[builtins.str]] = None,
            storage_lvm: Optional[pulumi.Input[builtins.bool]] = None,
            taints: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            template_id: Optional[pulumi.Input[builtins.str]] = None,
            version: Optional[pulumi.Input[builtins.str]] = None,
            zone: Optional[pulumi.Input[builtins.str]] = None) -> 'SksNodepool':
        """
        Get an existing SksNodepool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] anti_affinity_group_ids: A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
        :param pulumi.Input[builtins.str] cluster_id: ❗ The parent exoscale*sks*cluster ID.
        :param pulumi.Input[builtins.str] created_at: The pool creation date.
        :param pulumi.Input[builtins.str] deploy_target_id: A deploy target ID.
        :param pulumi.Input[builtins.str] description: A free-form text describing the pool.
        :param pulumi.Input[builtins.int] disk_size: The managed instances disk size (GiB; default: `50`).
        :param pulumi.Input[builtins.str] instance_pool_id: The underlying exoscale*instance*pool ID.
        :param pulumi.Input[builtins.str] instance_prefix: The string used to prefix the managed instances name (default `pool`).
        :param pulumi.Input[builtins.str] instance_type: The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
        :param pulumi.Input[builtins.bool] ipv6: Enable IPV6 for the nodepool nodes
        :param pulumi.Input[Sequence[pulumi.Input[Union['SksNodepoolKubeletImageGcArgs', 'SksNodepoolKubeletImageGcArgsDict']]]] kubelet_image_gcs: Configuration for this nodepool's kubelet image garbage collector
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: A map of key/value labels.
        :param pulumi.Input[builtins.str] name: The SKS node pool name.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] private_network_ids: A list of exoscale*private*network (IDs) to be attached to the managed instances.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] security_group_ids: A list of exoscale*security*group (IDs) to be attached to the managed instances.
        :param pulumi.Input[builtins.str] state: The current pool state.
        :param pulumi.Input[builtins.bool] storage_lvm: Create nodes with non-standard partitioning for persistent storage (requires min 100G of disk space) (may only be set at creation time).
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] taints: A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) ('taints = { \\n\\n = "\\n\\n:\\n\\n" }').
        :param pulumi.Input[builtins.str] template_id: The managed instances template ID.
        :param pulumi.Input[builtins.str] version: The managed instances version.
        :param pulumi.Input[builtins.str] zone: ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SksNodepoolState.__new__(_SksNodepoolState)

        __props__.__dict__["anti_affinity_group_ids"] = anti_affinity_group_ids
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["deploy_target_id"] = deploy_target_id
        __props__.__dict__["description"] = description
        __props__.__dict__["disk_size"] = disk_size
        __props__.__dict__["instance_pool_id"] = instance_pool_id
        __props__.__dict__["instance_prefix"] = instance_prefix
        __props__.__dict__["instance_type"] = instance_type
        __props__.__dict__["ipv6"] = ipv6
        __props__.__dict__["kubelet_image_gcs"] = kubelet_image_gcs
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["private_network_ids"] = private_network_ids
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["size"] = size
        __props__.__dict__["state"] = state
        __props__.__dict__["storage_lvm"] = storage_lvm
        __props__.__dict__["taints"] = taints
        __props__.__dict__["template_id"] = template_id
        __props__.__dict__["version"] = version
        __props__.__dict__["zone"] = zone
        return SksNodepool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="antiAffinityGroupIds")
    def anti_affinity_group_ids(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
        """
        return pulumi.get(self, "anti_affinity_group_ids")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[builtins.str]:
        """
        ❗ The parent exoscale*sks*cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[builtins.str]:
        """
        The pool creation date.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="deployTargetId")
    def deploy_target_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        A deploy target ID.
        """
        return pulumi.get(self, "deploy_target_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        A free-form text describing the pool.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The managed instances disk size (GiB; default: `50`).
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="instancePoolId")
    def instance_pool_id(self) -> pulumi.Output[builtins.str]:
        """
        The underlying exoscale*instance*pool ID.
        """
        return pulumi.get(self, "instance_pool_id")

    @property
    @pulumi.getter(name="instancePrefix")
    def instance_prefix(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The string used to prefix the managed instances name (default `pool`).
        """
        return pulumi.get(self, "instance_prefix")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Output[builtins.str]:
        """
        The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter
    def ipv6(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Enable IPV6 for the nodepool nodes
        """
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter(name="kubeletImageGcs")
    def kubelet_image_gcs(self) -> pulumi.Output[Optional[Sequence['outputs.SksNodepoolKubeletImageGc']]]:
        """
        Configuration for this nodepool's kubelet image garbage collector
        """
        return pulumi.get(self, "kubelet_image_gcs")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        A map of key/value labels.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The SKS node pool name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateNetworkIds")
    def private_network_ids(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        A list of exoscale*private*network (IDs) to be attached to the managed instances.
        """
        return pulumi.get(self, "private_network_ids")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        A list of exoscale*security*group (IDs) to be attached to the managed instances.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def size(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[builtins.str]:
        """
        The current pool state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="storageLvm")
    def storage_lvm(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Create nodes with non-standard partitioning for persistent storage (requires min 100G of disk space) (may only be set at creation time).
        """
        return pulumi.get(self, "storage_lvm")

    @property
    @pulumi.getter
    def taints(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) ('taints = { \\n\\n = "\\n\\n:\\n\\n" }').
        """
        return pulumi.get(self, "taints")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Output[builtins.str]:
        """
        The managed instances template ID.
        """
        return pulumi.get(self, "template_id")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[builtins.str]:
        """
        The managed instances version.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[builtins.str]:
        """
        ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        return pulumi.get(self, "zone")

