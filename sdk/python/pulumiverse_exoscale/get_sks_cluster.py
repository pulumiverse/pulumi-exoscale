# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSksClusterResult',
    'AwaitableGetSksClusterResult',
    'get_sks_cluster',
    'get_sks_cluster_output',
]

@pulumi.output_type
class GetSksClusterResult:
    """
    A collection of values returned by getSksCluster.
    """
    def __init__(__self__, addons=None, aggregation_ca=None, audit=None, auto_upgrade=None, cni=None, control_plane_ca=None, created_at=None, description=None, enable_kube_proxy=None, endpoint=None, exoscale_ccm=None, exoscale_csi=None, feature_gates=None, id=None, kubelet_ca=None, labels=None, metrics_server=None, name=None, nodepools=None, oidc=None, service_level=None, state=None, version=None, zone=None):
        if addons and not isinstance(addons, list):
            raise TypeError("Expected argument 'addons' to be a list")
        pulumi.set(__self__, "addons", addons)
        if aggregation_ca and not isinstance(aggregation_ca, str):
            raise TypeError("Expected argument 'aggregation_ca' to be a str")
        pulumi.set(__self__, "aggregation_ca", aggregation_ca)
        if audit and not isinstance(audit, dict):
            raise TypeError("Expected argument 'audit' to be a dict")
        pulumi.set(__self__, "audit", audit)
        if auto_upgrade and not isinstance(auto_upgrade, bool):
            raise TypeError("Expected argument 'auto_upgrade' to be a bool")
        pulumi.set(__self__, "auto_upgrade", auto_upgrade)
        if cni and not isinstance(cni, str):
            raise TypeError("Expected argument 'cni' to be a str")
        pulumi.set(__self__, "cni", cni)
        if control_plane_ca and not isinstance(control_plane_ca, str):
            raise TypeError("Expected argument 'control_plane_ca' to be a str")
        pulumi.set(__self__, "control_plane_ca", control_plane_ca)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enable_kube_proxy and not isinstance(enable_kube_proxy, bool):
            raise TypeError("Expected argument 'enable_kube_proxy' to be a bool")
        pulumi.set(__self__, "enable_kube_proxy", enable_kube_proxy)
        if endpoint and not isinstance(endpoint, str):
            raise TypeError("Expected argument 'endpoint' to be a str")
        pulumi.set(__self__, "endpoint", endpoint)
        if exoscale_ccm and not isinstance(exoscale_ccm, bool):
            raise TypeError("Expected argument 'exoscale_ccm' to be a bool")
        pulumi.set(__self__, "exoscale_ccm", exoscale_ccm)
        if exoscale_csi and not isinstance(exoscale_csi, bool):
            raise TypeError("Expected argument 'exoscale_csi' to be a bool")
        pulumi.set(__self__, "exoscale_csi", exoscale_csi)
        if feature_gates and not isinstance(feature_gates, list):
            raise TypeError("Expected argument 'feature_gates' to be a list")
        pulumi.set(__self__, "feature_gates", feature_gates)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kubelet_ca and not isinstance(kubelet_ca, str):
            raise TypeError("Expected argument 'kubelet_ca' to be a str")
        pulumi.set(__self__, "kubelet_ca", kubelet_ca)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if metrics_server and not isinstance(metrics_server, bool):
            raise TypeError("Expected argument 'metrics_server' to be a bool")
        pulumi.set(__self__, "metrics_server", metrics_server)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nodepools and not isinstance(nodepools, list):
            raise TypeError("Expected argument 'nodepools' to be a list")
        pulumi.set(__self__, "nodepools", nodepools)
        if oidc and not isinstance(oidc, dict):
            raise TypeError("Expected argument 'oidc' to be a dict")
        pulumi.set(__self__, "oidc", oidc)
        if service_level and not isinstance(service_level, str):
            raise TypeError("Expected argument 'service_level' to be a str")
        pulumi.set(__self__, "service_level", service_level)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.""")
    def addons(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "addons")

    @_builtins.property
    @pulumi.getter(name="aggregationCa")
    def aggregation_ca(self) -> _builtins.str:
        """
        The CA certificate (in PEM format) for TLS communications between the control plane and the aggregation layer (e.g. `metrics-server`).
        """
        return pulumi.get(self, "aggregation_ca")

    @_builtins.property
    @pulumi.getter
    def audit(self) -> Optional['outputs.GetSksClusterAuditResult']:
        return pulumi.get(self, "audit")

    @_builtins.property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> Optional[_builtins.bool]:
        """
        Enable automatic upgrading of the control plane version.
        """
        return pulumi.get(self, "auto_upgrade")

    @_builtins.property
    @pulumi.getter
    def cni(self) -> Optional[_builtins.str]:
        """
        The CNI plugin that is to be used. Available options are "calico" or "cilium". Defaults to "calico". Setting empty string will result in a cluster with no CNI.
        """
        return pulumi.get(self, "cni")

    @_builtins.property
    @pulumi.getter(name="controlPlaneCa")
    def control_plane_ca(self) -> _builtins.str:
        """
        The CA certificate (in PEM format) for TLS communications between control plane components.
        """
        return pulumi.get(self, "control_plane_ca")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The cluster creation date.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        A free-form text describing the cluster.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enableKubeProxy")
    def enable_kube_proxy(self) -> _builtins.bool:
        """
        ❗ Indicates whether to deploy the Kubernetes network proxy. (may only be set at creation time)
        """
        return pulumi.get(self, "enable_kube_proxy")

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> _builtins.str:
        """
        The cluster API endpoint.
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter(name="exoscaleCcm")
    def exoscale_ccm(self) -> Optional[_builtins.bool]:
        """
        Deploy the Exoscale [Cloud Controller Manager](https://github.com/exoscale/exoscale-cloud-controller-manager/) in the control plane (boolean; default: `true`; may only be set at creation time).
        """
        return pulumi.get(self, "exoscale_ccm")

    @_builtins.property
    @pulumi.getter(name="exoscaleCsi")
    def exoscale_csi(self) -> Optional[_builtins.bool]:
        """
        Deploy the Exoscale [Container Storage Interface](https://github.com/exoscale/exoscale-csi-driver/) on worker nodes (boolean; default: `false`; requires the CCM to be enabled).
        """
        return pulumi.get(self, "exoscale_csi")

    @_builtins.property
    @pulumi.getter(name="featureGates")
    def feature_gates(self) -> Optional[Sequence[_builtins.str]]:
        """
        Feature gates options for the cluster.
        """
        return pulumi.get(self, "feature_gates")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="kubeletCa")
    def kubelet_ca(self) -> _builtins.str:
        """
        The CA certificate (in PEM format) for TLS communications between kubelets and the control plane.
        """
        return pulumi.get(self, "kubelet_ca")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        A map of key/value labels.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="metricsServer")
    def metrics_server(self) -> Optional[_builtins.bool]:
        """
        Deploy the [Kubernetes Metrics Server](https://github.com/kubernetes-sigs/metrics-server/) in the control plane (boolean; default: `true`; may only be set at creation time).
        """
        return pulumi.get(self, "metrics_server")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def nodepools(self) -> Sequence[_builtins.str]:
        """
        The list of exoscale*sks*nodepool (IDs) attached to the cluster.
        """
        return pulumi.get(self, "nodepools")

    @_builtins.property
    @pulumi.getter
    def oidc(self) -> 'outputs.GetSksClusterOidcResult':
        """
        An OpenID Connect configuration to provide to the Kubernetes API server (may only be set at creation time). Structure is documented below.
        """
        return pulumi.get(self, "oidc")

    @_builtins.property
    @pulumi.getter(name="serviceLevel")
    def service_level(self) -> Optional[_builtins.str]:
        """
        The service level of the control plane (`pro` or `starter`; default: `pro`; may only be set at creation time).
        """
        return pulumi.get(self, "service_level")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The cluster state.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version of the control plane (default: latest version available from the API; see `exo compute sks versions` for reference; may only be set at creation time).
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> _builtins.str:
        return pulumi.get(self, "zone")


class AwaitableGetSksClusterResult(GetSksClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSksClusterResult(
            addons=self.addons,
            aggregation_ca=self.aggregation_ca,
            audit=self.audit,
            auto_upgrade=self.auto_upgrade,
            cni=self.cni,
            control_plane_ca=self.control_plane_ca,
            created_at=self.created_at,
            description=self.description,
            enable_kube_proxy=self.enable_kube_proxy,
            endpoint=self.endpoint,
            exoscale_ccm=self.exoscale_ccm,
            exoscale_csi=self.exoscale_csi,
            feature_gates=self.feature_gates,
            id=self.id,
            kubelet_ca=self.kubelet_ca,
            labels=self.labels,
            metrics_server=self.metrics_server,
            name=self.name,
            nodepools=self.nodepools,
            oidc=self.oidc,
            service_level=self.service_level,
            state=self.state,
            version=self.version,
            zone=self.zone)


def get_sks_cluster(addons: Optional[Sequence[_builtins.str]] = None,
                    aggregation_ca: Optional[_builtins.str] = None,
                    audit: Optional[Union['GetSksClusterAuditArgs', 'GetSksClusterAuditArgsDict']] = None,
                    auto_upgrade: Optional[_builtins.bool] = None,
                    cni: Optional[_builtins.str] = None,
                    control_plane_ca: Optional[_builtins.str] = None,
                    created_at: Optional[_builtins.str] = None,
                    description: Optional[_builtins.str] = None,
                    enable_kube_proxy: Optional[_builtins.bool] = None,
                    endpoint: Optional[_builtins.str] = None,
                    exoscale_ccm: Optional[_builtins.bool] = None,
                    exoscale_csi: Optional[_builtins.bool] = None,
                    feature_gates: Optional[Sequence[_builtins.str]] = None,
                    id: Optional[_builtins.str] = None,
                    kubelet_ca: Optional[_builtins.str] = None,
                    labels: Optional[Mapping[str, _builtins.str]] = None,
                    metrics_server: Optional[_builtins.bool] = None,
                    name: Optional[_builtins.str] = None,
                    nodepools: Optional[Sequence[_builtins.str]] = None,
                    oidc: Optional[Union['GetSksClusterOidcArgs', 'GetSksClusterOidcArgsDict']] = None,
                    service_level: Optional[_builtins.str] = None,
                    state: Optional[_builtins.str] = None,
                    version: Optional[_builtins.str] = None,
                    zone: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSksClusterResult:
    """
    Use this data source to access information about an existing resource.

    :param _builtins.str aggregation_ca: The CA certificate (in PEM format) for TLS communications between the control plane and the aggregation layer (e.g. `metrics-server`).
    :param _builtins.bool auto_upgrade: Enable automatic upgrading of the control plane version.
    :param _builtins.str cni: The CNI plugin that is to be used. Available options are "calico" or "cilium". Defaults to "calico". Setting empty string will result in a cluster with no CNI.
    :param _builtins.str control_plane_ca: The CA certificate (in PEM format) for TLS communications between control plane components.
    :param _builtins.str created_at: The cluster creation date.
    :param _builtins.str description: A free-form text describing the cluster.
    :param _builtins.bool enable_kube_proxy: ❗ Indicates whether to deploy the Kubernetes network proxy. (may only be set at creation time)
    :param _builtins.str endpoint: The cluster API endpoint.
    :param _builtins.bool exoscale_ccm: Deploy the Exoscale [Cloud Controller Manager](https://github.com/exoscale/exoscale-cloud-controller-manager/) in the control plane (boolean; default: `true`; may only be set at creation time).
    :param _builtins.bool exoscale_csi: Deploy the Exoscale [Container Storage Interface](https://github.com/exoscale/exoscale-csi-driver/) on worker nodes (boolean; default: `false`; requires the CCM to be enabled).
    :param Sequence[_builtins.str] feature_gates: Feature gates options for the cluster.
    :param _builtins.str id: The ID of this resource.
    :param _builtins.str kubelet_ca: The CA certificate (in PEM format) for TLS communications between kubelets and the control plane.
    :param Mapping[str, _builtins.str] labels: A map of key/value labels.
    :param _builtins.bool metrics_server: Deploy the [Kubernetes Metrics Server](https://github.com/kubernetes-sigs/metrics-server/) in the control plane (boolean; default: `true`; may only be set at creation time).
    :param Sequence[_builtins.str] nodepools: The list of exoscale*sks*nodepool (IDs) attached to the cluster.
    :param Union['GetSksClusterOidcArgs', 'GetSksClusterOidcArgsDict'] oidc: An OpenID Connect configuration to provide to the Kubernetes API server (may only be set at creation time). Structure is documented below.
    :param _builtins.str service_level: The service level of the control plane (`pro` or `starter`; default: `pro`; may only be set at creation time).
    :param _builtins.str state: The cluster state.
    :param _builtins.str version: The version of the control plane (default: latest version available from the API; see `exo compute sks versions` for reference; may only be set at creation time).
    """
    __args__ = dict()
    __args__['addons'] = addons
    __args__['aggregationCa'] = aggregation_ca
    __args__['audit'] = audit
    __args__['autoUpgrade'] = auto_upgrade
    __args__['cni'] = cni
    __args__['controlPlaneCa'] = control_plane_ca
    __args__['createdAt'] = created_at
    __args__['description'] = description
    __args__['enableKubeProxy'] = enable_kube_proxy
    __args__['endpoint'] = endpoint
    __args__['exoscaleCcm'] = exoscale_ccm
    __args__['exoscaleCsi'] = exoscale_csi
    __args__['featureGates'] = feature_gates
    __args__['id'] = id
    __args__['kubeletCa'] = kubelet_ca
    __args__['labels'] = labels
    __args__['metricsServer'] = metrics_server
    __args__['name'] = name
    __args__['nodepools'] = nodepools
    __args__['oidc'] = oidc
    __args__['serviceLevel'] = service_level
    __args__['state'] = state
    __args__['version'] = version
    __args__['zone'] = zone
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('exoscale:index/getSksCluster:getSksCluster', __args__, opts=opts, typ=GetSksClusterResult).value

    return AwaitableGetSksClusterResult(
        addons=pulumi.get(__ret__, 'addons'),
        aggregation_ca=pulumi.get(__ret__, 'aggregation_ca'),
        audit=pulumi.get(__ret__, 'audit'),
        auto_upgrade=pulumi.get(__ret__, 'auto_upgrade'),
        cni=pulumi.get(__ret__, 'cni'),
        control_plane_ca=pulumi.get(__ret__, 'control_plane_ca'),
        created_at=pulumi.get(__ret__, 'created_at'),
        description=pulumi.get(__ret__, 'description'),
        enable_kube_proxy=pulumi.get(__ret__, 'enable_kube_proxy'),
        endpoint=pulumi.get(__ret__, 'endpoint'),
        exoscale_ccm=pulumi.get(__ret__, 'exoscale_ccm'),
        exoscale_csi=pulumi.get(__ret__, 'exoscale_csi'),
        feature_gates=pulumi.get(__ret__, 'feature_gates'),
        id=pulumi.get(__ret__, 'id'),
        kubelet_ca=pulumi.get(__ret__, 'kubelet_ca'),
        labels=pulumi.get(__ret__, 'labels'),
        metrics_server=pulumi.get(__ret__, 'metrics_server'),
        name=pulumi.get(__ret__, 'name'),
        nodepools=pulumi.get(__ret__, 'nodepools'),
        oidc=pulumi.get(__ret__, 'oidc'),
        service_level=pulumi.get(__ret__, 'service_level'),
        state=pulumi.get(__ret__, 'state'),
        version=pulumi.get(__ret__, 'version'),
        zone=pulumi.get(__ret__, 'zone'))
def get_sks_cluster_output(addons: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                           aggregation_ca: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           audit: Optional[pulumi.Input[Optional[Union['GetSksClusterAuditArgs', 'GetSksClusterAuditArgsDict']]]] = None,
                           auto_upgrade: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                           cni: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           control_plane_ca: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           created_at: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           enable_kube_proxy: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                           endpoint: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           exoscale_ccm: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                           exoscale_csi: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                           feature_gates: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                           id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           kubelet_ca: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           labels: Optional[pulumi.Input[Optional[Mapping[str, _builtins.str]]]] = None,
                           metrics_server: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                           name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           nodepools: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                           oidc: Optional[pulumi.Input[Optional[Union['GetSksClusterOidcArgs', 'GetSksClusterOidcArgsDict']]]] = None,
                           service_level: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           state: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           zone: Optional[pulumi.Input[_builtins.str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSksClusterResult]:
    """
    Use this data source to access information about an existing resource.

    :param _builtins.str aggregation_ca: The CA certificate (in PEM format) for TLS communications between the control plane and the aggregation layer (e.g. `metrics-server`).
    :param _builtins.bool auto_upgrade: Enable automatic upgrading of the control plane version.
    :param _builtins.str cni: The CNI plugin that is to be used. Available options are "calico" or "cilium". Defaults to "calico". Setting empty string will result in a cluster with no CNI.
    :param _builtins.str control_plane_ca: The CA certificate (in PEM format) for TLS communications between control plane components.
    :param _builtins.str created_at: The cluster creation date.
    :param _builtins.str description: A free-form text describing the cluster.
    :param _builtins.bool enable_kube_proxy: ❗ Indicates whether to deploy the Kubernetes network proxy. (may only be set at creation time)
    :param _builtins.str endpoint: The cluster API endpoint.
    :param _builtins.bool exoscale_ccm: Deploy the Exoscale [Cloud Controller Manager](https://github.com/exoscale/exoscale-cloud-controller-manager/) in the control plane (boolean; default: `true`; may only be set at creation time).
    :param _builtins.bool exoscale_csi: Deploy the Exoscale [Container Storage Interface](https://github.com/exoscale/exoscale-csi-driver/) on worker nodes (boolean; default: `false`; requires the CCM to be enabled).
    :param Sequence[_builtins.str] feature_gates: Feature gates options for the cluster.
    :param _builtins.str id: The ID of this resource.
    :param _builtins.str kubelet_ca: The CA certificate (in PEM format) for TLS communications between kubelets and the control plane.
    :param Mapping[str, _builtins.str] labels: A map of key/value labels.
    :param _builtins.bool metrics_server: Deploy the [Kubernetes Metrics Server](https://github.com/kubernetes-sigs/metrics-server/) in the control plane (boolean; default: `true`; may only be set at creation time).
    :param Sequence[_builtins.str] nodepools: The list of exoscale*sks*nodepool (IDs) attached to the cluster.
    :param Union['GetSksClusterOidcArgs', 'GetSksClusterOidcArgsDict'] oidc: An OpenID Connect configuration to provide to the Kubernetes API server (may only be set at creation time). Structure is documented below.
    :param _builtins.str service_level: The service level of the control plane (`pro` or `starter`; default: `pro`; may only be set at creation time).
    :param _builtins.str state: The cluster state.
    :param _builtins.str version: The version of the control plane (default: latest version available from the API; see `exo compute sks versions` for reference; may only be set at creation time).
    """
    __args__ = dict()
    __args__['addons'] = addons
    __args__['aggregationCa'] = aggregation_ca
    __args__['audit'] = audit
    __args__['autoUpgrade'] = auto_upgrade
    __args__['cni'] = cni
    __args__['controlPlaneCa'] = control_plane_ca
    __args__['createdAt'] = created_at
    __args__['description'] = description
    __args__['enableKubeProxy'] = enable_kube_proxy
    __args__['endpoint'] = endpoint
    __args__['exoscaleCcm'] = exoscale_ccm
    __args__['exoscaleCsi'] = exoscale_csi
    __args__['featureGates'] = feature_gates
    __args__['id'] = id
    __args__['kubeletCa'] = kubelet_ca
    __args__['labels'] = labels
    __args__['metricsServer'] = metrics_server
    __args__['name'] = name
    __args__['nodepools'] = nodepools
    __args__['oidc'] = oidc
    __args__['serviceLevel'] = service_level
    __args__['state'] = state
    __args__['version'] = version
    __args__['zone'] = zone
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('exoscale:index/getSksCluster:getSksCluster', __args__, opts=opts, typ=GetSksClusterResult)
    return __ret__.apply(lambda __response__: GetSksClusterResult(
        addons=pulumi.get(__response__, 'addons'),
        aggregation_ca=pulumi.get(__response__, 'aggregation_ca'),
        audit=pulumi.get(__response__, 'audit'),
        auto_upgrade=pulumi.get(__response__, 'auto_upgrade'),
        cni=pulumi.get(__response__, 'cni'),
        control_plane_ca=pulumi.get(__response__, 'control_plane_ca'),
        created_at=pulumi.get(__response__, 'created_at'),
        description=pulumi.get(__response__, 'description'),
        enable_kube_proxy=pulumi.get(__response__, 'enable_kube_proxy'),
        endpoint=pulumi.get(__response__, 'endpoint'),
        exoscale_ccm=pulumi.get(__response__, 'exoscale_ccm'),
        exoscale_csi=pulumi.get(__response__, 'exoscale_csi'),
        feature_gates=pulumi.get(__response__, 'feature_gates'),
        id=pulumi.get(__response__, 'id'),
        kubelet_ca=pulumi.get(__response__, 'kubelet_ca'),
        labels=pulumi.get(__response__, 'labels'),
        metrics_server=pulumi.get(__response__, 'metrics_server'),
        name=pulumi.get(__response__, 'name'),
        nodepools=pulumi.get(__response__, 'nodepools'),
        oidc=pulumi.get(__response__, 'oidc'),
        service_level=pulumi.get(__response__, 'service_level'),
        state=pulumi.get(__response__, 'state'),
        version=pulumi.get(__response__, 'version'),
        zone=pulumi.get(__response__, 'zone')))
