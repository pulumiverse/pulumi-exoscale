# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SksClusterArgs', 'SksCluster']

@pulumi.input_type
class SksClusterArgs:
    def __init__(__self__, *,
                 zone: pulumi.Input[builtins.str],
                 addons: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 auto_upgrade: Optional[pulumi.Input[builtins.bool]] = None,
                 cni: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 enable_kube_proxy: Optional[pulumi.Input[builtins.bool]] = None,
                 exoscale_ccm: Optional[pulumi.Input[builtins.bool]] = None,
                 exoscale_csi: Optional[pulumi.Input[builtins.bool]] = None,
                 feature_gates: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 metrics_server: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 oidc: Optional[pulumi.Input['SksClusterOidcArgs']] = None,
                 service_level: Optional[pulumi.Input[builtins.str]] = None,
                 version: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a SksCluster resource.
        :param pulumi.Input[builtins.str] zone: ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        :param pulumi.Input[builtins.bool] auto_upgrade: Enable automatic upgrading of the control plane version.
        :param pulumi.Input[builtins.str] cni: The CNI plugin that is to be used. Available options are "calico" or "cilium". Defaults to "calico". Setting empty string will result in a cluster with no CNI.
        :param pulumi.Input[builtins.str] description: A free-form text describing the cluster.
        :param pulumi.Input[builtins.bool] enable_kube_proxy: ❗ Indicates whether to deploy the Kubernetes network proxy. (may only be set at creation time)
        :param pulumi.Input[builtins.bool] exoscale_ccm: Deploy the Exoscale [Cloud Controller Manager](https://github.com/exoscale/exoscale-cloud-controller-manager/) in the control plane (boolean; default: `true`; may only be set at creation time).
        :param pulumi.Input[builtins.bool] exoscale_csi: Deploy the Exoscale [Container Storage Interface](https://github.com/exoscale/exoscale-csi-driver/) on worker nodes (boolean; default: `false`; requires the CCM to be enabled).
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] feature_gates: Feature gates options for the cluster.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: A map of key/value labels.
        :param pulumi.Input[builtins.bool] metrics_server: Deploy the [Kubernetes Metrics Server](https://github.com/kubernetes-sigs/metrics-server/) in the control plane (boolean; default: `true`; may only be set at creation time).
        :param pulumi.Input[builtins.str] name: The SKS cluster name.
        :param pulumi.Input['SksClusterOidcArgs'] oidc: An OpenID Connect configuration to provide to the Kubernetes API server (may only be set at creation time). Structure is documented below.
        :param pulumi.Input[builtins.str] service_level: The service level of the control plane (`pro` or `starter`; default: `pro`; may only be set at creation time).
        :param pulumi.Input[builtins.str] version: The version of the control plane (default: latest version available from the API; see `exo compute sks versions` for reference; may only be set at creation time).
        """
        pulumi.set(__self__, "zone", zone)
        if addons is not None:
            warnings.warn("""This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.""", DeprecationWarning)
            pulumi.log.warn("""addons is deprecated: This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.""")
        if addons is not None:
            pulumi.set(__self__, "addons", addons)
        if auto_upgrade is not None:
            pulumi.set(__self__, "auto_upgrade", auto_upgrade)
        if cni is not None:
            pulumi.set(__self__, "cni", cni)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_kube_proxy is not None:
            pulumi.set(__self__, "enable_kube_proxy", enable_kube_proxy)
        if exoscale_ccm is not None:
            pulumi.set(__self__, "exoscale_ccm", exoscale_ccm)
        if exoscale_csi is not None:
            pulumi.set(__self__, "exoscale_csi", exoscale_csi)
        if feature_gates is not None:
            pulumi.set(__self__, "feature_gates", feature_gates)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if metrics_server is not None:
            pulumi.set(__self__, "metrics_server", metrics_server)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oidc is not None:
            pulumi.set(__self__, "oidc", oidc)
        if service_level is not None:
            pulumi.set(__self__, "service_level", service_level)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[builtins.str]:
        """
        ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.""")
    def addons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "addons")

    @addons.setter
    def addons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "addons", value)

    @property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable automatic upgrading of the control plane version.
        """
        return pulumi.get(self, "auto_upgrade")

    @auto_upgrade.setter
    def auto_upgrade(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "auto_upgrade", value)

    @property
    @pulumi.getter
    def cni(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The CNI plugin that is to be used. Available options are "calico" or "cilium". Defaults to "calico". Setting empty string will result in a cluster with no CNI.
        """
        return pulumi.get(self, "cni")

    @cni.setter
    def cni(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cni", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A free-form text describing the cluster.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enableKubeProxy")
    def enable_kube_proxy(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        ❗ Indicates whether to deploy the Kubernetes network proxy. (may only be set at creation time)
        """
        return pulumi.get(self, "enable_kube_proxy")

    @enable_kube_proxy.setter
    def enable_kube_proxy(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_kube_proxy", value)

    @property
    @pulumi.getter(name="exoscaleCcm")
    def exoscale_ccm(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Deploy the Exoscale [Cloud Controller Manager](https://github.com/exoscale/exoscale-cloud-controller-manager/) in the control plane (boolean; default: `true`; may only be set at creation time).
        """
        return pulumi.get(self, "exoscale_ccm")

    @exoscale_ccm.setter
    def exoscale_ccm(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "exoscale_ccm", value)

    @property
    @pulumi.getter(name="exoscaleCsi")
    def exoscale_csi(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Deploy the Exoscale [Container Storage Interface](https://github.com/exoscale/exoscale-csi-driver/) on worker nodes (boolean; default: `false`; requires the CCM to be enabled).
        """
        return pulumi.get(self, "exoscale_csi")

    @exoscale_csi.setter
    def exoscale_csi(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "exoscale_csi", value)

    @property
    @pulumi.getter(name="featureGates")
    def feature_gates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Feature gates options for the cluster.
        """
        return pulumi.get(self, "feature_gates")

    @feature_gates.setter
    def feature_gates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "feature_gates", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        A map of key/value labels.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="metricsServer")
    def metrics_server(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Deploy the [Kubernetes Metrics Server](https://github.com/kubernetes-sigs/metrics-server/) in the control plane (boolean; default: `true`; may only be set at creation time).
        """
        return pulumi.get(self, "metrics_server")

    @metrics_server.setter
    def metrics_server(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "metrics_server", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The SKS cluster name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def oidc(self) -> Optional[pulumi.Input['SksClusterOidcArgs']]:
        """
        An OpenID Connect configuration to provide to the Kubernetes API server (may only be set at creation time). Structure is documented below.
        """
        return pulumi.get(self, "oidc")

    @oidc.setter
    def oidc(self, value: Optional[pulumi.Input['SksClusterOidcArgs']]):
        pulumi.set(self, "oidc", value)

    @property
    @pulumi.getter(name="serviceLevel")
    def service_level(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The service level of the control plane (`pro` or `starter`; default: `pro`; may only be set at creation time).
        """
        return pulumi.get(self, "service_level")

    @service_level.setter
    def service_level(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service_level", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The version of the control plane (default: latest version available from the API; see `exo compute sks versions` for reference; may only be set at creation time).
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class _SksClusterState:
    def __init__(__self__, *,
                 addons: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 aggregation_ca: Optional[pulumi.Input[builtins.str]] = None,
                 auto_upgrade: Optional[pulumi.Input[builtins.bool]] = None,
                 cni: Optional[pulumi.Input[builtins.str]] = None,
                 control_plane_ca: Optional[pulumi.Input[builtins.str]] = None,
                 created_at: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 enable_kube_proxy: Optional[pulumi.Input[builtins.bool]] = None,
                 endpoint: Optional[pulumi.Input[builtins.str]] = None,
                 exoscale_ccm: Optional[pulumi.Input[builtins.bool]] = None,
                 exoscale_csi: Optional[pulumi.Input[builtins.bool]] = None,
                 feature_gates: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 kubelet_ca: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 metrics_server: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nodepools: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 oidc: Optional[pulumi.Input['SksClusterOidcArgs']] = None,
                 service_level: Optional[pulumi.Input[builtins.str]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 version: Optional[pulumi.Input[builtins.str]] = None,
                 zone: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering SksCluster resources.
        :param pulumi.Input[builtins.str] aggregation_ca: The CA certificate (in PEM format) for TLS communications between the control plane and the aggregation layer (e.g. `metrics-server`).
        :param pulumi.Input[builtins.bool] auto_upgrade: Enable automatic upgrading of the control plane version.
        :param pulumi.Input[builtins.str] cni: The CNI plugin that is to be used. Available options are "calico" or "cilium". Defaults to "calico". Setting empty string will result in a cluster with no CNI.
        :param pulumi.Input[builtins.str] control_plane_ca: The CA certificate (in PEM format) for TLS communications between control plane components.
        :param pulumi.Input[builtins.str] created_at: The cluster creation date.
        :param pulumi.Input[builtins.str] description: A free-form text describing the cluster.
        :param pulumi.Input[builtins.bool] enable_kube_proxy: ❗ Indicates whether to deploy the Kubernetes network proxy. (may only be set at creation time)
        :param pulumi.Input[builtins.str] endpoint: The cluster API endpoint.
        :param pulumi.Input[builtins.bool] exoscale_ccm: Deploy the Exoscale [Cloud Controller Manager](https://github.com/exoscale/exoscale-cloud-controller-manager/) in the control plane (boolean; default: `true`; may only be set at creation time).
        :param pulumi.Input[builtins.bool] exoscale_csi: Deploy the Exoscale [Container Storage Interface](https://github.com/exoscale/exoscale-csi-driver/) on worker nodes (boolean; default: `false`; requires the CCM to be enabled).
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] feature_gates: Feature gates options for the cluster.
        :param pulumi.Input[builtins.str] kubelet_ca: The CA certificate (in PEM format) for TLS communications between kubelets and the control plane.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: A map of key/value labels.
        :param pulumi.Input[builtins.bool] metrics_server: Deploy the [Kubernetes Metrics Server](https://github.com/kubernetes-sigs/metrics-server/) in the control plane (boolean; default: `true`; may only be set at creation time).
        :param pulumi.Input[builtins.str] name: The SKS cluster name.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] nodepools: The list of exoscale*sks*nodepool (IDs) attached to the cluster.
        :param pulumi.Input['SksClusterOidcArgs'] oidc: An OpenID Connect configuration to provide to the Kubernetes API server (may only be set at creation time). Structure is documented below.
        :param pulumi.Input[builtins.str] service_level: The service level of the control plane (`pro` or `starter`; default: `pro`; may only be set at creation time).
        :param pulumi.Input[builtins.str] state: The cluster state.
        :param pulumi.Input[builtins.str] version: The version of the control plane (default: latest version available from the API; see `exo compute sks versions` for reference; may only be set at creation time).
        :param pulumi.Input[builtins.str] zone: ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        if addons is not None:
            warnings.warn("""This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.""", DeprecationWarning)
            pulumi.log.warn("""addons is deprecated: This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.""")
        if addons is not None:
            pulumi.set(__self__, "addons", addons)
        if aggregation_ca is not None:
            pulumi.set(__self__, "aggregation_ca", aggregation_ca)
        if auto_upgrade is not None:
            pulumi.set(__self__, "auto_upgrade", auto_upgrade)
        if cni is not None:
            pulumi.set(__self__, "cni", cni)
        if control_plane_ca is not None:
            pulumi.set(__self__, "control_plane_ca", control_plane_ca)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_kube_proxy is not None:
            pulumi.set(__self__, "enable_kube_proxy", enable_kube_proxy)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if exoscale_ccm is not None:
            pulumi.set(__self__, "exoscale_ccm", exoscale_ccm)
        if exoscale_csi is not None:
            pulumi.set(__self__, "exoscale_csi", exoscale_csi)
        if feature_gates is not None:
            pulumi.set(__self__, "feature_gates", feature_gates)
        if kubelet_ca is not None:
            pulumi.set(__self__, "kubelet_ca", kubelet_ca)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if metrics_server is not None:
            pulumi.set(__self__, "metrics_server", metrics_server)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nodepools is not None:
            pulumi.set(__self__, "nodepools", nodepools)
        if oidc is not None:
            pulumi.set(__self__, "oidc", oidc)
        if service_level is not None:
            pulumi.set(__self__, "service_level", service_level)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    @_utilities.deprecated("""This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.""")
    def addons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "addons")

    @addons.setter
    def addons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "addons", value)

    @property
    @pulumi.getter(name="aggregationCa")
    def aggregation_ca(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The CA certificate (in PEM format) for TLS communications between the control plane and the aggregation layer (e.g. `metrics-server`).
        """
        return pulumi.get(self, "aggregation_ca")

    @aggregation_ca.setter
    def aggregation_ca(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "aggregation_ca", value)

    @property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable automatic upgrading of the control plane version.
        """
        return pulumi.get(self, "auto_upgrade")

    @auto_upgrade.setter
    def auto_upgrade(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "auto_upgrade", value)

    @property
    @pulumi.getter
    def cni(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The CNI plugin that is to be used. Available options are "calico" or "cilium". Defaults to "calico". Setting empty string will result in a cluster with no CNI.
        """
        return pulumi.get(self, "cni")

    @cni.setter
    def cni(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cni", value)

    @property
    @pulumi.getter(name="controlPlaneCa")
    def control_plane_ca(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The CA certificate (in PEM format) for TLS communications between control plane components.
        """
        return pulumi.get(self, "control_plane_ca")

    @control_plane_ca.setter
    def control_plane_ca(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "control_plane_ca", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The cluster creation date.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A free-form text describing the cluster.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enableKubeProxy")
    def enable_kube_proxy(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        ❗ Indicates whether to deploy the Kubernetes network proxy. (may only be set at creation time)
        """
        return pulumi.get(self, "enable_kube_proxy")

    @enable_kube_proxy.setter
    def enable_kube_proxy(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_kube_proxy", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The cluster API endpoint.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="exoscaleCcm")
    def exoscale_ccm(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Deploy the Exoscale [Cloud Controller Manager](https://github.com/exoscale/exoscale-cloud-controller-manager/) in the control plane (boolean; default: `true`; may only be set at creation time).
        """
        return pulumi.get(self, "exoscale_ccm")

    @exoscale_ccm.setter
    def exoscale_ccm(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "exoscale_ccm", value)

    @property
    @pulumi.getter(name="exoscaleCsi")
    def exoscale_csi(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Deploy the Exoscale [Container Storage Interface](https://github.com/exoscale/exoscale-csi-driver/) on worker nodes (boolean; default: `false`; requires the CCM to be enabled).
        """
        return pulumi.get(self, "exoscale_csi")

    @exoscale_csi.setter
    def exoscale_csi(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "exoscale_csi", value)

    @property
    @pulumi.getter(name="featureGates")
    def feature_gates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Feature gates options for the cluster.
        """
        return pulumi.get(self, "feature_gates")

    @feature_gates.setter
    def feature_gates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "feature_gates", value)

    @property
    @pulumi.getter(name="kubeletCa")
    def kubelet_ca(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The CA certificate (in PEM format) for TLS communications between kubelets and the control plane.
        """
        return pulumi.get(self, "kubelet_ca")

    @kubelet_ca.setter
    def kubelet_ca(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kubelet_ca", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        A map of key/value labels.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="metricsServer")
    def metrics_server(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Deploy the [Kubernetes Metrics Server](https://github.com/kubernetes-sigs/metrics-server/) in the control plane (boolean; default: `true`; may only be set at creation time).
        """
        return pulumi.get(self, "metrics_server")

    @metrics_server.setter
    def metrics_server(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "metrics_server", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The SKS cluster name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nodepools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The list of exoscale*sks*nodepool (IDs) attached to the cluster.
        """
        return pulumi.get(self, "nodepools")

    @nodepools.setter
    def nodepools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "nodepools", value)

    @property
    @pulumi.getter
    def oidc(self) -> Optional[pulumi.Input['SksClusterOidcArgs']]:
        """
        An OpenID Connect configuration to provide to the Kubernetes API server (may only be set at creation time). Structure is documented below.
        """
        return pulumi.get(self, "oidc")

    @oidc.setter
    def oidc(self, value: Optional[pulumi.Input['SksClusterOidcArgs']]):
        pulumi.set(self, "oidc", value)

    @property
    @pulumi.getter(name="serviceLevel")
    def service_level(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The service level of the control plane (`pro` or `starter`; default: `pro`; may only be set at creation time).
        """
        return pulumi.get(self, "service_level")

    @service_level.setter
    def service_level(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service_level", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The cluster state.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The version of the control plane (default: latest version available from the API; see `exo compute sks versions` for reference; may only be set at creation time).
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("exoscale:index/sksCluster:SksCluster")
class SksCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addons: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 auto_upgrade: Optional[pulumi.Input[builtins.bool]] = None,
                 cni: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 enable_kube_proxy: Optional[pulumi.Input[builtins.bool]] = None,
                 exoscale_ccm: Optional[pulumi.Input[builtins.bool]] = None,
                 exoscale_csi: Optional[pulumi.Input[builtins.bool]] = None,
                 feature_gates: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 metrics_server: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 oidc: Optional[pulumi.Input[Union['SksClusterOidcArgs', 'SksClusterOidcArgsDict']]] = None,
                 service_level: Optional[pulumi.Input[builtins.str]] = None,
                 version: Optional[pulumi.Input[builtins.str]] = None,
                 zone: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Manage Exoscale [Scalable Kubernetes Service (SKS)](https://community.exoscale.com/product/compute/containers/) Clusters.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_exoscale as exoscale

        my_sks_cluster = exoscale.SksCluster("mySksCluster", zone="ch-gva-2")
        pulumi.export("mySksClusterEndpoint", my_sks_cluster.endpoint)
        ```

        Next step is to attach exoscale_sks_nodepool(s) to the cluster.

        Please refer to the examples
        directory for complete configuration examples.

        ## Import

        An existing SKS cluster may be imported by `<ID>@<zone>`:

        ```sh
        $ pulumi import exoscale:index/sksCluster:SksCluster \\ 
        ```

          exoscale_sks_cluster.my_sks_cluster \\

          f81d4fae-7dec-11d0-a765-00a0c91e6bf6@ch-gva-2

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] auto_upgrade: Enable automatic upgrading of the control plane version.
        :param pulumi.Input[builtins.str] cni: The CNI plugin that is to be used. Available options are "calico" or "cilium". Defaults to "calico". Setting empty string will result in a cluster with no CNI.
        :param pulumi.Input[builtins.str] description: A free-form text describing the cluster.
        :param pulumi.Input[builtins.bool] enable_kube_proxy: ❗ Indicates whether to deploy the Kubernetes network proxy. (may only be set at creation time)
        :param pulumi.Input[builtins.bool] exoscale_ccm: Deploy the Exoscale [Cloud Controller Manager](https://github.com/exoscale/exoscale-cloud-controller-manager/) in the control plane (boolean; default: `true`; may only be set at creation time).
        :param pulumi.Input[builtins.bool] exoscale_csi: Deploy the Exoscale [Container Storage Interface](https://github.com/exoscale/exoscale-csi-driver/) on worker nodes (boolean; default: `false`; requires the CCM to be enabled).
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] feature_gates: Feature gates options for the cluster.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: A map of key/value labels.
        :param pulumi.Input[builtins.bool] metrics_server: Deploy the [Kubernetes Metrics Server](https://github.com/kubernetes-sigs/metrics-server/) in the control plane (boolean; default: `true`; may only be set at creation time).
        :param pulumi.Input[builtins.str] name: The SKS cluster name.
        :param pulumi.Input[Union['SksClusterOidcArgs', 'SksClusterOidcArgsDict']] oidc: An OpenID Connect configuration to provide to the Kubernetes API server (may only be set at creation time). Structure is documented below.
        :param pulumi.Input[builtins.str] service_level: The service level of the control plane (`pro` or `starter`; default: `pro`; may only be set at creation time).
        :param pulumi.Input[builtins.str] version: The version of the control plane (default: latest version available from the API; see `exo compute sks versions` for reference; may only be set at creation time).
        :param pulumi.Input[builtins.str] zone: ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SksClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage Exoscale [Scalable Kubernetes Service (SKS)](https://community.exoscale.com/product/compute/containers/) Clusters.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_exoscale as exoscale

        my_sks_cluster = exoscale.SksCluster("mySksCluster", zone="ch-gva-2")
        pulumi.export("mySksClusterEndpoint", my_sks_cluster.endpoint)
        ```

        Next step is to attach exoscale_sks_nodepool(s) to the cluster.

        Please refer to the examples
        directory for complete configuration examples.

        ## Import

        An existing SKS cluster may be imported by `<ID>@<zone>`:

        ```sh
        $ pulumi import exoscale:index/sksCluster:SksCluster \\ 
        ```

          exoscale_sks_cluster.my_sks_cluster \\

          f81d4fae-7dec-11d0-a765-00a0c91e6bf6@ch-gva-2

        :param str resource_name: The name of the resource.
        :param SksClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SksClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addons: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 auto_upgrade: Optional[pulumi.Input[builtins.bool]] = None,
                 cni: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 enable_kube_proxy: Optional[pulumi.Input[builtins.bool]] = None,
                 exoscale_ccm: Optional[pulumi.Input[builtins.bool]] = None,
                 exoscale_csi: Optional[pulumi.Input[builtins.bool]] = None,
                 feature_gates: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 metrics_server: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 oidc: Optional[pulumi.Input[Union['SksClusterOidcArgs', 'SksClusterOidcArgsDict']]] = None,
                 service_level: Optional[pulumi.Input[builtins.str]] = None,
                 version: Optional[pulumi.Input[builtins.str]] = None,
                 zone: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SksClusterArgs.__new__(SksClusterArgs)

            __props__.__dict__["addons"] = addons
            __props__.__dict__["auto_upgrade"] = auto_upgrade
            __props__.__dict__["cni"] = cni
            __props__.__dict__["description"] = description
            __props__.__dict__["enable_kube_proxy"] = enable_kube_proxy
            __props__.__dict__["exoscale_ccm"] = exoscale_ccm
            __props__.__dict__["exoscale_csi"] = exoscale_csi
            __props__.__dict__["feature_gates"] = feature_gates
            __props__.__dict__["labels"] = labels
            __props__.__dict__["metrics_server"] = metrics_server
            __props__.__dict__["name"] = name
            __props__.__dict__["oidc"] = oidc
            __props__.__dict__["service_level"] = service_level
            __props__.__dict__["version"] = version
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
            __props__.__dict__["aggregation_ca"] = None
            __props__.__dict__["control_plane_ca"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["endpoint"] = None
            __props__.__dict__["kubelet_ca"] = None
            __props__.__dict__["nodepools"] = None
            __props__.__dict__["state"] = None
        super(SksCluster, __self__).__init__(
            'exoscale:index/sksCluster:SksCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            addons: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            aggregation_ca: Optional[pulumi.Input[builtins.str]] = None,
            auto_upgrade: Optional[pulumi.Input[builtins.bool]] = None,
            cni: Optional[pulumi.Input[builtins.str]] = None,
            control_plane_ca: Optional[pulumi.Input[builtins.str]] = None,
            created_at: Optional[pulumi.Input[builtins.str]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            enable_kube_proxy: Optional[pulumi.Input[builtins.bool]] = None,
            endpoint: Optional[pulumi.Input[builtins.str]] = None,
            exoscale_ccm: Optional[pulumi.Input[builtins.bool]] = None,
            exoscale_csi: Optional[pulumi.Input[builtins.bool]] = None,
            feature_gates: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            kubelet_ca: Optional[pulumi.Input[builtins.str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            metrics_server: Optional[pulumi.Input[builtins.bool]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            nodepools: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            oidc: Optional[pulumi.Input[Union['SksClusterOidcArgs', 'SksClusterOidcArgsDict']]] = None,
            service_level: Optional[pulumi.Input[builtins.str]] = None,
            state: Optional[pulumi.Input[builtins.str]] = None,
            version: Optional[pulumi.Input[builtins.str]] = None,
            zone: Optional[pulumi.Input[builtins.str]] = None) -> 'SksCluster':
        """
        Get an existing SksCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] aggregation_ca: The CA certificate (in PEM format) for TLS communications between the control plane and the aggregation layer (e.g. `metrics-server`).
        :param pulumi.Input[builtins.bool] auto_upgrade: Enable automatic upgrading of the control plane version.
        :param pulumi.Input[builtins.str] cni: The CNI plugin that is to be used. Available options are "calico" or "cilium". Defaults to "calico". Setting empty string will result in a cluster with no CNI.
        :param pulumi.Input[builtins.str] control_plane_ca: The CA certificate (in PEM format) for TLS communications between control plane components.
        :param pulumi.Input[builtins.str] created_at: The cluster creation date.
        :param pulumi.Input[builtins.str] description: A free-form text describing the cluster.
        :param pulumi.Input[builtins.bool] enable_kube_proxy: ❗ Indicates whether to deploy the Kubernetes network proxy. (may only be set at creation time)
        :param pulumi.Input[builtins.str] endpoint: The cluster API endpoint.
        :param pulumi.Input[builtins.bool] exoscale_ccm: Deploy the Exoscale [Cloud Controller Manager](https://github.com/exoscale/exoscale-cloud-controller-manager/) in the control plane (boolean; default: `true`; may only be set at creation time).
        :param pulumi.Input[builtins.bool] exoscale_csi: Deploy the Exoscale [Container Storage Interface](https://github.com/exoscale/exoscale-csi-driver/) on worker nodes (boolean; default: `false`; requires the CCM to be enabled).
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] feature_gates: Feature gates options for the cluster.
        :param pulumi.Input[builtins.str] kubelet_ca: The CA certificate (in PEM format) for TLS communications between kubelets and the control plane.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: A map of key/value labels.
        :param pulumi.Input[builtins.bool] metrics_server: Deploy the [Kubernetes Metrics Server](https://github.com/kubernetes-sigs/metrics-server/) in the control plane (boolean; default: `true`; may only be set at creation time).
        :param pulumi.Input[builtins.str] name: The SKS cluster name.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] nodepools: The list of exoscale*sks*nodepool (IDs) attached to the cluster.
        :param pulumi.Input[Union['SksClusterOidcArgs', 'SksClusterOidcArgsDict']] oidc: An OpenID Connect configuration to provide to the Kubernetes API server (may only be set at creation time). Structure is documented below.
        :param pulumi.Input[builtins.str] service_level: The service level of the control plane (`pro` or `starter`; default: `pro`; may only be set at creation time).
        :param pulumi.Input[builtins.str] state: The cluster state.
        :param pulumi.Input[builtins.str] version: The version of the control plane (default: latest version available from the API; see `exo compute sks versions` for reference; may only be set at creation time).
        :param pulumi.Input[builtins.str] zone: ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SksClusterState.__new__(_SksClusterState)

        __props__.__dict__["addons"] = addons
        __props__.__dict__["aggregation_ca"] = aggregation_ca
        __props__.__dict__["auto_upgrade"] = auto_upgrade
        __props__.__dict__["cni"] = cni
        __props__.__dict__["control_plane_ca"] = control_plane_ca
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["enable_kube_proxy"] = enable_kube_proxy
        __props__.__dict__["endpoint"] = endpoint
        __props__.__dict__["exoscale_ccm"] = exoscale_ccm
        __props__.__dict__["exoscale_csi"] = exoscale_csi
        __props__.__dict__["feature_gates"] = feature_gates
        __props__.__dict__["kubelet_ca"] = kubelet_ca
        __props__.__dict__["labels"] = labels
        __props__.__dict__["metrics_server"] = metrics_server
        __props__.__dict__["name"] = name
        __props__.__dict__["nodepools"] = nodepools
        __props__.__dict__["oidc"] = oidc
        __props__.__dict__["service_level"] = service_level
        __props__.__dict__["state"] = state
        __props__.__dict__["version"] = version
        __props__.__dict__["zone"] = zone
        return SksCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    @_utilities.deprecated("""This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.""")
    def addons(self) -> pulumi.Output[Sequence[builtins.str]]:
        return pulumi.get(self, "addons")

    @property
    @pulumi.getter(name="aggregationCa")
    def aggregation_ca(self) -> pulumi.Output[builtins.str]:
        """
        The CA certificate (in PEM format) for TLS communications between the control plane and the aggregation layer (e.g. `metrics-server`).
        """
        return pulumi.get(self, "aggregation_ca")

    @property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Enable automatic upgrading of the control plane version.
        """
        return pulumi.get(self, "auto_upgrade")

    @property
    @pulumi.getter
    def cni(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The CNI plugin that is to be used. Available options are "calico" or "cilium". Defaults to "calico". Setting empty string will result in a cluster with no CNI.
        """
        return pulumi.get(self, "cni")

    @property
    @pulumi.getter(name="controlPlaneCa")
    def control_plane_ca(self) -> pulumi.Output[builtins.str]:
        """
        The CA certificate (in PEM format) for TLS communications between control plane components.
        """
        return pulumi.get(self, "control_plane_ca")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[builtins.str]:
        """
        The cluster creation date.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        A free-form text describing the cluster.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableKubeProxy")
    def enable_kube_proxy(self) -> pulumi.Output[builtins.bool]:
        """
        ❗ Indicates whether to deploy the Kubernetes network proxy. (may only be set at creation time)
        """
        return pulumi.get(self, "enable_kube_proxy")

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Output[builtins.str]:
        """
        The cluster API endpoint.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="exoscaleCcm")
    def exoscale_ccm(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Deploy the Exoscale [Cloud Controller Manager](https://github.com/exoscale/exoscale-cloud-controller-manager/) in the control plane (boolean; default: `true`; may only be set at creation time).
        """
        return pulumi.get(self, "exoscale_ccm")

    @property
    @pulumi.getter(name="exoscaleCsi")
    def exoscale_csi(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Deploy the Exoscale [Container Storage Interface](https://github.com/exoscale/exoscale-csi-driver/) on worker nodes (boolean; default: `false`; requires the CCM to be enabled).
        """
        return pulumi.get(self, "exoscale_csi")

    @property
    @pulumi.getter(name="featureGates")
    def feature_gates(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        Feature gates options for the cluster.
        """
        return pulumi.get(self, "feature_gates")

    @property
    @pulumi.getter(name="kubeletCa")
    def kubelet_ca(self) -> pulumi.Output[builtins.str]:
        """
        The CA certificate (in PEM format) for TLS communications between kubelets and the control plane.
        """
        return pulumi.get(self, "kubelet_ca")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        A map of key/value labels.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="metricsServer")
    def metrics_server(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Deploy the [Kubernetes Metrics Server](https://github.com/kubernetes-sigs/metrics-server/) in the control plane (boolean; default: `true`; may only be set at creation time).
        """
        return pulumi.get(self, "metrics_server")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The SKS cluster name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nodepools(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        The list of exoscale*sks*nodepool (IDs) attached to the cluster.
        """
        return pulumi.get(self, "nodepools")

    @property
    @pulumi.getter
    def oidc(self) -> pulumi.Output['outputs.SksClusterOidc']:
        """
        An OpenID Connect configuration to provide to the Kubernetes API server (may only be set at creation time). Structure is documented below.
        """
        return pulumi.get(self, "oidc")

    @property
    @pulumi.getter(name="serviceLevel")
    def service_level(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The service level of the control plane (`pro` or `starter`; default: `pro`; may only be set at creation time).
        """
        return pulumi.get(self, "service_level")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[builtins.str]:
        """
        The cluster state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[builtins.str]:
        """
        The version of the control plane (default: latest version available from the API; see `exo compute sks versions` for reference; may only be set at creation time).
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[builtins.str]:
        """
        ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        return pulumi.get(self, "zone")

