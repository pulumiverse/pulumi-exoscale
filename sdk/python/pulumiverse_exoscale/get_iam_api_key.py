# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetIamApiKeyResult',
    'AwaitableGetIamApiKeyResult',
    'get_iam_api_key',
    'get_iam_api_key_output',
]

@pulumi.output_type
class GetIamApiKeyResult:
    """
    A collection of values returned by getIamApiKey.
    """
    def __init__(__self__, id=None, key=None, name=None, role_id=None, timeouts=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if role_id and not isinstance(role_id, str):
            raise TypeError("Expected argument 'role_id' to be a str")
        pulumi.set(__self__, "role_id", role_id)
        if timeouts and not isinstance(timeouts, dict):
            raise TypeError("Expected argument 'timeouts' to be a dict")
        pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        The IAM API Key to match.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        IAM API Key name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> builtins.str:
        """
        IAM API Key role ID.
        """
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter
    def timeouts(self) -> Optional['outputs.GetIamApiKeyTimeoutsResult']:
        return pulumi.get(self, "timeouts")


class AwaitableGetIamApiKeyResult(GetIamApiKeyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamApiKeyResult(
            id=self.id,
            key=self.key,
            name=self.name,
            role_id=self.role_id,
            timeouts=self.timeouts)


def get_iam_api_key(key: Optional[builtins.str] = None,
                    timeouts: Optional[Union['GetIamApiKeyTimeoutsArgs', 'GetIamApiKeyTimeoutsArgsDict']] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamApiKeyResult:
    """
    Fetch Exoscale [IAM](https://community.exoscale.com/documentation/iam/) API Key.

    Corresponding resource: exoscale_iam_role.


    :param builtins.str key: The IAM API Key to match.
    """
    __args__ = dict()
    __args__['key'] = key
    __args__['timeouts'] = timeouts
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('exoscale:index/getIamApiKey:getIamApiKey', __args__, opts=opts, typ=GetIamApiKeyResult).value

    return AwaitableGetIamApiKeyResult(
        id=pulumi.get(__ret__, 'id'),
        key=pulumi.get(__ret__, 'key'),
        name=pulumi.get(__ret__, 'name'),
        role_id=pulumi.get(__ret__, 'role_id'),
        timeouts=pulumi.get(__ret__, 'timeouts'))
def get_iam_api_key_output(key: Optional[pulumi.Input[builtins.str]] = None,
                           timeouts: Optional[pulumi.Input[Optional[Union['GetIamApiKeyTimeoutsArgs', 'GetIamApiKeyTimeoutsArgsDict']]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamApiKeyResult]:
    """
    Fetch Exoscale [IAM](https://community.exoscale.com/documentation/iam/) API Key.

    Corresponding resource: exoscale_iam_role.


    :param builtins.str key: The IAM API Key to match.
    """
    __args__ = dict()
    __args__['key'] = key
    __args__['timeouts'] = timeouts
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('exoscale:index/getIamApiKey:getIamApiKey', __args__, opts=opts, typ=GetIamApiKeyResult)
    return __ret__.apply(lambda __response__: GetIamApiKeyResult(
        id=pulumi.get(__response__, 'id'),
        key=pulumi.get(__response__, 'key'),
        name=pulumi.get(__response__, 'name'),
        role_id=pulumi.get(__response__, 'role_id'),
        timeouts=pulumi.get(__response__, 'timeouts')))
