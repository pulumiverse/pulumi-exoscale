# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetBlockStorageVolumeSnapshotResult',
    'AwaitableGetBlockStorageVolumeSnapshotResult',
    'get_block_storage_volume_snapshot',
    'get_block_storage_volume_snapshot_output',
]

@pulumi.output_type
class GetBlockStorageVolumeSnapshotResult:
    """
    A collection of values returned by getBlockStorageVolumeSnapshot.
    """
    def __init__(__self__, created_at=None, id=None, labels=None, name=None, size=None, state=None, timeouts=None, volume=None, zone=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if size and not isinstance(size, int):
            raise TypeError("Expected argument 'size' to be a int")
        pulumi.set(__self__, "size", size)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if timeouts and not isinstance(timeouts, dict):
            raise TypeError("Expected argument 'timeouts' to be a dict")
        pulumi.set(__self__, "timeouts", timeouts)
        if volume and not isinstance(volume, dict):
            raise TypeError("Expected argument 'volume' to be a dict")
        pulumi.set(__self__, "volume", volume)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        Snapshot creation date.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Snapshot ID to match.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, builtins.str]:
        """
        Labels.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Snapshot name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        """
        Snapshot size in GB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        Snapshot state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def timeouts(self) -> Optional['outputs.GetBlockStorageVolumeSnapshotTimeoutsResult']:
        return pulumi.get(self, "timeouts")

    @property
    @pulumi.getter
    def volume(self) -> 'outputs.GetBlockStorageVolumeSnapshotVolumeResult':
        """
        Block Storage Volume.
        """
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter
    def zone(self) -> builtins.str:
        """
        The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        """
        return pulumi.get(self, "zone")


class AwaitableGetBlockStorageVolumeSnapshotResult(GetBlockStorageVolumeSnapshotResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBlockStorageVolumeSnapshotResult(
            created_at=self.created_at,
            id=self.id,
            labels=self.labels,
            name=self.name,
            size=self.size,
            state=self.state,
            timeouts=self.timeouts,
            volume=self.volume,
            zone=self.zone)


def get_block_storage_volume_snapshot(id: Optional[builtins.str] = None,
                                      timeouts: Optional[Union['GetBlockStorageVolumeSnapshotTimeoutsArgs', 'GetBlockStorageVolumeSnapshotTimeoutsArgsDict']] = None,
                                      zone: Optional[builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBlockStorageVolumeSnapshotResult:
    """
    Fetch [Exoscale Block Storage](https://community.exoscale.com/product/storage/block-storage/) Snapshot.

    Block Storage offers persistent externally attached volumes for your workloads.

    Corresponding resource: exoscale_block_storage_snapshot.


    :param builtins.str id: Snapshot ID to match.
    :param builtins.str zone: The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['timeouts'] = timeouts
    __args__['zone'] = zone
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('exoscale:index/getBlockStorageVolumeSnapshot:getBlockStorageVolumeSnapshot', __args__, opts=opts, typ=GetBlockStorageVolumeSnapshotResult).value

    return AwaitableGetBlockStorageVolumeSnapshotResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        size=pulumi.get(__ret__, 'size'),
        state=pulumi.get(__ret__, 'state'),
        timeouts=pulumi.get(__ret__, 'timeouts'),
        volume=pulumi.get(__ret__, 'volume'),
        zone=pulumi.get(__ret__, 'zone'))
def get_block_storage_volume_snapshot_output(id: Optional[pulumi.Input[builtins.str]] = None,
                                             timeouts: Optional[pulumi.Input[Optional[Union['GetBlockStorageVolumeSnapshotTimeoutsArgs', 'GetBlockStorageVolumeSnapshotTimeoutsArgsDict']]]] = None,
                                             zone: Optional[pulumi.Input[builtins.str]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBlockStorageVolumeSnapshotResult]:
    """
    Fetch [Exoscale Block Storage](https://community.exoscale.com/product/storage/block-storage/) Snapshot.

    Block Storage offers persistent externally attached volumes for your workloads.

    Corresponding resource: exoscale_block_storage_snapshot.


    :param builtins.str id: Snapshot ID to match.
    :param builtins.str zone: The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['timeouts'] = timeouts
    __args__['zone'] = zone
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('exoscale:index/getBlockStorageVolumeSnapshot:getBlockStorageVolumeSnapshot', __args__, opts=opts, typ=GetBlockStorageVolumeSnapshotResult)
    return __ret__.apply(lambda __response__: GetBlockStorageVolumeSnapshotResult(
        created_at=pulumi.get(__response__, 'created_at'),
        id=pulumi.get(__response__, 'id'),
        labels=pulumi.get(__response__, 'labels'),
        name=pulumi.get(__response__, 'name'),
        size=pulumi.get(__response__, 'size'),
        state=pulumi.get(__response__, 'state'),
        timeouts=pulumi.get(__response__, 'timeouts'),
        volume=pulumi.get(__response__, 'volume'),
        zone=pulumi.get(__response__, 'zone')))
