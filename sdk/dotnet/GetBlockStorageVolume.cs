// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Exoscale
{
    public static class GetBlockStorageVolume
    {
        /// <summary>
        /// Fetch [Exoscale Block Storage](https://community.exoscale.com/product/storage/block-storage/) Volume.
        /// 
        /// Block Storage offers persistent externally attached volumes for your workloads.
        /// 
        /// Corresponding resource: exoscale_block_storage_volume.
        /// </summary>
        public static Task<GetBlockStorageVolumeResult> InvokeAsync(GetBlockStorageVolumeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBlockStorageVolumeResult>("exoscale:index/getBlockStorageVolume:getBlockStorageVolume", args ?? new GetBlockStorageVolumeArgs(), options.WithDefaults());

        /// <summary>
        /// Fetch [Exoscale Block Storage](https://community.exoscale.com/product/storage/block-storage/) Volume.
        /// 
        /// Block Storage offers persistent externally attached volumes for your workloads.
        /// 
        /// Corresponding resource: exoscale_block_storage_volume.
        /// </summary>
        public static Output<GetBlockStorageVolumeResult> Invoke(GetBlockStorageVolumeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBlockStorageVolumeResult>("exoscale:index/getBlockStorageVolume:getBlockStorageVolume", args ?? new GetBlockStorageVolumeInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Fetch [Exoscale Block Storage](https://community.exoscale.com/product/storage/block-storage/) Volume.
        /// 
        /// Block Storage offers persistent externally attached volumes for your workloads.
        /// 
        /// Corresponding resource: exoscale_block_storage_volume.
        /// </summary>
        public static Output<GetBlockStorageVolumeResult> Invoke(GetBlockStorageVolumeInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetBlockStorageVolumeResult>("exoscale:index/getBlockStorageVolume:getBlockStorageVolume", args ?? new GetBlockStorageVolumeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBlockStorageVolumeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Volume ID to match.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        [Input("timeouts")]
        public Inputs.GetBlockStorageVolumeTimeoutsArgs? Timeouts { get; set; }

        /// <summary>
        /// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        [Input("zone", required: true)]
        public string Zone { get; set; } = null!;

        public GetBlockStorageVolumeArgs()
        {
        }
        public static new GetBlockStorageVolumeArgs Empty => new GetBlockStorageVolumeArgs();
    }

    public sealed class GetBlockStorageVolumeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Volume ID to match.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.GetBlockStorageVolumeTimeoutsInputArgs>? Timeouts { get; set; }

        /// <summary>
        /// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public GetBlockStorageVolumeInvokeArgs()
        {
        }
        public static new GetBlockStorageVolumeInvokeArgs Empty => new GetBlockStorageVolumeInvokeArgs();
    }


    [OutputType]
    public sealed class GetBlockStorageVolumeResult
    {
        /// <summary>
        /// Volume block size.
        /// </summary>
        public readonly int Blocksize;
        /// <summary>
        /// Volume creation date.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Volume ID to match.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Volume attached instance.
        /// </summary>
        public readonly Outputs.GetBlockStorageVolumeInstanceResult Instance;
        /// <summary>
        /// Resource labels.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Volume name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Volume size in GB.
        /// </summary>
        public readonly int Size;
        /// <summary>
        /// Volume snapshots.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBlockStorageVolumeSnapshotResult> Snapshots;
        /// <summary>
        /// Volume state.
        /// </summary>
        public readonly string State;
        public readonly Outputs.GetBlockStorageVolumeTimeoutsResult? Timeouts;
        /// <summary>
        /// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        public readonly string Zone;

        [OutputConstructor]
        private GetBlockStorageVolumeResult(
            int blocksize,

            string createdAt,

            string id,

            Outputs.GetBlockStorageVolumeInstanceResult instance,

            ImmutableDictionary<string, string> labels,

            string name,

            int size,

            ImmutableArray<Outputs.GetBlockStorageVolumeSnapshotResult> snapshots,

            string state,

            Outputs.GetBlockStorageVolumeTimeoutsResult? timeouts,

            string zone)
        {
            Blocksize = blocksize;
            CreatedAt = createdAt;
            Id = id;
            Instance = instance;
            Labels = labels;
            Name = name;
            Size = size;
            Snapshots = snapshots;
            State = state;
            Timeouts = timeouts;
            Zone = zone;
        }
    }
}
