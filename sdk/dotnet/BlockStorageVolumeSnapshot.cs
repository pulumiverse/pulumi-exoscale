// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Exoscale
{
    /// <summary>
    /// Manage [Exoscale Block Storage](https://community.exoscale.com/product/storage/block-storage/) Volume Snapshot.
    /// 
    /// Block Storage offers persistent externally attached volumes for your workloads.
    /// </summary>
    [ExoscaleResourceType("exoscale:index/blockStorageVolumeSnapshot:BlockStorageVolumeSnapshot")]
    public partial class BlockStorageVolumeSnapshot : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Snapshot creation date.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Resource labels.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Volume snapshot name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Snapshot size in GB.
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        /// <summary>
        /// Snapshot state.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.BlockStorageVolumeSnapshotTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// Volume from which to create a snapshot.
        /// </summary>
        [Output("volume")]
        public Output<Outputs.BlockStorageVolumeSnapshotVolume> Volume { get; private set; } = null!;

        /// <summary>
        /// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a BlockStorageVolumeSnapshot resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BlockStorageVolumeSnapshot(string name, BlockStorageVolumeSnapshotArgs args, CustomResourceOptions? options = null)
            : base("exoscale:index/blockStorageVolumeSnapshot:BlockStorageVolumeSnapshot", name, args ?? new BlockStorageVolumeSnapshotArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BlockStorageVolumeSnapshot(string name, Input<string> id, BlockStorageVolumeSnapshotState? state = null, CustomResourceOptions? options = null)
            : base("exoscale:index/blockStorageVolumeSnapshot:BlockStorageVolumeSnapshot", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-exoscale",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BlockStorageVolumeSnapshot resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BlockStorageVolumeSnapshot Get(string name, Input<string> id, BlockStorageVolumeSnapshotState? state = null, CustomResourceOptions? options = null)
        {
            return new BlockStorageVolumeSnapshot(name, id, state, options);
        }
    }

    public sealed class BlockStorageVolumeSnapshotArgs : global::Pulumi.ResourceArgs
    {
        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Resource labels.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Volume snapshot name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("timeouts")]
        public Input<Inputs.BlockStorageVolumeSnapshotTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// Volume from which to create a snapshot.
        /// </summary>
        [Input("volume", required: true)]
        public Input<Inputs.BlockStorageVolumeSnapshotVolumeArgs> Volume { get; set; } = null!;

        /// <summary>
        /// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public BlockStorageVolumeSnapshotArgs()
        {
        }
        public static new BlockStorageVolumeSnapshotArgs Empty => new BlockStorageVolumeSnapshotArgs();
    }

    public sealed class BlockStorageVolumeSnapshotState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Snapshot creation date.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Resource labels.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Volume snapshot name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Snapshot size in GB.
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// Snapshot state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("timeouts")]
        public Input<Inputs.BlockStorageVolumeSnapshotTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// Volume from which to create a snapshot.
        /// </summary>
        [Input("volume")]
        public Input<Inputs.BlockStorageVolumeSnapshotVolumeGetArgs>? Volume { get; set; }

        /// <summary>
        /// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public BlockStorageVolumeSnapshotState()
        {
        }
        public static new BlockStorageVolumeSnapshotState Empty => new BlockStorageVolumeSnapshotState();
    }
}
