// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Exoscale
{
    public static class GetComputeInstanceList
    {
        /// <summary>
        /// List Exoscale [Compute Instances](https://community.exoscale.com/documentation/compute/).
        /// 
        /// Corresponding resource: exoscale_compute_instance.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Exoscale = Pulumi.Exoscale;
        /// using Std = Pulumi.Std;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myComputeInstanceList = Exoscale.GetComputeInstanceList.Invoke(new()
        ///     {
        ///         Zone = "ch-gva-2",
        ///         Type = "standard.micro",
        ///         Name = "/.*ubuntu.*/",
        ///         Labels = 
        ///         {
        ///             { "customer", "/.*bank.*/" },
        ///             { "contract", "premium-support" },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["myComputeInstanceIds"] = Std.Formatlist.Invoke(new()
        ///         {
        ///             Input = "%s",
        ///             Args = new[]
        ///             {
        ///                 myComputeInstanceList.Apply(getComputeInstanceListResult =&gt; getComputeInstanceListResult.Instances).Select(__item =&gt; __item.Id).ToList(),
        ///             },
        ///         }).Apply(invoke =&gt; Std.Join.Invoke(new()
        ///         {
        ///             Separator = @"
        /// ",
        ///             Input = invoke.Result,
        ///         })).Apply(invoke =&gt; invoke.Result),
        ///     };
        /// });
        /// ```
        /// 
        /// Please refer to the examples
        /// directory for complete configuration examples.
        /// </summary>
        public static Task<GetComputeInstanceListResult> InvokeAsync(GetComputeInstanceListArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetComputeInstanceListResult>("exoscale:index/getComputeInstanceList:getComputeInstanceList", args ?? new GetComputeInstanceListArgs(), options.WithDefaults());

        /// <summary>
        /// List Exoscale [Compute Instances](https://community.exoscale.com/documentation/compute/).
        /// 
        /// Corresponding resource: exoscale_compute_instance.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Exoscale = Pulumi.Exoscale;
        /// using Std = Pulumi.Std;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myComputeInstanceList = Exoscale.GetComputeInstanceList.Invoke(new()
        ///     {
        ///         Zone = "ch-gva-2",
        ///         Type = "standard.micro",
        ///         Name = "/.*ubuntu.*/",
        ///         Labels = 
        ///         {
        ///             { "customer", "/.*bank.*/" },
        ///             { "contract", "premium-support" },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["myComputeInstanceIds"] = Std.Formatlist.Invoke(new()
        ///         {
        ///             Input = "%s",
        ///             Args = new[]
        ///             {
        ///                 myComputeInstanceList.Apply(getComputeInstanceListResult =&gt; getComputeInstanceListResult.Instances).Select(__item =&gt; __item.Id).ToList(),
        ///             },
        ///         }).Apply(invoke =&gt; Std.Join.Invoke(new()
        ///         {
        ///             Separator = @"
        /// ",
        ///             Input = invoke.Result,
        ///         })).Apply(invoke =&gt; invoke.Result),
        ///     };
        /// });
        /// ```
        /// 
        /// Please refer to the examples
        /// directory for complete configuration examples.
        /// </summary>
        public static Output<GetComputeInstanceListResult> Invoke(GetComputeInstanceListInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetComputeInstanceListResult>("exoscale:index/getComputeInstanceList:getComputeInstanceList", args ?? new GetComputeInstanceListInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// List Exoscale [Compute Instances](https://community.exoscale.com/documentation/compute/).
        /// 
        /// Corresponding resource: exoscale_compute_instance.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Exoscale = Pulumi.Exoscale;
        /// using Std = Pulumi.Std;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myComputeInstanceList = Exoscale.GetComputeInstanceList.Invoke(new()
        ///     {
        ///         Zone = "ch-gva-2",
        ///         Type = "standard.micro",
        ///         Name = "/.*ubuntu.*/",
        ///         Labels = 
        ///         {
        ///             { "customer", "/.*bank.*/" },
        ///             { "contract", "premium-support" },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["myComputeInstanceIds"] = Std.Formatlist.Invoke(new()
        ///         {
        ///             Input = "%s",
        ///             Args = new[]
        ///             {
        ///                 myComputeInstanceList.Apply(getComputeInstanceListResult =&gt; getComputeInstanceListResult.Instances).Select(__item =&gt; __item.Id).ToList(),
        ///             },
        ///         }).Apply(invoke =&gt; Std.Join.Invoke(new()
        ///         {
        ///             Separator = @"
        /// ",
        ///             Input = invoke.Result,
        ///         })).Apply(invoke =&gt; invoke.Result),
        ///     };
        /// });
        /// ```
        /// 
        /// Please refer to the examples
        /// directory for complete configuration examples.
        /// </summary>
        public static Output<GetComputeInstanceListResult> Invoke(GetComputeInstanceListInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetComputeInstanceListResult>("exoscale:index/getComputeInstanceList:getComputeInstanceList", args ?? new GetComputeInstanceListInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetComputeInstanceListArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("createdAt")]
        public string? CreatedAt { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("deployTargetId")]
        public string? DeployTargetId { get; set; }

        /// <summary>
        /// Match against this int
        /// </summary>
        [Input("diskSize")]
        public int? DiskSize { get; set; }

        [Input("enableSecureBoot")]
        public bool? EnableSecureBoot { get; set; }

        [Input("enableTpm")]
        public bool? EnableTpm { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Match against this bool
        /// </summary>
        [Input("ipv6")]
        public bool? Ipv6 { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("ipv6Address")]
        public string? Ipv6Address { get; set; }

        [Input("labels")]
        private Dictionary<string, string>? _labels;

        /// <summary>
        /// Match against key/values. Keys are matched exactly, while values may be matched as a regex if you supply a string that begins and ends with "/"
        /// </summary>
        public Dictionary<string, string> Labels
        {
            get => _labels ?? (_labels = new Dictionary<string, string>());
            set => _labels = value;
        }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("managerId")]
        public string? ManagerId { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("managerType")]
        public string? ManagerType { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("publicIpAddress")]
        public string? PublicIpAddress { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("reverseDns")]
        public string? ReverseDns { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("sshKey")]
        public string? SshKey { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("templateId")]
        public string? TemplateId { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("userData")]
        public string? UserData { get; set; }

        /// <summary>
        /// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        [Input("zone", required: true)]
        public string Zone { get; set; } = null!;

        public GetComputeInstanceListArgs()
        {
        }
        public static new GetComputeInstanceListArgs Empty => new GetComputeInstanceListArgs();
    }

    public sealed class GetComputeInstanceListInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("deployTargetId")]
        public Input<string>? DeployTargetId { get; set; }

        /// <summary>
        /// Match against this int
        /// </summary>
        [Input("diskSize")]
        public Input<int>? DiskSize { get; set; }

        [Input("enableSecureBoot")]
        public Input<bool>? EnableSecureBoot { get; set; }

        [Input("enableTpm")]
        public Input<bool>? EnableTpm { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Match against this bool
        /// </summary>
        [Input("ipv6")]
        public Input<bool>? Ipv6 { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("ipv6Address")]
        public Input<string>? Ipv6Address { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Match against key/values. Keys are matched exactly, while values may be matched as a regex if you supply a string that begins and ends with "/"
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("managerId")]
        public Input<string>? ManagerId { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("managerType")]
        public Input<string>? ManagerType { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("publicIpAddress")]
        public Input<string>? PublicIpAddress { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("reverseDns")]
        public Input<string>? ReverseDns { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("sshKey")]
        public Input<string>? SshKey { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("templateId")]
        public Input<string>? TemplateId { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public GetComputeInstanceListInvokeArgs()
        {
        }
        public static new GetComputeInstanceListInvokeArgs Empty => new GetComputeInstanceListInvokeArgs();
    }


    [OutputType]
    public sealed class GetComputeInstanceListResult
    {
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? CreatedAt;
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? DeployTargetId;
        /// <summary>
        /// Match against this int
        /// </summary>
        public readonly int? DiskSize;
        public readonly bool? EnableSecureBoot;
        public readonly bool? EnableTpm;
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The list of exoscale*compute*instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetComputeInstanceListInstanceResult> Instances;
        /// <summary>
        /// Match against this bool
        /// </summary>
        public readonly bool? Ipv6;
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? Ipv6Address;
        /// <summary>
        /// Match against key/values. Keys are matched exactly, while values may be matched as a regex if you supply a string that begins and ends with "/"
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Labels;
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? ManagerId;
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? ManagerType;
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? PublicIpAddress;
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? ReverseDns;
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? SshKey;
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? TemplateId;
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? UserData;
        /// <summary>
        /// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        public readonly string Zone;

        [OutputConstructor]
        private GetComputeInstanceListResult(
            string? createdAt,

            string? deployTargetId,

            int? diskSize,

            bool? enableSecureBoot,

            bool? enableTpm,

            string? id,

            ImmutableArray<Outputs.GetComputeInstanceListInstanceResult> instances,

            bool? ipv6,

            string? ipv6Address,

            ImmutableDictionary<string, string>? labels,

            string? managerId,

            string? managerType,

            string? name,

            string? publicIpAddress,

            string? reverseDns,

            string? sshKey,

            string? state,

            string? templateId,

            string? type,

            string? userData,

            string zone)
        {
            CreatedAt = createdAt;
            DeployTargetId = deployTargetId;
            DiskSize = diskSize;
            EnableSecureBoot = enableSecureBoot;
            EnableTpm = enableTpm;
            Id = id;
            Instances = instances;
            Ipv6 = ipv6;
            Ipv6Address = ipv6Address;
            Labels = labels;
            ManagerId = managerId;
            ManagerType = managerType;
            Name = name;
            PublicIpAddress = publicIpAddress;
            ReverseDns = reverseDns;
            SshKey = sshKey;
            State = state;
            TemplateId = templateId;
            Type = type;
            UserData = userData;
            Zone = zone;
        }
    }
}
