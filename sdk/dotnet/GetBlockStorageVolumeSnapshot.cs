// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Exoscale
{
    public static class GetBlockStorageVolumeSnapshot
    {
        /// <summary>
        /// Fetch [Exoscale Block Storage](https://community.exoscale.com/product/storage/block-storage/) Snapshot.
        /// 
        /// Block Storage offers persistent externally attached volumes for your workloads.
        /// 
        /// Corresponding resource: exoscale_block_storage_snapshot.
        /// </summary>
        public static Task<GetBlockStorageVolumeSnapshotResult> InvokeAsync(GetBlockStorageVolumeSnapshotArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBlockStorageVolumeSnapshotResult>("exoscale:index/getBlockStorageVolumeSnapshot:getBlockStorageVolumeSnapshot", args ?? new GetBlockStorageVolumeSnapshotArgs(), options.WithDefaults());

        /// <summary>
        /// Fetch [Exoscale Block Storage](https://community.exoscale.com/product/storage/block-storage/) Snapshot.
        /// 
        /// Block Storage offers persistent externally attached volumes for your workloads.
        /// 
        /// Corresponding resource: exoscale_block_storage_snapshot.
        /// </summary>
        public static Output<GetBlockStorageVolumeSnapshotResult> Invoke(GetBlockStorageVolumeSnapshotInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBlockStorageVolumeSnapshotResult>("exoscale:index/getBlockStorageVolumeSnapshot:getBlockStorageVolumeSnapshot", args ?? new GetBlockStorageVolumeSnapshotInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Fetch [Exoscale Block Storage](https://community.exoscale.com/product/storage/block-storage/) Snapshot.
        /// 
        /// Block Storage offers persistent externally attached volumes for your workloads.
        /// 
        /// Corresponding resource: exoscale_block_storage_snapshot.
        /// </summary>
        public static Output<GetBlockStorageVolumeSnapshotResult> Invoke(GetBlockStorageVolumeSnapshotInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetBlockStorageVolumeSnapshotResult>("exoscale:index/getBlockStorageVolumeSnapshot:getBlockStorageVolumeSnapshot", args ?? new GetBlockStorageVolumeSnapshotInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBlockStorageVolumeSnapshotArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Snapshot ID to match.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        [Input("timeouts")]
        public Inputs.GetBlockStorageVolumeSnapshotTimeoutsArgs? Timeouts { get; set; }

        /// <summary>
        /// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        [Input("zone", required: true)]
        public string Zone { get; set; } = null!;

        public GetBlockStorageVolumeSnapshotArgs()
        {
        }
        public static new GetBlockStorageVolumeSnapshotArgs Empty => new GetBlockStorageVolumeSnapshotArgs();
    }

    public sealed class GetBlockStorageVolumeSnapshotInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Snapshot ID to match.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.GetBlockStorageVolumeSnapshotTimeoutsInputArgs>? Timeouts { get; set; }

        /// <summary>
        /// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public GetBlockStorageVolumeSnapshotInvokeArgs()
        {
        }
        public static new GetBlockStorageVolumeSnapshotInvokeArgs Empty => new GetBlockStorageVolumeSnapshotInvokeArgs();
    }


    [OutputType]
    public sealed class GetBlockStorageVolumeSnapshotResult
    {
        /// <summary>
        /// Snapshot creation date.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Snapshot ID to match.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Labels.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Snapshot name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Snapshot size in GB.
        /// </summary>
        public readonly int Size;
        /// <summary>
        /// Snapshot state.
        /// </summary>
        public readonly string State;
        public readonly Outputs.GetBlockStorageVolumeSnapshotTimeoutsResult? Timeouts;
        /// <summary>
        /// Block Storage Volume.
        /// </summary>
        public readonly Outputs.GetBlockStorageVolumeSnapshotVolumeResult Volume;
        /// <summary>
        /// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        public readonly string Zone;

        [OutputConstructor]
        private GetBlockStorageVolumeSnapshotResult(
            string createdAt,

            string id,

            ImmutableDictionary<string, string> labels,

            string name,

            int size,

            string state,

            Outputs.GetBlockStorageVolumeSnapshotTimeoutsResult? timeouts,

            Outputs.GetBlockStorageVolumeSnapshotVolumeResult volume,

            string zone)
        {
            CreatedAt = createdAt;
            Id = id;
            Labels = labels;
            Name = name;
            Size = size;
            State = state;
            Timeouts = timeouts;
            Volume = volume;
            Zone = zone;
        }
    }
}
