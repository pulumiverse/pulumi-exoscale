// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Exoscale
{
    public static class GetSksClusterList
    {
        public static Task<GetSksClusterListResult> InvokeAsync(GetSksClusterListArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSksClusterListResult>("exoscale:index/getSksClusterList:getSksClusterList", args ?? new GetSksClusterListArgs(), options.WithDefaults());

        public static Output<GetSksClusterListResult> Invoke(GetSksClusterListInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSksClusterListResult>("exoscale:index/getSksClusterList:getSksClusterList", args ?? new GetSksClusterListInvokeArgs(), options.WithDefaults());

        public static Output<GetSksClusterListResult> Invoke(GetSksClusterListInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSksClusterListResult>("exoscale:index/getSksClusterList:getSksClusterList", args ?? new GetSksClusterListInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSksClusterListArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("aggregationCa")]
        public string? AggregationCa { get; set; }

        /// <summary>
        /// Match against this bool
        /// </summary>
        [Input("autoUpgrade")]
        public bool? AutoUpgrade { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("cni")]
        public string? Cni { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("controlPlaneCa")]
        public string? ControlPlaneCa { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("createdAt")]
        public string? CreatedAt { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Match against this bool
        /// </summary>
        [Input("enableKubeProxy")]
        public bool? EnableKubeProxy { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("endpoint")]
        public string? Endpoint { get; set; }

        /// <summary>
        /// Match against this bool
        /// </summary>
        [Input("exoscaleCcm")]
        public bool? ExoscaleCcm { get; set; }

        /// <summary>
        /// Match against this bool
        /// </summary>
        [Input("exoscaleCsi")]
        public bool? ExoscaleCsi { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("kubeletCa")]
        public string? KubeletCa { get; set; }

        [Input("labels")]
        private Dictionary<string, string>? _labels;

        /// <summary>
        /// Match against key/values. Keys are matched exactly, while values may be matched as a regex if you supply a string that begins and ends with "/"
        /// </summary>
        public Dictionary<string, string> Labels
        {
            get => _labels ?? (_labels = new Dictionary<string, string>());
            set => _labels = value;
        }

        /// <summary>
        /// Match against this bool
        /// </summary>
        [Input("metricsServer")]
        public bool? MetricsServer { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("serviceLevel")]
        public string? ServiceLevel { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("version")]
        public string? Version { get; set; }

        /// <summary>
        /// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        [Input("zone", required: true)]
        public string Zone { get; set; } = null!;

        public GetSksClusterListArgs()
        {
        }
        public static new GetSksClusterListArgs Empty => new GetSksClusterListArgs();
    }

    public sealed class GetSksClusterListInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("aggregationCa")]
        public Input<string>? AggregationCa { get; set; }

        /// <summary>
        /// Match against this bool
        /// </summary>
        [Input("autoUpgrade")]
        public Input<bool>? AutoUpgrade { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("cni")]
        public Input<string>? Cni { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("controlPlaneCa")]
        public Input<string>? ControlPlaneCa { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Match against this bool
        /// </summary>
        [Input("enableKubeProxy")]
        public Input<bool>? EnableKubeProxy { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// Match against this bool
        /// </summary>
        [Input("exoscaleCcm")]
        public Input<bool>? ExoscaleCcm { get; set; }

        /// <summary>
        /// Match against this bool
        /// </summary>
        [Input("exoscaleCsi")]
        public Input<bool>? ExoscaleCsi { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("kubeletCa")]
        public Input<string>? KubeletCa { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Match against key/values. Keys are matched exactly, while values may be matched as a regex if you supply a string that begins and ends with "/"
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Match against this bool
        /// </summary>
        [Input("metricsServer")]
        public Input<bool>? MetricsServer { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("serviceLevel")]
        public Input<string>? ServiceLevel { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        /// <summary>
        /// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public GetSksClusterListInvokeArgs()
        {
        }
        public static new GetSksClusterListInvokeArgs Empty => new GetSksClusterListInvokeArgs();
    }


    [OutputType]
    public sealed class GetSksClusterListResult
    {
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? AggregationCa;
        /// <summary>
        /// Match against this bool
        /// </summary>
        public readonly bool? AutoUpgrade;
        public readonly ImmutableArray<Outputs.GetSksClusterListClusterResult> Clusters;
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? Cni;
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? ControlPlaneCa;
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? CreatedAt;
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Match against this bool
        /// </summary>
        public readonly bool? EnableKubeProxy;
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? Endpoint;
        /// <summary>
        /// Match against this bool
        /// </summary>
        public readonly bool? ExoscaleCcm;
        /// <summary>
        /// Match against this bool
        /// </summary>
        public readonly bool? ExoscaleCsi;
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? KubeletCa;
        /// <summary>
        /// Match against key/values. Keys are matched exactly, while values may be matched as a regex if you supply a string that begins and ends with "/"
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Labels;
        /// <summary>
        /// Match against this bool
        /// </summary>
        public readonly bool? MetricsServer;
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? ServiceLevel;
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
        /// </summary>
        public readonly string? Version;
        /// <summary>
        /// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        public readonly string Zone;

        [OutputConstructor]
        private GetSksClusterListResult(
            string? aggregationCa,

            bool? autoUpgrade,

            ImmutableArray<Outputs.GetSksClusterListClusterResult> clusters,

            string? cni,

            string? controlPlaneCa,

            string? createdAt,

            string? description,

            bool? enableKubeProxy,

            string? endpoint,

            bool? exoscaleCcm,

            bool? exoscaleCsi,

            string? id,

            string? kubeletCa,

            ImmutableDictionary<string, string>? labels,

            bool? metricsServer,

            string? name,

            string? serviceLevel,

            string? state,

            string? version,

            string zone)
        {
            AggregationCa = aggregationCa;
            AutoUpgrade = autoUpgrade;
            Clusters = clusters;
            Cni = cni;
            ControlPlaneCa = controlPlaneCa;
            CreatedAt = createdAt;
            Description = description;
            EnableKubeProxy = enableKubeProxy;
            Endpoint = endpoint;
            ExoscaleCcm = exoscaleCcm;
            ExoscaleCsi = exoscaleCsi;
            Id = id;
            KubeletCa = kubeletCa;
            Labels = labels;
            MetricsServer = metricsServer;
            Name = name;
            ServiceLevel = serviceLevel;
            State = state;
            Version = version;
            Zone = zone;
        }
    }
}
