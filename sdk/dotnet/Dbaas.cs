// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Exoscale
{
    /// <summary>
    /// Manage Exoscale [Database Services (DBaaS)](https://community.exoscale.com/documentation/dbaas/).
    /// </summary>
    [ExoscaleResourceType("exoscale:index/dbaas:Dbaas")]
    public partial class Dbaas : global::Pulumi.CustomResource
    {
        /// <summary>
        /// CA Certificate required to reach a DBaaS service through a TLS-protected connection.
        /// </summary>
        [Output("caCertificate")]
        public Output<string> CaCertificate { get; private set; } = null!;

        /// <summary>
        /// The creation date of the database service.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The disk size of the database service.
        /// </summary>
        [Output("diskSize")]
        public Output<int> DiskSize { get; private set; } = null!;

        /// <summary>
        /// *grafana* database service type specific arguments. Structure is documented below.
        /// </summary>
        [Output("grafana")]
        public Output<Outputs.DbaasGrafana?> Grafana { get; private set; } = null!;

        /// <summary>
        /// *kafka* database service type specific arguments. Structure is documented below.
        /// </summary>
        [Output("kafka")]
        public Output<Outputs.DbaasKafka?> Kafka { get; private set; } = null!;

        /// <summary>
        /// The day of week to perform the automated database service maintenance (`never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).
        /// </summary>
        [Output("maintenanceDow")]
        public Output<string> MaintenanceDow { get; private set; } = null!;

        /// <summary>
        /// The time of day to perform the automated database service maintenance (`HH:MM:SS`)
        /// </summary>
        [Output("maintenanceTime")]
        public Output<string> MaintenanceTime { get; private set; } = null!;

        /// <summary>
        /// *mysql* database service type specific arguments. Structure is documented below.
        /// </summary>
        [Output("mysql")]
        public Output<Outputs.DbaasMysql?> Mysql { get; private set; } = null!;

        /// <summary>
        /// ❗ The name of the database service.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The number of CPUs of the database service.
        /// </summary>
        [Output("nodeCpus")]
        public Output<int> NodeCpus { get; private set; } = null!;

        /// <summary>
        /// The amount of memory of the database service.
        /// </summary>
        [Output("nodeMemory")]
        public Output<int> NodeMemory { get; private set; } = null!;

        /// <summary>
        /// The number of nodes of the database service.
        /// </summary>
        [Output("nodes")]
        public Output<int> Nodes { get; private set; } = null!;

        /// <summary>
        /// *opensearch* database service type specific arguments. Structure is documented below.
        /// </summary>
        [Output("opensearch")]
        public Output<Outputs.DbaasOpensearch?> Opensearch { get; private set; } = null!;

        /// <summary>
        /// *pg* database service type specific arguments. Structure is documented below.
        /// </summary>
        [Output("pg")]
        public Output<Outputs.DbaasPg?> Pg { get; private set; } = null!;

        /// <summary>
        /// The plan of the database service (use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo dbaas type show &lt;TYPE&gt; --plans` - for reference).
        /// </summary>
        [Output("plan")]
        public Output<string> Plan { get; private set; } = null!;

        /// <summary>
        /// *redis* database service type specific arguments. Structure is documented below.
        /// </summary>
        [Output("redis")]
        public Output<Outputs.DbaasRedis?> Redis { get; private set; } = null!;

        /// <summary>
        /// The current state of the database service.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The database service protection boolean flag against termination/power-off.
        /// </summary>
        [Output("terminationProtection")]
        public Output<bool> TerminationProtection { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.DbaasTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// ❗ The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `redis`, `valkey`, `grafana`).
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The date of the latest database service update.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// *valkey* database service type specific arguments. Structure is documented below.
        /// </summary>
        [Output("valkey")]
        public Output<Outputs.DbaasValkey?> Valkey { get; private set; } = null!;

        /// <summary>
        /// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a Dbaas resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Dbaas(string name, DbaasArgs args, CustomResourceOptions? options = null)
            : base("exoscale:index/dbaas:Dbaas", name, args ?? new DbaasArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Dbaas(string name, Input<string> id, DbaasState? state = null, CustomResourceOptions? options = null)
            : base("exoscale:index/dbaas:Dbaas", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-exoscale",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Dbaas resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Dbaas Get(string name, Input<string> id, DbaasState? state = null, CustomResourceOptions? options = null)
        {
            return new Dbaas(name, id, state, options);
        }
    }

    public sealed class DbaasArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// *grafana* database service type specific arguments. Structure is documented below.
        /// </summary>
        [Input("grafana")]
        public Input<Inputs.DbaasGrafanaArgs>? Grafana { get; set; }

        /// <summary>
        /// *kafka* database service type specific arguments. Structure is documented below.
        /// </summary>
        [Input("kafka")]
        public Input<Inputs.DbaasKafkaArgs>? Kafka { get; set; }

        /// <summary>
        /// The day of week to perform the automated database service maintenance (`never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).
        /// </summary>
        [Input("maintenanceDow")]
        public Input<string>? MaintenanceDow { get; set; }

        /// <summary>
        /// The time of day to perform the automated database service maintenance (`HH:MM:SS`)
        /// </summary>
        [Input("maintenanceTime")]
        public Input<string>? MaintenanceTime { get; set; }

        /// <summary>
        /// *mysql* database service type specific arguments. Structure is documented below.
        /// </summary>
        [Input("mysql")]
        public Input<Inputs.DbaasMysqlArgs>? Mysql { get; set; }

        /// <summary>
        /// ❗ The name of the database service.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// *opensearch* database service type specific arguments. Structure is documented below.
        /// </summary>
        [Input("opensearch")]
        public Input<Inputs.DbaasOpensearchArgs>? Opensearch { get; set; }

        /// <summary>
        /// *pg* database service type specific arguments. Structure is documented below.
        /// </summary>
        [Input("pg")]
        public Input<Inputs.DbaasPgArgs>? Pg { get; set; }

        /// <summary>
        /// The plan of the database service (use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo dbaas type show &lt;TYPE&gt; --plans` - for reference).
        /// </summary>
        [Input("plan", required: true)]
        public Input<string> Plan { get; set; } = null!;

        /// <summary>
        /// *redis* database service type specific arguments. Structure is documented below.
        /// </summary>
        [Input("redis")]
        public Input<Inputs.DbaasRedisArgs>? Redis { get; set; }

        /// <summary>
        /// The database service protection boolean flag against termination/power-off.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        [Input("timeouts")]
        public Input<Inputs.DbaasTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// ❗ The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `redis`, `valkey`, `grafana`).
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// *valkey* database service type specific arguments. Structure is documented below.
        /// </summary>
        [Input("valkey")]
        public Input<Inputs.DbaasValkeyArgs>? Valkey { get; set; }

        /// <summary>
        /// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public DbaasArgs()
        {
        }
        public static new DbaasArgs Empty => new DbaasArgs();
    }

    public sealed class DbaasState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// CA Certificate required to reach a DBaaS service through a TLS-protected connection.
        /// </summary>
        [Input("caCertificate")]
        public Input<string>? CaCertificate { get; set; }

        /// <summary>
        /// The creation date of the database service.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The disk size of the database service.
        /// </summary>
        [Input("diskSize")]
        public Input<int>? DiskSize { get; set; }

        /// <summary>
        /// *grafana* database service type specific arguments. Structure is documented below.
        /// </summary>
        [Input("grafana")]
        public Input<Inputs.DbaasGrafanaGetArgs>? Grafana { get; set; }

        /// <summary>
        /// *kafka* database service type specific arguments. Structure is documented below.
        /// </summary>
        [Input("kafka")]
        public Input<Inputs.DbaasKafkaGetArgs>? Kafka { get; set; }

        /// <summary>
        /// The day of week to perform the automated database service maintenance (`never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).
        /// </summary>
        [Input("maintenanceDow")]
        public Input<string>? MaintenanceDow { get; set; }

        /// <summary>
        /// The time of day to perform the automated database service maintenance (`HH:MM:SS`)
        /// </summary>
        [Input("maintenanceTime")]
        public Input<string>? MaintenanceTime { get; set; }

        /// <summary>
        /// *mysql* database service type specific arguments. Structure is documented below.
        /// </summary>
        [Input("mysql")]
        public Input<Inputs.DbaasMysqlGetArgs>? Mysql { get; set; }

        /// <summary>
        /// ❗ The name of the database service.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of CPUs of the database service.
        /// </summary>
        [Input("nodeCpus")]
        public Input<int>? NodeCpus { get; set; }

        /// <summary>
        /// The amount of memory of the database service.
        /// </summary>
        [Input("nodeMemory")]
        public Input<int>? NodeMemory { get; set; }

        /// <summary>
        /// The number of nodes of the database service.
        /// </summary>
        [Input("nodes")]
        public Input<int>? Nodes { get; set; }

        /// <summary>
        /// *opensearch* database service type specific arguments. Structure is documented below.
        /// </summary>
        [Input("opensearch")]
        public Input<Inputs.DbaasOpensearchGetArgs>? Opensearch { get; set; }

        /// <summary>
        /// *pg* database service type specific arguments. Structure is documented below.
        /// </summary>
        [Input("pg")]
        public Input<Inputs.DbaasPgGetArgs>? Pg { get; set; }

        /// <summary>
        /// The plan of the database service (use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo dbaas type show &lt;TYPE&gt; --plans` - for reference).
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// *redis* database service type specific arguments. Structure is documented below.
        /// </summary>
        [Input("redis")]
        public Input<Inputs.DbaasRedisGetArgs>? Redis { get; set; }

        /// <summary>
        /// The current state of the database service.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The database service protection boolean flag against termination/power-off.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        [Input("timeouts")]
        public Input<Inputs.DbaasTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// ❗ The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `redis`, `valkey`, `grafana`).
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The date of the latest database service update.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// *valkey* database service type specific arguments. Structure is documented below.
        /// </summary>
        [Input("valkey")]
        public Input<Inputs.DbaasValkeyGetArgs>? Valkey { get; set; }

        /// <summary>
        /// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public DbaasState()
        {
        }
        public static new DbaasState Empty => new DbaasState();
    }
}
