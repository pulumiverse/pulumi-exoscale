// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Exoscale
{
    public static class GetIamRole
    {
        /// <summary>
        /// Fetch Exoscale [IAM](https://community.exoscale.com/documentation/iam/) Role.
        /// 
        /// Corresponding resource: exoscale_iam_role.
        /// </summary>
        public static Task<GetIamRoleResult> InvokeAsync(GetIamRoleArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIamRoleResult>("exoscale:index/getIamRole:getIamRole", args ?? new GetIamRoleArgs(), options.WithDefaults());

        /// <summary>
        /// Fetch Exoscale [IAM](https://community.exoscale.com/documentation/iam/) Role.
        /// 
        /// Corresponding resource: exoscale_iam_role.
        /// </summary>
        public static Output<GetIamRoleResult> Invoke(GetIamRoleInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIamRoleResult>("exoscale:index/getIamRole:getIamRole", args ?? new GetIamRoleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Fetch Exoscale [IAM](https://community.exoscale.com/documentation/iam/) Role.
        /// 
        /// Corresponding resource: exoscale_iam_role.
        /// </summary>
        public static Output<GetIamRoleResult> Invoke(GetIamRoleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetIamRoleResult>("exoscale:index/getIamRole:getIamRole", args ?? new GetIamRoleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIamRoleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The role ID to match (conflicts with `name`).
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// the role name to match (conflicts with `id`).
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("timeouts")]
        public Inputs.GetIamRoleTimeoutsArgs? Timeouts { get; set; }

        public GetIamRoleArgs()
        {
        }
        public static new GetIamRoleArgs Empty => new GetIamRoleArgs();
    }

    public sealed class GetIamRoleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The role ID to match (conflicts with `name`).
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// the role name to match (conflicts with `id`).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("timeouts")]
        public Input<Inputs.GetIamRoleTimeoutsInputArgs>? Timeouts { get; set; }

        public GetIamRoleInvokeArgs()
        {
        }
        public static new GetIamRoleInvokeArgs Empty => new GetIamRoleInvokeArgs();
    }


    [OutputType]
    public sealed class GetIamRoleResult
    {
        /// <summary>
        /// A free-form text describing the IAM Role
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Defines if IAM Role Policy is editable or not.
        /// </summary>
        public readonly bool Editable;
        /// <summary>
        /// The role ID to match (conflicts with `name`).
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IAM Role labels.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// the role name to match (conflicts with `id`).
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// IAM Role permissions.
        /// </summary>
        public readonly ImmutableArray<string> Permissions;
        /// <summary>
        /// IAM Policy.
        /// </summary>
        public readonly Outputs.GetIamRolePolicyResult Policy;
        public readonly Outputs.GetIamRoleTimeoutsResult? Timeouts;

        [OutputConstructor]
        private GetIamRoleResult(
            string description,

            bool editable,

            string id,

            ImmutableDictionary<string, string> labels,

            string name,

            ImmutableArray<string> permissions,

            Outputs.GetIamRolePolicyResult policy,

            Outputs.GetIamRoleTimeoutsResult? timeouts)
        {
            Description = description;
            Editable = editable;
            Id = id;
            Labels = labels;
            Name = name;
            Permissions = permissions;
            Policy = policy;
            Timeouts = timeouts;
        }
    }
}
