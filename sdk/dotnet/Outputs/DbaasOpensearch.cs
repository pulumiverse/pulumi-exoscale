// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Exoscale.Outputs
{

    [OutputType]
    public sealed class DbaasOpensearch
    {
        /// <summary>
        /// OpenSearch Dashboards settings
        /// </summary>
        public readonly Outputs.DbaasOpensearchDashboards? Dashboards;
        /// <summary>
        /// ❗ Service name
        /// </summary>
        public readonly string? ForkFromService;
        /// <summary>
        /// (can be used multiple times) Allows you to create glob style patterns and set a max number of indexes matching this pattern you want to keep. Creating indexes exceeding this value will cause the oldest one to get deleted. You could for example create a pattern looking like 'logs.?' and then create index logs.1, logs.2 etc, it will delete logs.1 once you create logs.6. Do note 'logs.?' does not apply to logs.10. Note: Setting max*index*count to 0 will do nothing and the pattern gets ignored.
        /// </summary>
        public readonly ImmutableArray<Outputs.DbaasOpensearchIndexPattern> IndexPatterns;
        /// <summary>
        /// Template settings for all new indexes
        /// </summary>
        public readonly Outputs.DbaasOpensearchIndexTemplate? IndexTemplate;
        /// <summary>
        /// Allow incoming connections from this list of CIDR address block, e.g. `["10.20.0.0/16"]
        /// </summary>
        public readonly ImmutableArray<string> IpFilters;
        /// <summary>
        /// Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn't fit your case, you can disable this by setting up this flag to true.
        /// </summary>
        public readonly bool? KeepIndexRefreshInterval;
        /// <summary>
        /// Maximum number of indexes to keep (Minimum value is `0`)
        /// </summary>
        public readonly int? MaxIndexCount;
        /// <summary>
        /// ❗ Name of a backup to recover from
        /// </summary>
        public readonly string? RecoveryBackupName;
        /// <summary>
        /// OpenSearch-specific settings, in json. e.g.`jsonencode({thread_pool_search_size: 64})`. Use `exo x get-dbaas-settings-opensearch` to get a list of available settings.
        /// </summary>
        public readonly string? Settings;
        /// <summary>
        /// ❗ OpenSearch major version (`exo dbaas type show opensearch` for reference)
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private DbaasOpensearch(
            Outputs.DbaasOpensearchDashboards? dashboards,

            string? forkFromService,

            ImmutableArray<Outputs.DbaasOpensearchIndexPattern> indexPatterns,

            Outputs.DbaasOpensearchIndexTemplate? indexTemplate,

            ImmutableArray<string> ipFilters,

            bool? keepIndexRefreshInterval,

            int? maxIndexCount,

            string? recoveryBackupName,

            string? settings,

            string? version)
        {
            Dashboards = dashboards;
            ForkFromService = forkFromService;
            IndexPatterns = indexPatterns;
            IndexTemplate = indexTemplate;
            IpFilters = ipFilters;
            KeepIndexRefreshInterval = keepIndexRefreshInterval;
            MaxIndexCount = maxIndexCount;
            RecoveryBackupName = recoveryBackupName;
            Settings = settings;
            Version = version;
        }
    }
}
