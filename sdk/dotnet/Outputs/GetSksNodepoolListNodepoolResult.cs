// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Exoscale.Outputs
{

    [OutputType]
    public sealed class GetSksNodepoolListNodepoolResult
    {
        /// <summary>
        /// A list of exoscale.AntiAffinityGroup (IDs) to be attached to the managed instances.
        /// </summary>
        public readonly ImmutableArray<string> AntiAffinityGroupIds;
        public readonly string ClusterId;
        /// <summary>
        /// The pool creation date.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// A deploy target ID.
        /// </summary>
        public readonly string? DeployTargetId;
        /// <summary>
        /// A free-form text describing the pool.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The managed instances disk size (GiB; default: `50`).
        /// </summary>
        public readonly int? DiskSize;
        public readonly string? Id;
        /// <summary>
        /// The underlying exoscale.InstancePool ID.
        /// </summary>
        public readonly string InstancePoolId;
        /// <summary>
        /// The string used to prefix the managed instances name (default `pool`).
        /// </summary>
        public readonly string? InstancePrefix;
        /// <summary>
        /// The managed compute instances type (`&lt;family&gt;.&lt;size&gt;`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
        /// </summary>
        public readonly string? InstanceType;
        /// <summary>
        /// Enable IPV6 for the nodepool nodes
        /// </summary>
        public readonly bool? Ipv6;
        /// <summary>
        /// Configuration for this nodepool's kubelet image garbage collector
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSksNodepoolListNodepoolKubeletImageGcResult> KubeletImageGcs;
        /// <summary>
        /// A map of key/value labels.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Labels;
        public readonly string? Name;
        /// <summary>
        /// A list of exoscale.PrivateNetwork (IDs) to be attached to the managed instances.
        /// </summary>
        public readonly ImmutableArray<string> PrivateNetworkIds;
        /// <summary>
        /// A list of exoscale.SecurityGroup (IDs) to be attached to the managed instances.
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroupIds;
        public readonly int? Size;
        /// <summary>
        /// The current pool state.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Create nodes with non-standard partitioning for persistent storage (requires min 100G of disk space) (may only be set at creation time).
        /// </summary>
        public readonly bool? StorageLvm;
        /// <summary>
        /// A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) ('taints = { &lt;key&gt; = "&lt;value&gt;:&lt;effect&gt;" }').
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Taints;
        /// <summary>
        /// The managed instances template ID.
        /// </summary>
        public readonly string TemplateId;
        /// <summary>
        /// The managed instances version.
        /// </summary>
        public readonly string Version;
        public readonly string Zone;

        [OutputConstructor]
        private GetSksNodepoolListNodepoolResult(
            ImmutableArray<string> antiAffinityGroupIds,

            string clusterId,

            string createdAt,

            string? deployTargetId,

            string? description,

            int? diskSize,

            string? id,

            string instancePoolId,

            string? instancePrefix,

            string? instanceType,

            bool? ipv6,

            ImmutableArray<Outputs.GetSksNodepoolListNodepoolKubeletImageGcResult> kubeletImageGcs,

            ImmutableDictionary<string, string>? labels,

            string? name,

            ImmutableArray<string> privateNetworkIds,

            ImmutableArray<string> securityGroupIds,

            int? size,

            string state,

            bool? storageLvm,

            ImmutableDictionary<string, string>? taints,

            string templateId,

            string version,

            string zone)
        {
            AntiAffinityGroupIds = antiAffinityGroupIds;
            ClusterId = clusterId;
            CreatedAt = createdAt;
            DeployTargetId = deployTargetId;
            Description = description;
            DiskSize = diskSize;
            Id = id;
            InstancePoolId = instancePoolId;
            InstancePrefix = instancePrefix;
            InstanceType = instanceType;
            Ipv6 = ipv6;
            KubeletImageGcs = kubeletImageGcs;
            Labels = labels;
            Name = name;
            PrivateNetworkIds = privateNetworkIds;
            SecurityGroupIds = securityGroupIds;
            Size = size;
            State = state;
            StorageLvm = storageLvm;
            Taints = taints;
            TemplateId = templateId;
            Version = version;
            Zone = zone;
        }
    }
}
