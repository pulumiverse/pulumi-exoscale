// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Exoscale
{
    public static class GetPrivateNetwork
    {
        /// <summary>
        /// Fetch Exoscale [Private Networks](https://community.exoscale.com/product/networking/private-network/) data.
        /// 
        /// Corresponding resource: exoscale_private_network.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Exoscale = Pulumi.Exoscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myPrivateNetwork = Exoscale.GetPrivateNetwork.Invoke(new()
        ///     {
        ///         Zone = "ch-gva-2",
        ///         Name = "my-private-network",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["myPrivateNetworkId"] = myPrivateNetwork.Apply(getPrivateNetworkResult =&gt; getPrivateNetworkResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// Please refer to the examples
        /// directory for complete configuration examples.
        /// </summary>
        public static Task<GetPrivateNetworkResult> InvokeAsync(GetPrivateNetworkArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPrivateNetworkResult>("exoscale:index/getPrivateNetwork:getPrivateNetwork", args ?? new GetPrivateNetworkArgs(), options.WithDefaults());

        /// <summary>
        /// Fetch Exoscale [Private Networks](https://community.exoscale.com/product/networking/private-network/) data.
        /// 
        /// Corresponding resource: exoscale_private_network.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Exoscale = Pulumi.Exoscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myPrivateNetwork = Exoscale.GetPrivateNetwork.Invoke(new()
        ///     {
        ///         Zone = "ch-gva-2",
        ///         Name = "my-private-network",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["myPrivateNetworkId"] = myPrivateNetwork.Apply(getPrivateNetworkResult =&gt; getPrivateNetworkResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// Please refer to the examples
        /// directory for complete configuration examples.
        /// </summary>
        public static Output<GetPrivateNetworkResult> Invoke(GetPrivateNetworkInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPrivateNetworkResult>("exoscale:index/getPrivateNetwork:getPrivateNetwork", args ?? new GetPrivateNetworkInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Fetch Exoscale [Private Networks](https://community.exoscale.com/product/networking/private-network/) data.
        /// 
        /// Corresponding resource: exoscale_private_network.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Exoscale = Pulumi.Exoscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myPrivateNetwork = Exoscale.GetPrivateNetwork.Invoke(new()
        ///     {
        ///         Zone = "ch-gva-2",
        ///         Name = "my-private-network",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["myPrivateNetworkId"] = myPrivateNetwork.Apply(getPrivateNetworkResult =&gt; getPrivateNetworkResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// Please refer to the examples
        /// directory for complete configuration examples.
        /// </summary>
        public static Output<GetPrivateNetworkResult> Invoke(GetPrivateNetworkInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPrivateNetworkResult>("exoscale:index/getPrivateNetwork:getPrivateNetwork", args ?? new GetPrivateNetworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPrivateNetworkArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The private network description.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// The private network ID to match (conflicts with `name`).
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        [Input("labels")]
        private Dictionary<string, string>? _labels;

        /// <summary>
        /// A map of key/value labels.
        /// </summary>
        public Dictionary<string, string> Labels
        {
            get => _labels ?? (_labels = new Dictionary<string, string>());
            set => _labels = value;
        }

        /// <summary>
        /// The network name to match (conflicts with `id`).
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        [Input("zone", required: true)]
        public string Zone { get; set; } = null!;

        public GetPrivateNetworkArgs()
        {
        }
        public static new GetPrivateNetworkArgs Empty => new GetPrivateNetworkArgs();
    }

    public sealed class GetPrivateNetworkInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The private network description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The private network ID to match (conflicts with `name`).
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A map of key/value labels.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The network name to match (conflicts with `id`).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public GetPrivateNetworkInvokeArgs()
        {
        }
        public static new GetPrivateNetworkInvokeArgs Empty => new GetPrivateNetworkInvokeArgs();
    }


    [OutputType]
    public sealed class GetPrivateNetworkResult
    {
        /// <summary>
        /// The private network description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The first/last IPv4 addresses used by the DHCP service for dynamic leases.
        /// </summary>
        public readonly string EndIp;
        /// <summary>
        /// The private network ID to match (conflicts with `name`).
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// A map of key/value labels.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Labels;
        /// <summary>
        /// The network name to match (conflicts with `id`).
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The network mask defining the IPv4 network allowed for static leases.
        /// </summary>
        public readonly string Netmask;
        /// <summary>
        /// The first/last IPv4 addresses used by the DHCP service for dynamic leases.
        /// </summary>
        public readonly string StartIp;
        /// <summary>
        /// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        public readonly string Zone;

        [OutputConstructor]
        private GetPrivateNetworkResult(
            string? description,

            string endIp,

            string? id,

            ImmutableDictionary<string, string>? labels,

            string? name,

            string netmask,

            string startIp,

            string zone)
        {
            Description = description;
            EndIp = endIp;
            Id = id;
            Labels = labels;
            Name = name;
            Netmask = netmask;
            StartIp = startIp;
            Zone = zone;
        }
    }
}
