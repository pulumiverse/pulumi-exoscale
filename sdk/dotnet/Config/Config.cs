// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumiverse.Exoscale
{
    public static class Config
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("exoscale");

        private static readonly __Value<int?> _delay = new __Value<int?>(() => __config.GetInt32("delay"));
        public static int? Delay
        {
            get => _delay.Get();
            set => _delay.Set(value);
        }

        private static readonly __Value<string?> _environment = new __Value<string?>(() => __config.Get("environment"));
        public static string? Environment
        {
            get => _environment.Get();
            set => _environment.Set(value);
        }

        private static readonly __Value<string?> _key = new __Value<string?>(() => __config.Get("key") ?? Utilities.GetEnv("EXOSCALE_API_KEY"));
        /// <summary>
        /// Exoscale API key
        /// </summary>
        public static string? Key
        {
            get => _key.Get();
            set => _key.Set(value);
        }

        private static readonly __Value<string?> _secret = new __Value<string?>(() => __config.Get("secret") ?? Utilities.GetEnv("EXOSCALE_API_SECRET"));
        /// <summary>
        /// Exoscale API secret
        /// </summary>
        public static string? Secret
        {
            get => _secret.Get();
            set => _secret.Set(value);
        }

        private static readonly __Value<string?> _sosEndpoint = new __Value<string?>(() => __config.Get("sosEndpoint"));
        public static string? SosEndpoint
        {
            get => _sosEndpoint.Get();
            set => _sosEndpoint.Set(value);
        }

        private static readonly __Value<int?> _timeout = new __Value<int?>(() => __config.GetInt32("timeout"));
        /// <summary>
        /// Timeout in seconds for waiting on compute resources to become available (by default: 3600)
        /// </summary>
        public static int? Timeout
        {
            get => _timeout.Get();
            set => _timeout.Set(value);
        }

    }
}
