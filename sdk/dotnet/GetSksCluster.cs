// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Exoscale
{
    public static class GetSksCluster
    {
        public static Task<GetSksClusterResult> InvokeAsync(GetSksClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSksClusterResult>("exoscale:index/getSksCluster:getSksCluster", args ?? new GetSksClusterArgs(), options.WithDefaults());

        public static Output<GetSksClusterResult> Invoke(GetSksClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSksClusterResult>("exoscale:index/getSksCluster:getSksCluster", args ?? new GetSksClusterInvokeArgs(), options.WithDefaults());

        public static Output<GetSksClusterResult> Invoke(GetSksClusterInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSksClusterResult>("exoscale:index/getSksCluster:getSksCluster", args ?? new GetSksClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSksClusterArgs : global::Pulumi.InvokeArgs
    {
        [Input("addons")]
        private List<string>? _addons;
        [Obsolete(@"This attribute has been replaced by `ExoscaleCcm`/`MetricsServer` attributes, it will be removed in a future release.")]
        public List<string> Addons
        {
            get => _addons ?? (_addons = new List<string>());
            set => _addons = value;
        }

        /// <summary>
        /// The CA certificate (in PEM format) for TLS communications between the control plane and the aggregation layer (e.g. `metrics-server`).
        /// </summary>
        [Input("aggregationCa")]
        public string? AggregationCa { get; set; }

        [Input("audit")]
        public Inputs.GetSksClusterAuditArgs? Audit { get; set; }

        /// <summary>
        /// Enable automatic upgrading of the control plane version.
        /// </summary>
        [Input("autoUpgrade")]
        public bool? AutoUpgrade { get; set; }

        /// <summary>
        /// The CNI plugin that is to be used. Available options are "calico" or "cilium". Defaults to "calico". Setting empty string will result in a cluster with no CNI.
        /// </summary>
        [Input("cni")]
        public string? Cni { get; set; }

        /// <summary>
        /// The CA certificate (in PEM format) for TLS communications between control plane components.
        /// </summary>
        [Input("controlPlaneCa")]
        public string? ControlPlaneCa { get; set; }

        /// <summary>
        /// The cluster creation date.
        /// </summary>
        [Input("createdAt")]
        public string? CreatedAt { get; set; }

        /// <summary>
        /// A free-form text describing the cluster.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// ❗ Indicates whether to deploy the Kubernetes network proxy. (may only be set at creation time)
        /// </summary>
        [Input("enableKubeProxy")]
        public bool? EnableKubeProxy { get; set; }

        /// <summary>
        /// The cluster API endpoint.
        /// </summary>
        [Input("endpoint")]
        public string? Endpoint { get; set; }

        /// <summary>
        /// Deploy the Exoscale [Cloud Controller Manager](https://github.com/exoscale/exoscale-cloud-controller-manager/) in the control plane (boolean; default: `True`; may only be set at creation time).
        /// </summary>
        [Input("exoscaleCcm")]
        public bool? ExoscaleCcm { get; set; }

        /// <summary>
        /// Deploy the Exoscale [Container Storage Interface](https://github.com/exoscale/exoscale-csi-driver/) on worker nodes (boolean; default: `False`; requires the CCM to be enabled).
        /// </summary>
        [Input("exoscaleCsi")]
        public bool? ExoscaleCsi { get; set; }

        [Input("featureGates")]
        private List<string>? _featureGates;

        /// <summary>
        /// Feature gates options for the cluster.
        /// </summary>
        public List<string> FeatureGates
        {
            get => _featureGates ?? (_featureGates = new List<string>());
            set => _featureGates = value;
        }

        /// <summary>
        /// The ID of this resource.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The CA certificate (in PEM format) for TLS communications between kubelets and the control plane.
        /// </summary>
        [Input("kubeletCa")]
        public string? KubeletCa { get; set; }

        [Input("labels")]
        private Dictionary<string, string>? _labels;

        /// <summary>
        /// A map of key/value labels.
        /// </summary>
        public Dictionary<string, string> Labels
        {
            get => _labels ?? (_labels = new Dictionary<string, string>());
            set => _labels = value;
        }

        /// <summary>
        /// Deploy the [Kubernetes Metrics Server](https://github.com/kubernetes-sigs/metrics-server/) in the control plane (boolean; default: `True`; may only be set at creation time).
        /// </summary>
        [Input("metricsServer")]
        public bool? MetricsServer { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("nodepools")]
        private List<string>? _nodepools;

        /// <summary>
        /// The list of exoscale*sks*nodepool (IDs) attached to the cluster.
        /// </summary>
        public List<string> Nodepools
        {
            get => _nodepools ?? (_nodepools = new List<string>());
            set => _nodepools = value;
        }

        /// <summary>
        /// An OpenID Connect configuration to provide to the Kubernetes API server (may only be set at creation time). Structure is documented below.
        /// </summary>
        [Input("oidc")]
        public Inputs.GetSksClusterOidcArgs? Oidc { get; set; }

        /// <summary>
        /// The service level of the control plane (`Pro` or `Starter`; default: `Pro`; may only be set at creation time).
        /// </summary>
        [Input("serviceLevel")]
        public string? ServiceLevel { get; set; }

        /// <summary>
        /// The cluster state.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// The version of the control plane (default: latest version available from the API; see `exo compute sks versions` for reference; may only be set at creation time).
        /// </summary>
        [Input("version")]
        public string? Version { get; set; }

        [Input("zone", required: true)]
        public string Zone { get; set; } = null!;

        public GetSksClusterArgs()
        {
        }
        public static new GetSksClusterArgs Empty => new GetSksClusterArgs();
    }

    public sealed class GetSksClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("addons")]
        private InputList<string>? _addons;
        [Obsolete(@"This attribute has been replaced by `ExoscaleCcm`/`MetricsServer` attributes, it will be removed in a future release.")]
        public InputList<string> Addons
        {
            get => _addons ?? (_addons = new InputList<string>());
            set => _addons = value;
        }

        /// <summary>
        /// The CA certificate (in PEM format) for TLS communications between the control plane and the aggregation layer (e.g. `metrics-server`).
        /// </summary>
        [Input("aggregationCa")]
        public Input<string>? AggregationCa { get; set; }

        [Input("audit")]
        public Input<Inputs.GetSksClusterAuditInputArgs>? Audit { get; set; }

        /// <summary>
        /// Enable automatic upgrading of the control plane version.
        /// </summary>
        [Input("autoUpgrade")]
        public Input<bool>? AutoUpgrade { get; set; }

        /// <summary>
        /// The CNI plugin that is to be used. Available options are "calico" or "cilium". Defaults to "calico". Setting empty string will result in a cluster with no CNI.
        /// </summary>
        [Input("cni")]
        public Input<string>? Cni { get; set; }

        /// <summary>
        /// The CA certificate (in PEM format) for TLS communications between control plane components.
        /// </summary>
        [Input("controlPlaneCa")]
        public Input<string>? ControlPlaneCa { get; set; }

        /// <summary>
        /// The cluster creation date.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// A free-form text describing the cluster.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// ❗ Indicates whether to deploy the Kubernetes network proxy. (may only be set at creation time)
        /// </summary>
        [Input("enableKubeProxy")]
        public Input<bool>? EnableKubeProxy { get; set; }

        /// <summary>
        /// The cluster API endpoint.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// Deploy the Exoscale [Cloud Controller Manager](https://github.com/exoscale/exoscale-cloud-controller-manager/) in the control plane (boolean; default: `True`; may only be set at creation time).
        /// </summary>
        [Input("exoscaleCcm")]
        public Input<bool>? ExoscaleCcm { get; set; }

        /// <summary>
        /// Deploy the Exoscale [Container Storage Interface](https://github.com/exoscale/exoscale-csi-driver/) on worker nodes (boolean; default: `False`; requires the CCM to be enabled).
        /// </summary>
        [Input("exoscaleCsi")]
        public Input<bool>? ExoscaleCsi { get; set; }

        [Input("featureGates")]
        private InputList<string>? _featureGates;

        /// <summary>
        /// Feature gates options for the cluster.
        /// </summary>
        public InputList<string> FeatureGates
        {
            get => _featureGates ?? (_featureGates = new InputList<string>());
            set => _featureGates = value;
        }

        /// <summary>
        /// The ID of this resource.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The CA certificate (in PEM format) for TLS communications between kubelets and the control plane.
        /// </summary>
        [Input("kubeletCa")]
        public Input<string>? KubeletCa { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A map of key/value labels.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Deploy the [Kubernetes Metrics Server](https://github.com/kubernetes-sigs/metrics-server/) in the control plane (boolean; default: `True`; may only be set at creation time).
        /// </summary>
        [Input("metricsServer")]
        public Input<bool>? MetricsServer { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodepools")]
        private InputList<string>? _nodepools;

        /// <summary>
        /// The list of exoscale*sks*nodepool (IDs) attached to the cluster.
        /// </summary>
        public InputList<string> Nodepools
        {
            get => _nodepools ?? (_nodepools = new InputList<string>());
            set => _nodepools = value;
        }

        /// <summary>
        /// An OpenID Connect configuration to provide to the Kubernetes API server (may only be set at creation time). Structure is documented below.
        /// </summary>
        [Input("oidc")]
        public Input<Inputs.GetSksClusterOidcInputArgs>? Oidc { get; set; }

        /// <summary>
        /// The service level of the control plane (`Pro` or `Starter`; default: `Pro`; may only be set at creation time).
        /// </summary>
        [Input("serviceLevel")]
        public Input<string>? ServiceLevel { get; set; }

        /// <summary>
        /// The cluster state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The version of the control plane (default: latest version available from the API; see `exo compute sks versions` for reference; may only be set at creation time).
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public GetSksClusterInvokeArgs()
        {
        }
        public static new GetSksClusterInvokeArgs Empty => new GetSksClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetSksClusterResult
    {
        public readonly ImmutableArray<string> Addons;
        /// <summary>
        /// The CA certificate (in PEM format) for TLS communications between the control plane and the aggregation layer (e.g. `metrics-server`).
        /// </summary>
        public readonly string AggregationCa;
        public readonly Outputs.GetSksClusterAuditResult? Audit;
        /// <summary>
        /// Enable automatic upgrading of the control plane version.
        /// </summary>
        public readonly bool? AutoUpgrade;
        /// <summary>
        /// The CNI plugin that is to be used. Available options are "calico" or "cilium". Defaults to "calico". Setting empty string will result in a cluster with no CNI.
        /// </summary>
        public readonly string? Cni;
        /// <summary>
        /// The CA certificate (in PEM format) for TLS communications between control plane components.
        /// </summary>
        public readonly string ControlPlaneCa;
        /// <summary>
        /// The cluster creation date.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// A free-form text describing the cluster.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// ❗ Indicates whether to deploy the Kubernetes network proxy. (may only be set at creation time)
        /// </summary>
        public readonly bool EnableKubeProxy;
        /// <summary>
        /// The cluster API endpoint.
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// Deploy the Exoscale [Cloud Controller Manager](https://github.com/exoscale/exoscale-cloud-controller-manager/) in the control plane (boolean; default: `True`; may only be set at creation time).
        /// </summary>
        public readonly bool? ExoscaleCcm;
        /// <summary>
        /// Deploy the Exoscale [Container Storage Interface](https://github.com/exoscale/exoscale-csi-driver/) on worker nodes (boolean; default: `False`; requires the CCM to be enabled).
        /// </summary>
        public readonly bool? ExoscaleCsi;
        /// <summary>
        /// Feature gates options for the cluster.
        /// </summary>
        public readonly ImmutableArray<string> FeatureGates;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The CA certificate (in PEM format) for TLS communications between kubelets and the control plane.
        /// </summary>
        public readonly string KubeletCa;
        /// <summary>
        /// A map of key/value labels.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Labels;
        /// <summary>
        /// Deploy the [Kubernetes Metrics Server](https://github.com/kubernetes-sigs/metrics-server/) in the control plane (boolean; default: `True`; may only be set at creation time).
        /// </summary>
        public readonly bool? MetricsServer;
        public readonly string? Name;
        /// <summary>
        /// The list of exoscale*sks*nodepool (IDs) attached to the cluster.
        /// </summary>
        public readonly ImmutableArray<string> Nodepools;
        /// <summary>
        /// An OpenID Connect configuration to provide to the Kubernetes API server (may only be set at creation time). Structure is documented below.
        /// </summary>
        public readonly Outputs.GetSksClusterOidcResult Oidc;
        /// <summary>
        /// The service level of the control plane (`Pro` or `Starter`; default: `Pro`; may only be set at creation time).
        /// </summary>
        public readonly string? ServiceLevel;
        /// <summary>
        /// The cluster state.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The version of the control plane (default: latest version available from the API; see `exo compute sks versions` for reference; may only be set at creation time).
        /// </summary>
        public readonly string Version;
        public readonly string Zone;

        [OutputConstructor]
        private GetSksClusterResult(
            ImmutableArray<string> addons,

            string aggregationCa,

            Outputs.GetSksClusterAuditResult? audit,

            bool? autoUpgrade,

            string? cni,

            string controlPlaneCa,

            string createdAt,

            string? description,

            bool enableKubeProxy,

            string endpoint,

            bool? exoscaleCcm,

            bool? exoscaleCsi,

            ImmutableArray<string> featureGates,

            string? id,

            string kubeletCa,

            ImmutableDictionary<string, string>? labels,

            bool? metricsServer,

            string? name,

            ImmutableArray<string> nodepools,

            Outputs.GetSksClusterOidcResult oidc,

            string? serviceLevel,

            string state,

            string version,

            string zone)
        {
            Addons = addons;
            AggregationCa = aggregationCa;
            Audit = audit;
            AutoUpgrade = autoUpgrade;
            Cni = cni;
            ControlPlaneCa = controlPlaneCa;
            CreatedAt = createdAt;
            Description = description;
            EnableKubeProxy = enableKubeProxy;
            Endpoint = endpoint;
            ExoscaleCcm = exoscaleCcm;
            ExoscaleCsi = exoscaleCsi;
            FeatureGates = featureGates;
            Id = id;
            KubeletCa = kubeletCa;
            Labels = labels;
            MetricsServer = metricsServer;
            Name = name;
            Nodepools = nodepools;
            Oidc = oidc;
            ServiceLevel = serviceLevel;
            State = state;
            Version = version;
            Zone = zone;
        }
    }
}
