// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Exoscale
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Exoscale = Pulumiverse.Exoscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myRole = new Exoscale.IamRole("my_role", new()
    ///     {
    ///         Name = "my-role",
    ///         Description = "Example role",
    ///         Editable = true,
    ///         Policy = new Exoscale.Inputs.IamRolePolicyArgs
    ///         {
    ///             DefaultServiceStrategy = "deny",
    ///             Services = 
    ///             {
    ///                 { "sos", new Exoscale.Inputs.IamRolePolicyServicesArgs
    ///                 {
    ///                     Type = "allow",
    ///                 } },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var myApiKey = new Exoscale.IamApiKey("my_api_key", new()
    ///     {
    ///         Name = "my-api-key",
    ///         RoleId = myRole.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// Please refer to the examples
    /// directory for complete configuration examples.
    /// </summary>
    [ExoscaleResourceType("exoscale:index/iamApiKey:IamApiKey")]
    public partial class IamApiKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The IAM API Key to match.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// ❗ IAM API Key name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// ❗ IAM API role ID.
        /// </summary>
        [Output("roleId")]
        public Output<string> RoleId { get; private set; } = null!;

        /// <summary>
        /// Secret for the IAM API Key.
        /// </summary>
        [Output("secret")]
        public Output<string> Secret { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.IamApiKeyTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a IamApiKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IamApiKey(string name, IamApiKeyArgs args, CustomResourceOptions? options = null)
            : base("exoscale:index/iamApiKey:IamApiKey", name, args ?? new IamApiKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IamApiKey(string name, Input<string> id, IamApiKeyState? state = null, CustomResourceOptions? options = null)
            : base("exoscale:index/iamApiKey:IamApiKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-exoscale",
                AdditionalSecretOutputs =
                {
                    "secret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IamApiKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IamApiKey Get(string name, Input<string> id, IamApiKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new IamApiKey(name, id, state, options);
        }
    }

    public sealed class IamApiKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ❗ IAM API Key name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ❗ IAM API role ID.
        /// </summary>
        [Input("roleId", required: true)]
        public Input<string> RoleId { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.IamApiKeyTimeoutsArgs>? Timeouts { get; set; }

        public IamApiKeyArgs()
        {
        }
        public static new IamApiKeyArgs Empty => new IamApiKeyArgs();
    }

    public sealed class IamApiKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The IAM API Key to match.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// ❗ IAM API Key name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ❗ IAM API role ID.
        /// </summary>
        [Input("roleId")]
        public Input<string>? RoleId { get; set; }

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// Secret for the IAM API Key.
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("timeouts")]
        public Input<Inputs.IamApiKeyTimeoutsGetArgs>? Timeouts { get; set; }

        public IamApiKeyState()
        {
        }
        public static new IamApiKeyState Empty => new IamApiKeyState();
    }
}
