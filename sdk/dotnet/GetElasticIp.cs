// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Exoscale
{
    public static class GetElasticIp
    {
        /// <summary>
        /// Fetch Exoscale [Elastic IPs (EIP)](https://community.exoscale.com/product/networking/eip/) data.
        /// 
        /// Corresponding resource: exoscale_elastic_ip.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Exoscale = Pulumi.Exoscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myElasticIp = Exoscale.GetElasticIp.Invoke(new()
        ///     {
        ///         Zone = "ch-gva-2",
        ///         IpAddress = "1.2.3.4",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["myElasticIpId"] = myElasticIp.Apply(getElasticIpResult =&gt; getElasticIpResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// Please refer to the examples
        /// directory for complete configuration examples.
        /// </summary>
        public static Task<GetElasticIpResult> InvokeAsync(GetElasticIpArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetElasticIpResult>("exoscale:index/getElasticIp:getElasticIp", args ?? new GetElasticIpArgs(), options.WithDefaults());

        /// <summary>
        /// Fetch Exoscale [Elastic IPs (EIP)](https://community.exoscale.com/product/networking/eip/) data.
        /// 
        /// Corresponding resource: exoscale_elastic_ip.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Exoscale = Pulumi.Exoscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myElasticIp = Exoscale.GetElasticIp.Invoke(new()
        ///     {
        ///         Zone = "ch-gva-2",
        ///         IpAddress = "1.2.3.4",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["myElasticIpId"] = myElasticIp.Apply(getElasticIpResult =&gt; getElasticIpResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// Please refer to the examples
        /// directory for complete configuration examples.
        /// </summary>
        public static Output<GetElasticIpResult> Invoke(GetElasticIpInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetElasticIpResult>("exoscale:index/getElasticIp:getElasticIp", args ?? new GetElasticIpInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Fetch Exoscale [Elastic IPs (EIP)](https://community.exoscale.com/product/networking/eip/) data.
        /// 
        /// Corresponding resource: exoscale_elastic_ip.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Exoscale = Pulumi.Exoscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myElasticIp = Exoscale.GetElasticIp.Invoke(new()
        ///     {
        ///         Zone = "ch-gva-2",
        ///         IpAddress = "1.2.3.4",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["myElasticIpId"] = myElasticIp.Apply(getElasticIpResult =&gt; getElasticIpResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// Please refer to the examples
        /// directory for complete configuration examples.
        /// </summary>
        public static Output<GetElasticIpResult> Invoke(GetElasticIpInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetElasticIpResult>("exoscale:index/getElasticIp:getElasticIp", args ?? new GetElasticIpInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetElasticIpArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Elastic IP (EIP) ID to match (conflicts with `IpAddress` and `Labels`).
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The EIP IPv4 or IPv6 address to match (conflicts with `Id` and `Labels`).
        /// </summary>
        [Input("ipAddress")]
        public string? IpAddress { get; set; }

        [Input("labels")]
        private Dictionary<string, string>? _labels;

        /// <summary>
        /// The EIP labels to match (conflicts with `IpAddress` and `Id`).
        /// </summary>
        public Dictionary<string, string> Labels
        {
            get => _labels ?? (_labels = new Dictionary<string, string>());
            set => _labels = value;
        }

        /// <summary>
        /// The Exocale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        [Input("zone", required: true)]
        public string Zone { get; set; } = null!;

        public GetElasticIpArgs()
        {
        }
        public static new GetElasticIpArgs Empty => new GetElasticIpArgs();
    }

    public sealed class GetElasticIpInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Elastic IP (EIP) ID to match (conflicts with `IpAddress` and `Labels`).
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The EIP IPv4 or IPv6 address to match (conflicts with `Id` and `Labels`).
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// The EIP labels to match (conflicts with `IpAddress` and `Id`).
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The Exocale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public GetElasticIpInvokeArgs()
        {
        }
        public static new GetElasticIpInvokeArgs Empty => new GetElasticIpInvokeArgs();
    }


    [OutputType]
    public sealed class GetElasticIpResult
    {
        /// <summary>
        /// The Elastic IP (EIP) address family (`Inet4` or `Inet6`).
        /// </summary>
        public readonly string AddressFamily;
        /// <summary>
        /// The Elastic IP (EIP) CIDR.
        /// </summary>
        public readonly string Cidr;
        /// <summary>
        /// The Elastic IP (EIP) description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The *managed* EIP healthcheck configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetElasticIpHealthcheckResult> Healthchecks;
        /// <summary>
        /// The Elastic IP (EIP) ID to match (conflicts with `IpAddress` and `Labels`).
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The EIP IPv4 or IPv6 address to match (conflicts with `Id` and `Labels`).
        /// </summary>
        public readonly string? IpAddress;
        /// <summary>
        /// The EIP labels to match (conflicts with `IpAddress` and `Id`).
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Labels;
        /// <summary>
        /// Domain name for reverse DNS record.
        /// </summary>
        public readonly string ReverseDns;
        /// <summary>
        /// The Exocale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        public readonly string Zone;

        [OutputConstructor]
        private GetElasticIpResult(
            string addressFamily,

            string cidr,

            string description,

            ImmutableArray<Outputs.GetElasticIpHealthcheckResult> healthchecks,

            string? id,

            string? ipAddress,

            ImmutableDictionary<string, string>? labels,

            string reverseDns,

            string zone)
        {
            AddressFamily = addressFamily;
            Cidr = cidr;
            Description = description;
            Healthchecks = healthchecks;
            Id = id;
            IpAddress = ipAddress;
            Labels = labels;
            ReverseDns = reverseDns;
            Zone = zone;
        }
    }
}
