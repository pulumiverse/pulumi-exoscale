// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Exoscale
{
    public static class GetIamOrgPolicy
    {
        /// <summary>
        /// Fetch Exoscale [IAM](https://community.exoscale.com/documentation/iam/) Organization Policy.
        /// 
        /// Corresponding resource: exoscale_iam_org_policy.
        /// </summary>
        public static Task<GetIamOrgPolicyResult> InvokeAsync(GetIamOrgPolicyArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIamOrgPolicyResult>("exoscale:index/getIamOrgPolicy:getIamOrgPolicy", args ?? new GetIamOrgPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Fetch Exoscale [IAM](https://community.exoscale.com/documentation/iam/) Organization Policy.
        /// 
        /// Corresponding resource: exoscale_iam_org_policy.
        /// </summary>
        public static Output<GetIamOrgPolicyResult> Invoke(GetIamOrgPolicyInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIamOrgPolicyResult>("exoscale:index/getIamOrgPolicy:getIamOrgPolicy", args ?? new GetIamOrgPolicyInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Fetch Exoscale [IAM](https://community.exoscale.com/documentation/iam/) Organization Policy.
        /// 
        /// Corresponding resource: exoscale_iam_org_policy.
        /// </summary>
        public static Output<GetIamOrgPolicyResult> Invoke(GetIamOrgPolicyInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetIamOrgPolicyResult>("exoscale:index/getIamOrgPolicy:getIamOrgPolicy", args ?? new GetIamOrgPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIamOrgPolicyArgs : global::Pulumi.InvokeArgs
    {
        [Input("timeouts")]
        public Inputs.GetIamOrgPolicyTimeoutsArgs? Timeouts { get; set; }

        public GetIamOrgPolicyArgs()
        {
        }
        public static new GetIamOrgPolicyArgs Empty => new GetIamOrgPolicyArgs();
    }

    public sealed class GetIamOrgPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("timeouts")]
        public Input<Inputs.GetIamOrgPolicyTimeoutsInputArgs>? Timeouts { get; set; }

        public GetIamOrgPolicyInvokeArgs()
        {
        }
        public static new GetIamOrgPolicyInvokeArgs Empty => new GetIamOrgPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetIamOrgPolicyResult
    {
        /// <summary>
        /// Default service strategy (`allow` or `deny`).
        /// </summary>
        public readonly string DefaultServiceStrategy;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IAM policy services.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.GetIamOrgPolicyServicesResult> Services;
        public readonly Outputs.GetIamOrgPolicyTimeoutsResult? Timeouts;

        [OutputConstructor]
        private GetIamOrgPolicyResult(
            string defaultServiceStrategy,

            string id,

            ImmutableDictionary<string, Outputs.GetIamOrgPolicyServicesResult> services,

            Outputs.GetIamOrgPolicyTimeoutsResult? timeouts)
        {
            DefaultServiceStrategy = defaultServiceStrategy;
            Id = id;
            Services = services;
            Timeouts = timeouts;
        }
    }
}
